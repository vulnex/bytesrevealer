# Build stage
FROM node:20-alpine AS builder

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install ALL dependencies including devDependencies
# Using npm install instead of npm ci for better compatibility
RUN npm install

# Copy all project files
COPY . .

# Build the application
RUN npm run build

# Production stage - Using nginx for better performance
FROM nginx:alpine

# Install wget for healthcheck
RUN apk add --no-cache wget

# Remove default nginx config
RUN rm -rf /etc/nginx/conf.d/*

# Copy optimized nginx config
COPY nginx/nginx-optimized.conf /etc/nginx/conf.d/default.conf

# Copy built application from builder stage
COPY --from=builder /app/dist /usr/share/nginx/html

# Copy public assets directly (including service worker and manifest)
COPY --from=builder /app/public/favicon.ico /usr/share/nginx/html/favicon.ico
COPY --from=builder /app/public/favicon.svg /usr/share/nginx/html/favicon.svg
COPY --from=builder /app/public/manifest.json /usr/share/nginx/html/manifest.json
COPY --from=builder /app/public/service-worker.js /usr/share/nginx/html/service-worker.js
COPY --from=builder /app/public/*.png /usr/share/nginx/html/
COPY --from=builder /app/public/site.webmanifest /usr/share/nginx/html/site.webmanifest

# Create a non-root user to run nginx
RUN adduser -D -H -u 1000 -s /bin/sh www-data -G www-data || true

# Set proper permissions
RUN chown -R nginx:nginx /usr/share/nginx/html && \
    chmod -R 755 /usr/share/nginx/html && \
    chown -R nginx:nginx /var/cache/nginx && \
    chown -R nginx:nginx /var/log/nginx && \
    chown -R nginx:nginx /etc/nginx/conf.d && \
    touch /var/run/nginx.pid && \
    chown -R nginx:nginx /var/run/nginx.pid

# Healthcheck
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:80/ || exit 1

EXPOSE 80

# Run nginx in foreground
CMD ["nginx", "-g", "daemon off;"]