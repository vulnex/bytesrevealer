/**
 * Kaitai Formats - Fonts
 * 3 formats
 * Auto-generated: 2025-09-21T19:51:05.639Z
 */

export const fontsFormats = [
  {
    "id": "ksy_grub2_font",
    "name": "GRUB 2 font",
    "category": "Fonts",
    "metadata": {
      "isGenerated": true,
      "fileExtensions": [
        "pf2"
      ],
      "description": "GRUB 2 font",
      "originalCategory": "font",
      "filePath": "font/grub2_font.ksy",
      "signature": {
        "offset": 0,
        "bytes": [
          15,
          0,
          0,
          0,
          4,
          null
        ]
      },
      "endian": "be"
    },
    "content": "meta:\n  id: grub2_font\n  title: GRUB 2 font\n  application: GRUB 2\n  file-extension: pf2\n  xref:\n    justsolve: PFF2\n    wikidata: Q29650337\n  tags:\n    - font\n  license: CC0-1.0\n  encoding: ASCII\n  endian: be\ndoc: |\n  Bitmap font format for the GRUB 2 bootloader.\ndoc-ref: https://grub.gibibit.com/New_font_format\nseq:\n  - id: magic\n    contents: [\"FILE\", 0, 0, 0, 4, \"PFF2\"]\n    size: 12\n  - id: sections\n    type: section\n    repeat: until\n    repeat-until: _.section_type == \"DATA\"\n    doc: |\n      The \"DATA\" section acts as a terminator. The documentation says:\n      \"A marker that indicates the remainder of the file is data accessed\n      via the character index (CHIX) section. When reading this font file,\n      the rest of the file can be ignored when scanning the sections.\"\ntypes:\n  section:\n    seq:\n      - id: section_type\n        size: 4\n        type: str\n      - id: len_body\n        type: u4\n        doc: Should be set to `0xFFFF_FFFF` for `section_type != \"DATA\"`\n      - id: body\n        size: len_body\n        type:\n          switch-on: section_type\n          cases:\n            '\"NAME\"': name_section\n            '\"FAMI\"': fami_section\n            '\"WEIG\"': weig_section\n            '\"SLAN\"': slan_section\n            '\"PTSZ\"': ptsz_section\n            '\"MAXW\"': maxw_section\n            '\"MAXH\"': maxh_section\n            '\"ASCE\"': asce_section\n            '\"DESC\"': desc_section\n            '\"CHIX\"': chix_section\n        if: section_type != \"DATA\"\n  name_section:\n    seq:\n      - id: font_name\n        type: strz\n  fami_section:\n    seq:\n      - id: font_family_name\n        type: strz\n  weig_section:\n    seq:\n      - id: font_weight\n        type: strz\n  slan_section:\n    seq:\n      - id: font_slant\n        type: strz\n  ptsz_section:\n    seq:\n      - id: font_point_size\n        type: u2\n  maxw_section:\n    seq:\n      - id: maximum_character_width\n        type: u2\n  maxh_section:\n    seq:\n      - id: maximum_character_height\n        type: u2\n  asce_section:\n    seq:\n      - id: ascent_in_pixels\n        type: u2\n  desc_section:\n    seq:\n      - id: descent_in_pixels\n        type: u2\n  chix_section:\n    seq:\n      - id: characters\n        type: character\n        repeat: eos\n    types:\n      character:\n        seq:\n          - id: code_point\n            type: u4\n            doc: Unicode code point\n          - id: flags\n            type: u1\n          - id: ofs_definition\n            type: u4\n        instances:\n          definition:\n            io: _root._io\n            pos: ofs_definition\n            type: character_definition\n      character_definition:\n        seq:\n          - id: width\n            type: u2\n          - id: height\n            type: u2\n          - id: x_offset\n            type: s2\n          - id: y_offset\n            type: s2\n          - id: device_width\n            type: s2\n          - id: bitmap_data\n            size: (width * height + 7) / 8 # ceiled integer division\n            doc: |\n              A two-dimensional bitmap, one bit per pixel. It is organized as\n              row-major, top-down, left-to-right. The most significant bit of\n              each byte corresponds to the leftmost or uppermost pixel from all\n              bits of the byte. If a bit is set (1, `true`), the pixel is set to\n              the font color, if a bit is clear (0, `false`), the pixel is\n              transparent.\n\n              Rows are **not** padded to byte boundaries (i.e., a\n              single byte may contain bits belonging to multiple rows). The last\n              byte of the bitmap _is_ padded with zero bits at all unused least\n              significant bit positions so that the bitmap ends on a byte\n              boundary.\n"
  },
  {
    "id": "ksy_pcf_font",
    "name": "Portable Compiled Format (PCF) font",
    "category": "Fonts",
    "metadata": {
      "isGenerated": true,
      "fileExtensions": [
        "pcf"
      ],
      "description": "Portable Compiled Format (PCF) font",
      "originalCategory": "font",
      "filePath": "font/pcf_font.ksy",
      "signature": {
        "offset": 0,
        "bytes": [
          1,
          252
        ]
      },
      "endian": "le"
    },
    "content": "meta:\n  id: pcf_font\n  title: Portable Compiled Format (PCF) font\n  file-extension: pcf\n  xref:\n    justsolve: PCF\n    wikidata: Q3398726\n  license: CC0-1.0\n  ks-version: 0.9\n  imports:\n    - /common/bytes_with_io\n  encoding: UTF-8\n  endian: le\ndoc: |\n  Portable Compiled Format (PCF) font is a bitmap font format\n  originating from X11 Window System. It matches BDF format (which is\n  text-based) closely, but instead being binary and\n  platform-independent (as opposed to previously used SNF binary\n  format) due to introduced features to handle different endianness\n  and bit order.\n\n  The overall composition of the format is straightforward: it's more\n  or less classic directory of type-offset-size pointers, pointing to\n  what PCF format calls \"tables\". Each table carries a certain\n  piece of information related to the font (metadata properties,\n  metrics, bitmaps, mapping of glyphs to characters, etc).\ndoc-ref: https://fontforge.org/docs/techref/pcf-format.html\nseq:\n  - id: magic\n    -orig-id: header\n    contents: [0x1, \"fcp\"]\n  - id: num_tables\n    -orig-id: table_count\n    type: u4\n  - id: tables\n    type: table\n    repeat: expr\n    repeat-expr: num_tables\ntypes:\n  table:\n    doc: |\n      Table offers a offset + length pointer to a particular\n      table. \"Type\" of table references certain enum. Applications can\n      ignore enum values which they don't support.\n    -webide-representation: \"{type}\"\n    seq:\n      - id: type\n        type: u4\n        enum: types\n      - id: format\n        type: format\n      - id: len_body\n        -orig-id: size\n        type: u4\n      - id: ofs_body\n        -orig-id: offset\n        type: u4\n    instances:\n      body:\n        pos: ofs_body\n        size: len_body\n        type:\n          switch-on: type\n          cases:\n            'types::properties': properties\n            # TODO: accelerators\n            # TODO: metrics\n            # TODO: ink_metrics\n            'types::bitmaps': bitmaps\n            'types::bdf_encodings': bdf_encodings\n            'types::swidths': swidths\n            'types::glyph_names': glyph_names\n            # TODO: bdf_accelerators\n    types:\n      properties:\n        doc: |\n          Array of properties (key-value pairs), used to convey different X11\n          settings of a font. Key is always an X font atom.\n        doc-ref: 'https://fontforge.org/docs/techref/pcf-format.html#properties-table'\n        -webide-representation: \"{num_props:dec} properties\"\n        seq:\n          - id: format\n            type: format\n          - id: num_props\n            type: u4\n          - id: props\n            type: prop\n            repeat: expr\n            repeat-expr: num_props\n          - id: padding\n            size: '(num_props & 3) == 0 ? 0 : (4 - (num_props & 3))'\n            # In reality: align to next 4-byte boundary\n          - id: len_strings\n            type: u4\n          - id: strings\n            size: len_strings\n            type: bytes_with_io\n            doc: |\n              Strings buffer. Never used directly, but instead is\n              addressed by offsets from the properties.\n        types:\n          prop:\n            doc: |\n              Property is a key-value pair, \"key\" being always a\n              string and \"value\" being either a string or a 32-bit\n              integer based on an additinal flag (`is_string`).\n\n              Simple offset-based mechanism is employed to keep this\n              type's sequence fixed-sized and thus have simple access\n              to property key/value by index.\n            -webide-representation: \"{name} => {str_value}/{int_value}\"\n            seq:\n              - id: ofs_name\n                type: u4\n                doc: Offset to name in the strings buffer.\n              - id: is_string\n                -orig-id: isStringProp\n                type: u1\n                doc: |\n                  Designates if value is an integer (zero) or a string (non-zero).\n              - id: value_or_ofs_value\n                type: u4\n                doc: |\n                  If the value is an integer (`is_string` is false),\n                  then it's stored here. If the value is a string\n                  (`is_string` is true), then it stores offset to the\n                  value in the strings buffer.\n            instances:\n              name:\n                io: _parent.strings._io\n                pos: ofs_name\n                type: strz\n                doc: |\n                  Name of the property addressed in the strings buffer.\n                -webide-parse-mode: eager\n              str_value:\n                io: _parent.strings._io\n                pos: value_or_ofs_value\n                type: strz\n                if: is_string != 0\n                doc: |\n                  Value of the property addressed in the strings\n                  buffer, if this is a string value.\n                -webide-parse-mode: eager\n              int_value:\n                value: value_or_ofs_value\n                if: is_string == 0\n                doc: |\n                  Value of the property, if this is an integer value.\n                -webide-parse-mode: eager\n\n              # As of Kaitai Struct 0.9, `value` fails with:\n              #\n              #     \"can't combine output types: StrFromBytesType(BytesTerminatedType(0,false,true,true,None),UTF-8) vs IntMultiType(false,Width4,Some(LittleEndian))\"\n              #\n              # ... so currently it's commented out.\n\n              #value:\n              #  value: '(is_string != 0) ? str_value : int_value'\n      bitmaps:\n        doc: |\n          Table containing uncompressed glyph bitmaps.\n        doc-ref: 'https://fontforge.org/docs/techref/pcf-format.html#the-bitmap-table'\n        seq:\n          - id: format\n            type: format\n          - id: num_glyphs\n            -orig-id: glyph_count\n            type: u4\n          - id: offsets\n            type: u4\n            repeat: expr\n            repeat-expr: num_glyphs\n          - id: bitmap_sizes\n            type: u4\n            repeat: expr\n            repeat-expr: 4\n      bdf_encodings:\n        doc: |\n          Table that allows mapping of character codes to glyphs present in the\n          font. Supports 1-byte and 2-byte character codes.\n\n          Note that this mapping is agnostic to character encoding itself - it\n          can represent ASCII, Unicode (ISO/IEC 10646), various single-byte\n          national encodings, etc. If application cares about it, normally\n          encoding will be specified in `properties` table, in the properties named\n          `CHARSET_REGISTRY` / `CHARSET_ENCODING`.\n        doc-ref: 'https://fontforge.org/docs/techref/pcf-format.html#the-encoding-table'\n        seq:\n          - id: format\n            type: format\n          - id: min_char_or_byte2\n            type: u2\n          - id: max_char_or_byte2\n            type: u2\n          - id: min_byte1\n            type: u2\n          - id: max_byte1\n            type: u2\n          - id: default_char\n            type: u2\n          - id: glyph_indexes\n            -orig-id: glyphindeces\n            type: u2\n            repeat: expr\n            repeat-expr: (max_char_or_byte2 - min_char_or_byte2 + 1) * (max_byte1 - min_byte1 + 1)\n      swidths:\n        doc: |\n          Table containing scalable widths of characters.\n        doc-ref: 'https://fontforge.org/docs/techref/pcf-format.html#the-scalable-widths-table'\n        -webide-representation: '{num_glyphs:dec} glyphs'\n        seq:\n          - id: format\n            type: format\n          - id: num_glyphs\n            type: u4\n          - id: swidths\n            type: u4\n            repeat: expr\n            repeat-expr: num_glyphs\n            doc: |\n              The scalable width of a character is the width of the corresponding\n              PostScript character in em-units (1/1000ths of an em).\n      glyph_names:\n        doc: |\n          Table containing character names for every glyph.\n        doc-ref: 'https://fontforge.org/docs/techref/pcf-format.html#the-glyph-names-table'\n        -webide-representation: '{num_glyphs:dec} glyphs'\n        seq:\n          - id: format\n            type: format\n          - id: num_glyphs\n            type: u4\n          - id: names\n            type: string_ref\n            repeat: expr\n            repeat-expr: num_glyphs\n            doc: |\n              Glyph names are represented as string references in strings buffer.\n          - id: len_strings\n            -orig-id: string_size\n            type: u4\n          - id: strings\n            size: len_strings\n            type: bytes_with_io\n            doc: |\n              Strings buffer which contains all glyph names.\n        types:\n          string_ref:\n            -webide-representation: '{value}'\n            seq:\n              - id: ofs_string\n                type: u4\n            instances:\n              value:\n                io: _parent.strings._io\n                pos: ofs_string\n                type: strz\n                -webide-parse-mode: eager\n  format:\n    doc: |\n      Table format specifier, always 4 bytes. Original implementation treats\n      it as always little-endian and makes liberal use of bitmasking to parse\n      various parts of it.\n\n      TODO: this format specification recognizes endianness and bit\n      order format bits, but it does not really takes any parsing\n      decisions based on them.\n    doc-ref: 'https://fontforge.org/docs/techref/pcf-format.html#file-header'\n    seq:\n      - id: padding1\n        type: b2\n      - id: scan_unit_mask\n        type: b2\n      - id: is_most_significant_bit_first\n        -orig-id: PCF_BYTE_MASK\n        type: b1\n      - id: is_big_endian\n        -orig-id: PCF_BYTE_MASK\n        type: b1\n        doc: If set, then all integers in the table are treated as big-endian\n      - id: glyph_pad_mask\n        type: b2\n        -orig-id: PCF_GLYPH_PAD_MASK\n      - id: format\n        type: u1\n      - id: padding\n        type: u2\nenums:\n  types:\n    1:\n      id: properties\n      -orig-id: PCF_PROPERTIES\n    2:\n      id: accelerators\n      -orig-id: PCF_ACCELERATORS\n    4:\n      id: metrics\n      -orig-id: PCF_METRICS\n    8:\n      id: bitmaps\n      -orig-id: PCF_BITMAPS\n    0x10:\n      id: ink_metrics\n      -orig-id: PCF_INK_METRICS\n    0x20:\n      id: bdf_encodings\n      -orig-id: PCF_BDF_ENCODINGS\n    0x40:\n      id: swidths\n      -orig-id: PCF_SWIDTHS\n    0x80:\n      id: glyph_names\n      -orig-id: PCF_GLYPH_NAMES\n    0x100:\n      id: bdf_accelerators\n      -orig-id: PCF_BDF_ACCELERATORS\n"
  },
  {
    "id": "ksy_ttf",
    "name": "TrueType Font File",
    "category": "Fonts",
    "metadata": {
      "isGenerated": true,
      "fileExtensions": [
        "ttf"
      ],
      "description": "TrueType Font File",
      "originalCategory": "font",
      "filePath": "font/ttf.ksy",
      "endian": "be"
    },
    "content": "meta:\n  id: ttf\n  title: TrueType Font File\n  file-extension: ttf\n  xref:\n    justsolve: TrueType\n    pronom: x-fmt/453\n    wikidata: Q751800\n  license: MIT\n  endian: be\ndoc: |\n  A TrueType font file contains data, in table format, that comprises\n  an outline font.\ndoc-ref: https://web.archive.org/web/20160410081432/https://www.microsoft.com/typography/tt/ttf_spec/ttch02.doc\nseq:\n  - id: offset_table\n    type: offset_table\n  - id: directory_table\n    type: dir_table_entry\n    repeat: expr\n    repeat-expr: offset_table.num_tables\ntypes:\n  fixed:\n    -webide-representation: '{major:dec}.{minor:dec}'\n    seq:\n      - id: major\n        type: u2\n      - id: minor\n        type: u2\n  offset_table:\n    seq:\n      - id: sfnt_version\n        type: fixed\n      - id: num_tables\n        type: u2\n      - id: search_range\n        type: u2\n      - id: entry_selector\n        type: u2\n      - id: range_shift\n        type: u2\n  dir_table_entry:\n    -webide-representation: '{tag} [{length:dec}b]: {value}'\n    seq:\n      - id: tag\n        type: str\n        size: 4\n        encoding: ascii\n      - id: checksum\n        type: u4\n      - id: offset\n        type: u4\n      - id: length\n        type: u4\n    instances:\n      value:\n        io: _root._io\n        pos: offset\n        size: length\n        type:\n          switch-on: tag\n          cases:\n            \"'cmap'\": cmap\n            \"'cvt '\": cvt\n            \"'glyf'\": glyf\n            \"'head'\": head\n            \"'hhea'\": hhea\n            \"'OS/2'\": os2\n            \"'prep'\": prep\n            \"'fpgm'\": fpgm\n            \"'kern'\": kern\n            \"'maxp'\": maxp\n            \"'post'\": post\n            \"'name'\": name\n        -webide-parse-mode: eager\n  cmap:\n    doc: >\n      cmap - Character To Glyph Index Mapping Table\n      This table defines the mapping of character codes to the glyph index values used in the font.\n    -webide-represetation: \"hello\"\n    seq:\n      - id: version_number\n        type: u2\n      - id: number_of_encoding_tables\n        type: u2\n      - id: tables\n        type: subtable_header\n        repeat: expr\n        repeat-expr: number_of_encoding_tables\n    types:\n      subtable_header:\n        -webide-representation: \"p:{platform_id:dec}, e:{encoding_id:dec}\"\n        seq:\n          - id: platform_id\n            type: u2\n          - id: encoding_id\n            type: u2\n          - id: subtable_offset\n            type: u4\n        instances:\n          table:\n            type: subtable\n            io: _parent._io\n            pos: subtable_offset\n            -webide-parse-mode: eager\n      subtable:\n        seq:\n          - id: format\n            type: u2\n            enum: subtable_format\n          - id: length\n            type: u2\n          - id: version\n            type: u2\n          - id: value\n            size: length - 6\n            type:\n              switch-on: format\n              cases:\n                subtable_format::byte_encoding_table: byte_encoding_table\n                subtable_format::high_byte_mapping_through_table: high_byte_mapping_through_table\n                subtable_format::segment_mapping_to_delta_values: segment_mapping_to_delta_values\n                subtable_format::trimmed_table_mapping: trimmed_table_mapping\n        enums:\n          subtable_format:\n            0: byte_encoding_table\n            2: high_byte_mapping_through_table\n            4: segment_mapping_to_delta_values\n            6: trimmed_table_mapping\n        types:\n          byte_encoding_table:\n            seq:\n              - id: glyph_id_array\n                size: 256\n          high_byte_mapping_through_table:\n            seq:\n              - id: sub_header_keys\n                type: u2\n                repeat: expr\n                repeat-expr: 256\n              # TODO\n          segment_mapping_to_delta_values:\n            seq:\n              - id: seg_count_x2\n                type: u2\n              - id: search_range\n                type: u2\n              - id: entry_selector\n                type: u2\n              - id: range_shift\n                type: u2\n              - id: end_count\n                type: u2\n                repeat: expr\n                repeat-expr: seg_count\n              - id: reserved_pad\n                type: u2\n              - id: start_count\n                type: u2\n                repeat: expr\n                repeat-expr: seg_count\n              - id: id_delta\n                type: u2\n                repeat: expr\n                repeat-expr: seg_count\n              - id: id_range_offset\n                type: u2\n                repeat: expr\n                repeat-expr: seg_count\n              - id: glyph_id_array\n                type: u2\n                repeat: eos\n            instances:\n              seg_count:\n                value: seg_count_x2 / 2\n                -webide-parse-mode: eager\n          trimmed_table_mapping:\n            seq:\n              - id: first_code\n                type: u2\n              - id: entry_count\n                type: u2\n              - id: glyph_id_array\n                type: u2\n                repeat: expr\n                repeat-expr: entry_count\n  cvt:\n    doc: >\n      cvt  - Control Value Table\n      This table contains a list of values that can be referenced by instructions.\n      They can be used, among other things, to control characteristics for different glyphs.\n    seq:\n      - id: fwords\n        type: s2\n        repeat: eos\n  glyf:\n    # https://github.com/fonttools/fonttools/blob/678876325ef26ac33e8c6d13f4fb70c3bef5da8e/Lib/fontTools/ttLib/tables/_g_l_y_f.py\n    # TODO: sadly, Kaitai currently cannot parse this structure\n    seq:\n      - id: number_of_contours\n        type: s2\n      - id: x_min\n        type: s2\n      - id: y_min\n        type: s2\n      - id: x_max\n        type: s2\n      - id: y_max\n        type: s2\n      - id: value\n        type: simple_glyph\n        if: number_of_contours > 0\n    types:\n      simple_glyph:\n        seq:\n          - id: end_pts_of_contours\n            type: u2\n            repeat: expr\n            repeat-expr: _parent.number_of_contours\n          - id: instruction_length\n            type: u2\n          - id: instructions\n            size: instruction_length\n          - id: flags\n            type: flag\n            repeat: expr\n            repeat-expr: point_count\n        instances:\n          point_count:\n            value: end_pts_of_contours.max + 1\n        types:\n          flag:\n            seq:\n              - id: reserved\n                type: b2\n              - id: y_is_same\n                type: b1\n              - id: x_is_same\n                type: b1\n              - id: repeat\n                type: b1\n              - id: y_short_vector\n                type: b1\n              - id: x_short_vector\n                type: b1\n              - id: on_curve\n                type: b1\n              - id: repeat_value\n                type: u1\n                if: repeat\n  head:\n    enums:\n      flags:\n        0x01: baseline_at_y0            # Bit 0 - baseline for font at y=0\n        0x02: left_sidebearing_at_x0    # Bit 1 - left sidebearing at x=0\n        0x04: flag_depend_on_point_size # Bit 2 - instructions may depend on point size\n        0x08: flag_force_ppem           # Bit 3 - force ppem to integer values for all internal scaler math;\n                                        #         may use fractional ppem sizes if this bit is clear\n        0x10: flag_may_advance_width    # Bit 4 - instructions may alter advance width (the advance widths might not scale linearly)\n      font_direction_hint:\n        0: fully_mixed_directional_glyphs\n        1: only_strongly_left_to_right\n        2: strongly_left_to_right_and_neutrals\n        #-1: only_strongly_right_to_left\n        #-2: strongly_right_to_left_and_neutrals\n    seq:\n      - id: version\n        type: fixed\n      - id: font_revision\n        type: fixed\n      - id: checksum_adjustment\n        type: u4\n      - id: magic_number\n        contents: [0x5F, 0x0F, 0x3C, 0xF5]\n      - id: flags\n        type: u2\n        enum: flags\n      - id: units_per_em\n        type: u2\n      - id: created\n        type: u8\n      - id: modified\n        type: u8\n      - id: x_min\n        type: s2\n      - id: y_min\n        type: s2\n      - id: x_max\n        type: s2\n      - id: y_max\n        type: s2\n      - id: mac_style\n        type: u2\n      - id: lowest_rec_ppem\n        type: u2\n      - id: font_direction_hint\n        type: s2\n        enum: font_direction_hint\n      - id: index_to_loc_format\n        type: s2\n      - id: glyph_data_format\n        type: s2\n  hhea:\n    seq:\n      - id: version\n        type: fixed\n      - id: ascender\n        type: s2\n        doc: 'Typographic ascent'\n      - id: descender\n        type: s2\n        doc: 'Typographic descent'\n      - id: line_gap\n        type: s2\n        doc: 'Typographic line gap. Negative LineGap values are treated as zero in Windows 3.1, System 6, and System 7.'\n      - id: advance_width_max\n        type: u2\n        doc: 'Maximum advance width value in `hmtx` table.'\n      - id: min_left_side_bearing\n        type: s2\n        doc: 'Minimum left sidebearing value in `hmtx` table.'\n      - id: min_right_side_bearing\n        type: s2\n        doc: 'Minimum right sidebearing value; calculated as Min(aw - lsb - (xMax - xMin)).'\n      - id: x_max_extend\n        type: s2\n        doc: 'Max(lsb + (xMax - xMin)).'\n      - id: caret_slope_rise\n        type: s2\n      - id: caret_slope_run\n        type: s2\n      - id: reserved\n        contents: [0,0,0,0,0,0,0,0,0,0]\n      - id: metric_data_format\n        type: s2\n      - id: number_of_hmetrics\n        type: u2\n  os2:\n    doc: 'The OS/2 table consists of a set of metrics that are required by Windows and OS/2.'\n    types:\n      panose:\n        enums:\n          family_kind:\n            0: any\n            1: no_fit\n            2: text_and_display\n            3: script\n            4: decorative\n            5: pictorial\n          serif_style:\n            0: any\n            1: no_fit\n            2: cove\n            3: obtuse_cove\n            4: square_cove\n            5: obtuse_square_cove\n            6: square\n            7: thin\n            8: bone\n            9: exaggerated\n            10: triangle\n            11: normal_sans\n            12: obtuse_sans\n            13: perp_sans\n            14: flared\n            15: rounded\n          weight:\n            0: any\n            1: no_fit\n            2: very_light\n            3: light\n            4: thin\n            5: book\n            6: medium\n            7: demi\n            8: bold\n            9: heavy\n            10: black\n            11: nord\n          proportion:\n            0: any\n            1: no_fit\n            2: old_style\n            3: modern\n            4: even_width\n            5: expanded\n            6: condensed\n            7: very_expanded\n            8: very_condensed\n            9: monospaced\n          contrast:\n            0: any\n            1: no_fit\n            2: none\n            3: very_low\n            4: low\n            5: medium_low\n            6: medium\n            7: medium_high\n            8: high\n            9: very_high\n          stroke_variation:\n            0: any\n            1: no_fit\n            2: gradual_diagonal\n            3: gradual_transitional\n            4: gradual_vertical\n            5: gradual_horizontal\n            6: rapid_vertical\n            7: rapid_horizontal\n            8: instant_vertical\n          arm_style:\n            0: any\n            1: no_fit\n            2: straight_arms_horizontal\n            3: straight_arms_wedge\n            4: straight_arms_vertical\n            5: straight_arms_single_serif\n            6: straight_arms_double_serif\n            7: non_straight_arms_horizontal\n            8: non_straight_arms_wedge\n            9: non_straight_arms_vertical\n            10: non_straight_arms_single_serif\n            11: non_straight_arms_double_serif\n          letter_form:\n            0: any\n            1: no_fit\n            2: normal_contact\n            3: normal_weighted\n            4: normal_boxed\n            5: normal_flattened\n            6: normal_rounded\n            7: normal_off_center\n            8: normal_square\n            9: oblique_contact\n            10: oblique_weighted\n            11: oblique_boxed\n            12: oblique_flattened\n            13: oblique_rounded\n            14: oblique_off_center\n            15: oblique_square\n          midline:\n            0: any\n            1: no_fit\n            2: standard_trimmed\n            3: standard_pointed\n            4: standard_serifed\n            5: high_trimmed\n            6: high_pointed\n            7: high_serifed\n            8: constant_trimmed\n            9: constant_pointed\n            10: constant_serifed\n            11: low_trimmed\n            12: low_pointed\n            13: low_serifed\n          x_height:\n            0: any\n            1: no_fit\n            2: constant_small\n            3: constant_standard\n            4: constant_large\n            5: ducking_small\n            6: ducking_standard\n            7: ducking_large\n        seq:\n          - id: family_type\n            type: u1\n            enum: family_kind\n          - id: serif_style\n            type: u1\n            enum: serif_style\n          - id: weight\n            type: u1\n            enum: weight\n          - id: proportion\n            type: u1\n            enum: proportion\n          - id: contrast\n            type: u1\n            enum: contrast\n          - id: stroke_variation\n            type: u1\n            enum: stroke_variation\n          - id: arm_style\n            type: u1\n            enum: arm_style\n          - id: letter_form\n            type: u1\n            enum: letter_form\n          - id: midline\n            type: u1\n            enum: midline\n          - id: x_height\n            type: u1\n            enum: x_height\n      unicode_range:\n        seq:\n          - { id: basic_latin, type: b1 }\n          - { id: latin_1_supplement, type: b1 }\n          - { id: latin_extended_a, type: b1 }\n          - { id: latin_extended_b, type: b1 }\n          - { id: ipa_extensions, type: b1 }\n          - { id: spacing_modifier_letters, type: b1 }\n          - { id: combining_diacritical_marks, type: b1 }\n          - { id: basic_greek, type: b1 }\n          - { id: greek_symbols_and_coptic, type: b1 }\n          - { id: cyrillic, type: b1 }\n          - { id: armenian, type: b1 }\n          - { id: basic_hebrew, type: b1 }\n          - { id: hebrew_extended, type: b1 }\n          - { id: basic_arabic, type: b1 }\n          - { id: arabic_extended, type: b1 }\n          - { id: devanagari, type: b1 }\n          - { id: bengali, type: b1 }\n          - { id: gurmukhi, type: b1 }\n          - { id: gujarati, type: b1 }\n          - { id: oriya, type: b1 }\n          - { id: tamil, type: b1 }\n          - { id: telugu, type: b1 }\n          - { id: kannada, type: b1 }\n          - { id: malayalam, type: b1 }\n          - { id: thai, type: b1 }\n          - { id: lao, type: b1 }\n          - { id: basic_georgian, type: b1 }\n          - { id: georgian_extended, type: b1 }\n          - { id: hangul_jamo, type: b1 }\n          - { id: latin_extended_additional, type: b1 }\n          - { id: greek_extended, type: b1 }\n          - { id: general_punctuation, type: b1 }\n          - { id: superscripts_and_subscripts, type: b1 }\n          - { id: currency_symbols, type: b1 }\n          - { id: combining_diacritical_marks_for_symbols, type: b1 }\n          - { id: letterlike_symbols, type: b1 }\n          - { id: number_forms, type: b1 }\n          - { id: arrows, type: b1 }\n          - { id: mathematical_operators, type: b1 }\n          - { id: miscellaneous_technical, type: b1 }\n          - { id: control_pictures, type: b1 }\n          - { id: optical_character_recognition, type: b1 }\n          - { id: enclosed_alphanumerics, type: b1 }\n          - { id: box_drawing, type: b1 }\n          - { id: block_elements, type: b1 }\n          - { id: geometric_shapes, type: b1 }\n          - { id: miscellaneous_symbols, type: b1 }\n          - { id: dingbats, type: b1 }\n          - { id: cjk_symbols_and_punctuation, type: b1 }\n          - { id: hiragana, type: b1 }\n          - { id: katakana, type: b1 }\n          - { id: bopomofo, type: b1 }\n          - { id: hangul_compatibility_jamo, type: b1 }\n          - { id: cjk_miscellaneous, type: b1 }\n          - { id: enclosed_cjk_letters_and_months, type: b1 }\n          - { id: cjk_compatibility, type: b1 }\n          - { id: hangul, type: b1 }\n          - { id: reserved_for_unicode_subranges1, type: b1 }\n          - { id: reserved_for_unicode_subranges2, type: b1 }\n          - { id: cjk_unified_ideographs, type: b1 }\n          - { id: private_use_area, type: b1 }\n          - { id: cjk_compatibility_ideographs, type: b1 }\n          - { id: alphabetic_presentation_forms, type: b1 }\n          - { id: arabic_presentation_forms_a, type: b1 }\n          - { id: combining_half_marks, type: b1 }\n          - { id: cjk_compatibility_forms, type: b1 }\n          - { id: small_form_variants, type: b1 }\n          - { id: arabic_presentation_forms_b, type: b1 }\n          - { id: halfwidth_and_fullwidth_forms, type: b1 }\n          - { id: specials, type: b1 }\n          - { id: reserved, size: 7 }\n      # TODO: is this correct?\n      code_page_range:\n        seq:\n          - { id: symbol_character_set, type: b1 }\n          - { id: oem_character_set, type: b1 }\n          - { id: macintosh_character_set, type: b1 }\n          - { id: reserved_for_alternate_ansi_oem, type: b7 }\n          - { id: cp1361_korean_johab, type: b1 }\n          - { id: cp950_chinese_traditional_chars_taiwan_and_hong_kong, type: b1 }\n          - { id: cp949_korean_wansung, type: b1 }\n          - { id: cp936_chinese_simplified_chars_prc_and_singapore, type: b1 }\n          - { id: cp932_jis_japan, type: b1 }\n          - { id: cp874_thai, type: b1 }\n          - { id: reserved_for_alternate_ansi, type: b8 }\n          - { id: cp1257_windows_baltic, type: b1 }\n          - { id: cp1256_arabic, type: b1 }\n          - { id: cp1255_hebrew, type: b1 }\n          - { id: cp1254_turkish, type: b1 }\n          - { id: cp1253_greek, type: b1 }\n          - { id: cp1251_cyrillic, type: b1 }\n          - { id: cp1250_latin_2_eastern_europe, type: b1 }\n          - { id: cp1252_latin_1, type: b1 }\n          - { id: cp437_us, type: b1 }\n          - { id: cp850_we_latin_1, type: b1 }\n          - { id: cp708_arabic_asmo_708, type: b1 }\n          - { id: cp737_greek_former_437_g, type: b1 }\n          - { id: cp775_ms_dos_baltic, type: b1 }\n          - { id: cp852_latin_2, type: b1 }\n          - { id: cp855_ibm_cyrillic_primarily_russian, type: b1 }\n          - { id: cp857_ibm_turkish, type: b1 }\n          - { id: cp860_ms_dos_portuguese, type: b1 }\n          - { id: cp861_ms_dos_icelandic, type: b1 }\n          - { id: cp862_hebrew, type: b1 }\n          - { id: cp863_ms_dos_canadian_french, type: b1 }\n          - { id: cp864_arabic, type: b1 }\n          - { id: cp865_ms_dos_nordic, type: b1 }\n          - { id: cp866_ms_dos_russian, type: b1 }\n          - { id: cp869_ibm_greek, type: b1 }\n          - { id: reserved_for_oem, type: b16 }\n    enums:\n      weight_class:\n        100: thin\n        200: extra_light\n        300: light\n        400: normal\n        500: medium\n        600: semi_bold\n        700: bold\n        800: extra_bold\n        900: black\n      width_class:\n        1: ultra_condensed\n        2: extra_condensed\n        3: condensed\n        4: semi_condensed\n        5: normal\n        6: semi_expanded\n        7: expanded\n        8: extra_expanded\n        9: ultra_expanded\n      fs_type:\n        # Restricted License embedding: When only this bit is set, this font may\n        # not be embedded, copied or modified.\n        2: restricted_license_embedding\n        # Preview & Print embedding: When this bit is set, the font may be embedded,\n        # and temporarily loaded on the remote system. Documents containing Preview\n        # & Print fonts must be opened \"read-only;\" no edits can be applied to the document.\n        4: preview_and_print_embedding\n        # Editable embedding: When this bit is set, the font may be embedded and\n        # temporarily loaded on other systems. Documents containing Editable fonts\n        # may be opened for reading and writing.\n        8: editable_embedding\n      fs_selection:\n        0x01: italic\n        0x02: underscore\n        0x04: negative\n        0x08: outlined\n        0x10: strikeout\n        0x20: bold\n        0x40: regular\n    seq:\n      - id: version\n        type: u2\n        doc: 'The version number for this OS/2 table.'\n      - id: x_avg_char_width\n        type: s2\n        doc: >\n          The Average Character Width parameter specifies the arithmetic average of the escapement (width)\n          of all of the 26 lowercase letters a through z of the Latin alphabet and the space character.\n          If any of the 26 lowercase letters are not present, this parameter should equal the weighted average\n          of all glyphs in the font. For non-UGL (platform 3, encoding 0) fonts, use the unweighted average.\n      - id: weight_class\n        type: u2\n        enum: weight_class\n        doc: >\n          Indicates the visual weight (degree of blackness or thickness of strokes)\n          of the characters in the font.\n      - id: width_class\n        type: u2\n        enum: width_class\n        doc: >\n          Indicates a relative change from the normal aspect ratio (width to height ratio)\n          as specified by a font designer for the glyphs in a font.\n      - id: fs_type\n        type: s2\n        enum: fs_type\n        doc: >\n          Indicates font embedding licensing rights for the font.\n          Embeddable fonts may be stored in a document.\n          When a document with embedded fonts is opened on a system that does\n          not have the font installed (the remote system), the embedded font\n          may be loaded for temporary (and in some cases, permanent) use on that\n          system by an embedding-aware application. Embedding licensing rights are\n          granted by the vendor of the font.\n      - id: y_subscript_x_size\n        type: s2\n        doc: 'The recommended horizontal size in font design units for subscripts for this font.'\n      - id: y_subscript_y_size\n        type: s2\n        doc: 'The recommended vertical size in font design units for subscripts for this font.'\n      - id: y_subscript_x_offset\n        type: s2\n        doc: 'The recommended horizontal offset in font design untis for subscripts for this font.'\n      - id: y_subscript_y_offset\n        type: s2\n        doc: 'The recommended vertical offset in font design units from the baseline for subscripts for this font.'\n      - id: y_superscript_x_size\n        type: s2\n        doc: 'The recommended horizontal size in font design units for superscripts for this font.'\n      - id: y_superscript_y_size\n        type: s2\n        doc: 'The recommended vertical size in font design units for superscripts for this font.'\n      - id: y_superscript_x_offset\n        type: s2\n        doc: 'The recommended horizontal offset in font design units for superscripts for this font.'\n      - id: y_superscript_y_offset\n        type: s2\n        doc: 'The recommended vertical offset in font design units from the baseline for superscripts for this font.'\n      - id: y_strikeout_size\n        type: s2\n        doc: 'Width of the strikeout stroke in font design units.'\n      - id: y_strikeout_position\n        type: s2\n        doc: 'The position of the strikeout stroke relative to the baseline in font design units.'\n      - id: s_family_class\n        type: s2\n        doc: 'This parameter is a classification of font-family design.'\n      - id: panose\n        type: panose\n      - id: unicode_range\n        type: unicode_range\n      - id: ach_vend_id\n        type: str\n        size: 4\n        encoding: ascii\n        doc: 'The four character identifier for the vendor of the given type face.'\n      - id: selection\n        type: u2\n        enum: fs_selection\n        doc: 'Contains information concerning the nature of the font patterns'\n      - id: first_char_index\n        type: u2\n        doc: 'The minimum Unicode index (character code) in this font, according to the cmap subtable for platform ID 3 and encoding ID 0 or 1.'\n      - id: last_char_index\n        type: u2\n        doc: 'The maximum Unicode index (character code) in this font, according to the cmap subtable for platform ID 3 and encoding ID 0 or 1.'\n      - id: typo_ascender\n        type: s2\n        doc: 'The typographic ascender for this font.'\n      - id: typo_descender\n        type: s2\n        doc: 'The typographic descender for this font.'\n      - id: typo_line_gap\n        type: s2\n        doc: 'The typographic line gap for this font.'\n      - id: win_ascent\n        type: u2\n        doc: 'The ascender metric for Windows.'\n      - id: win_descent\n        type: u2\n        doc: 'The descender metric for Windows.'\n      - id: code_page_range\n        type: code_page_range\n        doc: 'This field is used to specify the code pages encompassed by the font file in the `cmap` subtable for platform 3, encoding ID 1 (Microsoft platform).'\n  prep:\n    seq:\n      - id: instructions\n        size-eos: true\n  fpgm:\n    seq:\n      - id: instructions\n        size-eos: true\n  kern:\n    types:\n      subtable:\n        types:\n          format0:\n            types:\n              kerning_pair:\n                -webide-representation: '{left:dec}+{right:dec}: {value:dec}'\n                seq:\n                  - id: left\n                    type: u2\n                  - id: right\n                    type: u2\n                  - id: value\n                    type: s2\n            seq:\n              - id: pair_count\n                type: u2\n              - id: search_range\n                type: u2\n              - id: entry_selector\n                type: u2\n              - id: range_shift\n                type: u2\n              - id: kerning_pairs\n                type: kerning_pair\n                repeat: expr\n                repeat-expr: pair_count\n        seq:\n          - id: version\n            type: u2\n          - id: length\n            type: u2\n          - id: format\n            type: u1\n          - id: reserved\n            type: b4\n          - id: is_override\n            type: b1\n          - id: is_cross_stream\n            type: b1\n          - id: is_minimum\n            type: b1\n          - id: is_horizontal\n            type: b1\n          - id: format0\n            type: format0\n            if: format == 0\n    seq:\n      - id: version\n        type: u2\n      - id: subtable_count\n        type: u2\n      - id: subtables\n        type: subtable\n        repeat: expr\n        repeat-expr: subtable_count\n  maxp:\n    seq:\n      - id: table_version_number\n        type: fixed\n        doc: '0x00010000 for version 1.0.'\n      - id: num_glyphs\n        type: u2\n        doc: 'The number of glyphs in the font.'\n      - id: version10_body\n        type: maxp_version10_body\n        if: is_version10\n    instances:\n      is_version10:\n        value: table_version_number.major == 1 and table_version_number.minor == 0\n  maxp_version10_body:\n    seq:\n      - id: max_points\n        type: u2\n        doc: 'Maximum points in a non-composite glyph.'\n      - id: max_contours\n        type: u2\n        doc: 'Maximum contours in a non-composite glyph.'\n      - id: max_composite_points\n        type: u2\n        doc: 'Maximum points in a composite glyph.'\n      - id: max_composite_contours\n        type: u2\n        doc: 'Maximum contours in a composite glyph.'\n      - id: max_zones\n        type: u2\n        doc: '1 if instructions do not use the twilight zone (Z0), or 2 if instructions do use Z0; should be set to 2 in most cases.'\n      - id: max_twilight_points\n        type: u2\n        doc: 'Maximum points used in Z0.'\n      - id: max_storage\n        type: u2\n        doc: 'Number of Storage Area locations.'\n      - id: max_function_defs\n        type: u2\n        doc: 'Number of FDEFs.'\n      - id: max_instruction_defs\n        type: u2\n        doc: 'Number of IDEFs.'\n      - id: max_stack_elements\n        type: u2\n        doc: 'Maximum stack depth.'\n      - id: max_size_of_instructions\n        type: u2\n        doc: 'Maximum byte count for glyph instructions.'\n      - id: max_component_elements\n        type: u2\n        doc: 'Maximum number of components referenced at \"top level\" for any composite glyph.'\n      - id: max_component_depth\n        type: u2\n        doc: 'Maximum levels of recursion; 1 for simple components.'\n  post:\n    types:\n      format20:\n        types:\n          pascal_string:\n            -webide-representation: \"{value}\"\n            seq:\n              - id: length\n                type: u1\n              - id: value\n                type: str\n                size: length\n                encoding: ascii\n                if: length != 0\n        seq:\n          - id: number_of_glyphs\n            type: u2\n          - id: glyph_name_index\n            type: u2\n            repeat: expr\n            repeat-expr: number_of_glyphs\n          - id: glyph_names\n            type: pascal_string\n            repeat: until\n            repeat-until: _.length == 0 or _io.eof\n    seq:\n      - id: format\n        type: fixed\n      - id: italic_angle\n        type: fixed\n      - id: underline_position\n        type: s2\n      - id: underline_thichness\n        type: s2\n      - id: is_fixed_pitch\n        type: u4\n      - id: min_mem_type42\n        type: u4\n      - id: max_mem_type42\n        type: u4\n      - id: min_mem_type1\n        type: u4\n      - id: max_mem_type1\n        type: u4\n      - id: format20\n        type: format20\n        if: format.major == 2 and format.minor == 0\n  name:\n    doc: |\n      Name table is meant to include human-readable string metadata\n      that describes font: name of the font, its styles, copyright &\n      trademark notices, vendor and designer info, etc.\n\n      The table includes a list of \"name records\", each of which\n      corresponds to a single metadata entry.\n    doc-ref: https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6name.html\n    types:\n      name_record:\n        -webide-representation: \"{ascii_value}\"\n        seq:\n          - id: platform_id\n            -orig-id: platformID\n            type: u2\n            enum: platforms\n          - id: encoding_id\n            -orig-id: platformSpecificID\n            type: u2\n          - id: language_id\n            -orig-id: languageID\n            type: u2\n          - id: name_id\n            -orig-id: nameID\n            type: u2\n            enum: names\n          - id: len_str\n            -orig-id: length\n            type: u2\n          - id: ofs_str\n            -orig-id: offset\n            type: u2\n        instances:\n          ascii_value:\n            type: str\n            size: len_str\n            encoding: ascii\n            io: _parent._io\n            pos: _parent.ofs_strings + ofs_str\n            #if: encoding_id == 0\n            -webide-parse-mode: eager\n          unicode_value:\n            type: str\n            size: len_str\n            encoding: utf-16be\n            io: _parent._io\n            pos: _parent.ofs_strings + ofs_str\n            #if: encoding_id == 1\n            -webide-parse-mode: eager\n    seq:\n      - id: format_selector\n        -orig-id: format\n        type: u2\n      - id: num_name_records\n        -orig-id: count\n        type: u2\n      - id: ofs_strings\n        -orig-id: stringOffset\n        type: u2\n      - id: name_records\n        -orig-id: nameRecord\n        type: name_record\n        repeat: expr\n        repeat-expr: num_name_records\n    enums:\n      platforms:\n        0: unicode\n        1: macintosh\n        2: reserved_2\n        3: microsoft\n      names:\n        0: copyright\n        1: font_family\n        2: font_subfamily\n        3: unique_subfamily_id\n        4: full_font_name\n        5: name_table_version\n        6: postscript_font_name\n        7: trademark\n        8: manufacturer\n        9: designer\n        10: description\n        11: url_vendor\n        12: url_designer\n        13: license\n        14: url_license\n        15: reserved_15\n        16: preferred_family\n        17: preferred_subfamily\n        18: compatible_full_name\n        19: sample_text\n"
  }
];

export default {
  category: "Fonts",
  formats: fontsFormats
};
