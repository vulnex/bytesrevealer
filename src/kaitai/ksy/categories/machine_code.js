/**
 * Kaitai Formats - Machine Code
 * 1 formats
 * Auto-generated: 2025-09-21T19:51:05.641Z
 */

export const machine_codeFormats = [
  {
    "id": "ksy_code_6502",
    "name": "Code 6502",
    "category": "Machine Code",
    "metadata": {
      "isGenerated": true,
      "fileExtensions": [],
      "description": "",
      "originalCategory": "machine_code",
      "filePath": "machine_code/code_6502.ksy",
      "endian": "le"
    },
    "content": "meta:\n  id: code_6502\n  xref:\n    wikidata: Q19368646\n  license: CC0-1.0\n  endian: le\ndoc: |\n  This spec can be used to disassemble raw stream of 6502 CPU machine\n  code into individual operations. Each operation includes an opcode\n  and, optionally, an argument. Register arguments are part of the\n  `opcode` enum.\nseq:\n  - id: operations\n    type: operation\n    repeat: eos\ntypes:\n  operation:\n    seq:\n      - id: code\n        type: u1\n        enum: opcode\n      - id: args\n        type:\n          switch-on: code\n          cases:\n            'opcode::ora_x_ind': u1\n            'opcode::ora_zpg': u1\n            'opcode::asl_zpg': u1\n            'opcode::ora_imm': u1\n            'opcode::ora_abs': u2\n            'opcode::asl_abs': u2\n            'opcode::bpl_rel': s1\n            'opcode::ora_ind_y': u1\n            'opcode::ora_zpg_x': u1\n            'opcode::asl_zpg_x': u1\n            'opcode::ora_abs_y': u2\n            'opcode::ora_abs_x': u2\n            'opcode::asl_abs_x': u2\n            'opcode::jsr_abs': u2\n            'opcode::and_x_ind': u1\n            'opcode::bit_zpg': u1\n            'opcode::and_zpg': u1\n            'opcode::rol_zpg': u1\n            'opcode::and_imm': u1\n            'opcode::bit_abs': u2\n            'opcode::and_abs': u2\n            'opcode::rol_abs': u2\n            'opcode::bmi_rel': s1\n            'opcode::and_ind_y': u1\n            'opcode::and_zpg_x': u1\n            'opcode::rol_zpg_x': u1\n            'opcode::and_abs_y': u2\n            'opcode::and_abs_x': u2\n            'opcode::rol_abs_x': u2\n            'opcode::eor_x_ind': u1\n            'opcode::eor_zpg': u1\n            'opcode::lsr_zpg': u1\n            'opcode::eor_imm': u1\n            'opcode::jmp_abs': u2\n            'opcode::eor_abs': u2\n            'opcode::lsr_abs': u2\n            'opcode::bvc_rel': s1\n            'opcode::eor_ind_y': u1\n            'opcode::eor_zpg_x': u1\n            'opcode::lsr_zpg_x': u1\n            'opcode::eor_abs_y': u2\n            'opcode::eor_abs_x': u2\n            'opcode::lsr_abs_x': u2\n            'opcode::adc_x_ind': u1\n            'opcode::adc_zpg': u1\n            'opcode::ror_zpg': u1\n            'opcode::adc_imm': u1\n            'opcode::jmp_ind': u2\n            'opcode::adc_abs': u2\n            'opcode::ror_abs': u2\n            'opcode::bvs_rel': s1\n            'opcode::adc_ind_y': u1\n            'opcode::adc_zpg_x': u1\n            'opcode::ror_zpg_x': u1\n            'opcode::adc_abs_y': u2\n            'opcode::adc_abs_x': u2\n            'opcode::ror_abs_x': u2\n            'opcode::sta_x_ind': u1\n            'opcode::sty_zpg': u1\n            'opcode::sta_zpg': u1\n            'opcode::stx_zpg': u1\n            'opcode::sty_abs': u2\n            'opcode::sta_abs': u2\n            'opcode::stx_abs': u2\n            'opcode::bcc_rel': s1\n            'opcode::sta_ind_y': u1\n            'opcode::sty_zpg_x': u1\n            'opcode::sta_zpg_x': u1\n            'opcode::stx_zpg_y': u1\n            'opcode::sta_abs_y': u2\n            'opcode::sta_abs_x': u2\n            'opcode::ldy_imm': u1\n            'opcode::lda_x_ind': u1\n            'opcode::ldx_imm': u1\n            'opcode::ldy_zpg': u1\n            'opcode::lda_zpg': u1\n            'opcode::ldx_zpg': u1\n            'opcode::lda_imm': u1\n            'opcode::ldy_abs': u2\n            'opcode::lda_abs': u2\n            'opcode::ldx_abs': u2\n            'opcode::bcs_rel': s1\n            'opcode::lda_ind_y': u1\n            'opcode::ldy_zpg_x': u1\n            'opcode::lda_zpg_x': u1\n            'opcode::ldx_zpg_y': u1\n            'opcode::lda_abs_y': u2\n            'opcode::ldy_abs_x': u2\n            'opcode::lda_abs_x': u2\n            'opcode::ldx_abs_y': u2\n            'opcode::cpy_imm': u1\n            'opcode::cmp_x_ind': u1\n            'opcode::cpy_zpg': u1\n            'opcode::cmp_zpg': u1\n            'opcode::dec_zpg': u1\n            'opcode::cmp_imm': u1\n            'opcode::cpy_abs': u2\n            'opcode::cmp_abs': u2\n            'opcode::dec_abs': u2\n            'opcode::bne_rel': s1\n            'opcode::cmp_ind_y': u1\n            'opcode::cmp_zpg_x': u1\n            'opcode::dec_zpg_x': u1\n            'opcode::cmp_abs_y': u2\n            'opcode::cmp_abs_x': u2\n            'opcode::dec_abs_x': u2\n            'opcode::cpx_imm': u1\n            'opcode::sbc_x_ind': u1\n            'opcode::cpx_zpg': u1\n            'opcode::sbc_zpg': u1\n            'opcode::inc_zpg': u1\n            'opcode::sbc_imm': u1\n            'opcode::cpx_abs': u2\n            'opcode::sbc_abs': u2\n            'opcode::inc_abs': u2\n            'opcode::beq_rel': s1\n            'opcode::sbc_ind_y': u1\n            'opcode::sbc_zpg_x': u1\n            'opcode::inc_zpg_x': u1\n            'opcode::sbc_abs_y': u2\n            'opcode::sbc_abs_x': u2\n            'opcode::inc_abs_x': u2\nenums:\n  opcode:\n    0x00: brk_impl\n    0x01: ora_x_ind\n    0x05: ora_zpg\n    0x06: asl_zpg\n    0x08: php_impl\n    0x09: ora_imm\n    0x0a: asl_a\n    0x0d: ora_abs\n    0x0e: asl_abs\n    0x10: bpl_rel\n    0x11: ora_ind_y\n    0x15: ora_zpg_x\n    0x16: asl_zpg_x\n    0x18: clc_impl\n    0x19: ora_abs_y\n    0x1d: ora_abs_x\n    0x1e: asl_abs_x\n    0x20: jsr_abs\n    0x21: and_x_ind\n    0x24: bit_zpg\n    0x25: and_zpg\n    0x26: rol_zpg\n    0x28: plp_impl\n    0x29: and_imm\n    0x2a: rol_a\n    0x2c: bit_abs\n    0x2d: and_abs\n    0x2e: rol_abs\n    0x30: bmi_rel\n    0x31: and_ind_y\n    0x35: and_zpg_x\n    0x36: rol_zpg_x\n    0x38: sec_impl\n    0x39: and_abs_y\n    0x3d: and_abs_x\n    0x3e: rol_abs_x\n    0x40: rti_impl\n    0x41: eor_x_ind\n    0x45: eor_zpg\n    0x46: lsr_zpg\n    0x48: pha_impl\n    0x49: eor_imm\n    0x4a: lsr_a\n    0x4c: jmp_abs\n    0x4d: eor_abs\n    0x4e: lsr_abs\n    0x50: bvc_rel\n    0x51: eor_ind_y\n    0x55: eor_zpg_x\n    0x56: lsr_zpg_x\n    0x58: cli_impl\n    0x59: eor_abs_y\n    0x5d: eor_abs_x\n    0x5e: lsr_abs_x\n    0x60: rts_impl\n    0x61: adc_x_ind\n    0x65: adc_zpg\n    0x66: ror_zpg\n    0x68: pla_impl\n    0x69: adc_imm\n    0x6a: ror_a\n    0x6c: jmp_ind\n    0x6d: adc_abs\n    0x6e: ror_abs\n    0x70: bvs_rel\n    0x71: adc_ind_y\n    0x75: adc_zpg_x\n    0x76: ror_zpg_x\n    0x78: sei_impl\n    0x79: adc_abs_y\n    0x7d: adc_abs_x\n    0x7e: ror_abs_x\n    0x81: sta_x_ind\n    0x84: sty_zpg\n    0x85: sta_zpg\n    0x86: stx_zpg\n    0x88: dey_impl\n    0x8a: txa_impl\n    0x8c: sty_abs\n    0x8d: sta_abs\n    0x8e: stx_abs\n    0x90: bcc_rel\n    0x91: sta_ind_y\n    0x94: sty_zpg_x\n    0x95: sta_zpg_x\n    0x96: stx_zpg_y\n    0x98: tya_impl\n    0x99: sta_abs_y\n    0x9a: txs_impl\n    0x9d: sta_abs_x\n    0xa0: ldy_imm\n    0xa1: lda_x_ind\n    0xa2: ldx_imm\n    0xa4: ldy_zpg\n    0xa5: lda_zpg\n    0xa6: ldx_zpg\n    0xa8: tay_impl\n    0xa9: lda_imm\n    0xaa: tax_impl\n    0xac: ldy_abs\n    0xad: lda_abs\n    0xae: ldx_abs\n    0xb0: bcs_rel\n    0xb1: lda_ind_y\n    0xb4: ldy_zpg_x\n    0xb5: lda_zpg_x\n    0xb6: ldx_zpg_y\n    0xb8: clv_impl\n    0xb9: lda_abs_y\n    0xba: tsx_impl\n    0xbc: ldy_abs_x\n    0xbd: lda_abs_x\n    0xbe: ldx_abs_y\n    0xc0: cpy_imm\n    0xc1: cmp_x_ind\n    0xc4: cpy_zpg\n    0xc5: cmp_zpg\n    0xc6: dec_zpg\n    0xc8: iny_impl\n    0xc9: cmp_imm\n    0xca: dex_impl\n    0xcc: cpy_abs\n    0xcd: cmp_abs\n    0xce: dec_abs\n    0xd0: bne_rel\n    0xd1: cmp_ind_y\n    0xd5: cmp_zpg_x\n    0xd6: dec_zpg_x\n    0xd8: cld_impl\n    0xd9: cmp_abs_y\n    0xdd: cmp_abs_x\n    0xde: dec_abs_x\n    0xe0: cpx_imm\n    0xe1: sbc_x_ind\n    0xe4: cpx_zpg\n    0xe5: sbc_zpg\n    0xe6: inc_zpg\n    0xe8: inx_impl\n    0xe9: sbc_imm\n    0xea: nop_impl\n    0xec: cpx_abs\n    0xed: sbc_abs\n    0xee: inc_abs\n    0xf0: beq_rel\n    0xf1: sbc_ind_y\n    0xf5: sbc_zpg_x\n    0xf6: inc_zpg_x\n    0xf8: sed_impl\n    0xf9: sbc_abs_y\n    0xfd: sbc_abs_x\n    0xfe: inc_abs_x\n"
  }
];

export default {
  category: "Machine Code",
  formats: machine_codeFormats
};
