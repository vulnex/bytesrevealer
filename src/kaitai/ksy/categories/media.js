/**
 * Kaitai Formats - Media
 * 18 formats
 * Auto-generated: 2025-09-21T19:51:05.641Z
 */

export const mediaFormats = [
  {
    "id": "ksy_android_opengl_shaders_cache",
    "name": "com.android.opengl.shaders_cache file",
    "category": "Media",
    "metadata": {
      "isGenerated": true,
      "fileExtensions": [],
      "description": "com.android.opengl.shaders_cache file",
      "originalCategory": "media",
      "filePath": "media/android_opengl_shaders_cache.ksy",
      "signature": {
        "offset": 0,
        "bytes": [
          69,
          71,
          76,
          36
        ]
      },
      "endian": "le"
    },
    "content": "meta:\n  id: android_opengl_shaders_cache\n  title: com.android.opengl.shaders_cache file\n  application: Android\n  tags:\n    - android\n    - media\n  license: Apache-2.0\n  endian: le\n\ndoc: |\n  Android apps using directly or indirectly OpenGL cache compiled shaders\n  into com.android.opengl.shaders_cache file.\ndoc-ref: https://android.googlesource.com/platform/frameworks/native/+/master/opengl/libs/EGL/FileBlobCache.cpp\n\nseq:\n  - id: magic\n    contents: \"EGL$\"\n  - id: crc32\n    type: u4\n    doc: crc32 of `contents`\n  - id: contents\n    type: cache\n    size-eos: true\n\ntypes:\n  alignment:\n    seq:\n      - id: alignment\n        size: \"(_io.pos + 3) & ~3 - _io.pos\"\n        doc: garbage from memory\n  prefixed_string:\n    seq:\n      - id: len_str\n        type: u4\n        -orig-id: mBuildIdLength\n      - id: str\n        type: strz\n        encoding: ascii\n        size: len_str\n        -orig-id: mBuildId, buildId\n      - id: alignment\n        type: alignment\n  cache:\n    doc-ref: https://android.googlesource.com/platform/frameworks/native/+/master/opengl/libs/EGL/BlobCache.cpp\n    seq:\n      - id: magic\n        -orig-id: mMagicNumber, blobCacheMagic\n        contents: [\"$bB_\"]\n      - id: version\n        type: u4\n        -orig-id: mBlobCacheVersion, blobCacheVersion\n      - id: device_version\n        type: u4\n        -orig-id: mDeviceVersion, blobCacheDeviceVersion\n      - id: num_entries\n        type: u4\n        -orig-id: mNumEntries\n      - id: build_id\n        type: prefixed_string\n        -orig-id: mBuildIdLength, mBuildId, buildId\n        if: version >= 3 # hypothesis, needs deeper investigation\n      - id: entries\n        type: entry\n        repeat: expr\n        repeat-expr: num_entries\n    types:\n      entry:\n        seq:\n          - id: len_key\n            type: u4\n            -orig-id: mKeySize, keySize\n          - id: len_value\n            type: u4\n            -orig-id: mValueSize, valueSize\n          - id: key\n            size: len_key\n          - id: value\n            size: len_value\n          - id: alignment\n            type: alignment\n"
  },
  {
    "id": "ksy_au",
    "name": "AU audio format",
    "category": "Media",
    "metadata": {
      "isGenerated": true,
      "fileExtensions": [
        "au",
        "snd"
      ],
      "description": "AU audio format",
      "originalCategory": "media",
      "filePath": "media/au.ksy",
      "signature": {
        "offset": 0,
        "bytes": [
          46,
          115,
          110,
          100
        ]
      },
      "endian": "be"
    },
    "content": "meta:\n  id: au\n  title: AU audio format\n  file-extension:\n    - au # Sun\n    - snd # NeXT\n  xref:\n    justsolve: AU\n    mime:\n      - audio/basic\n      # According to <https://github.com/file/file/blob/905ca555b0/magic/Magdir/audio#L10-L45>\n      # and <https://ftp.gnu.org/gnu/ccaudio/ccaudio2-2.2.0.tar.gz> 'ccaudio2-2.2.0/src/friends.cpp:304-311':\n      - audio/x-adpcm # only for G.721 ADPCM (encodings::adpcm_g721)\n    pronom: x-fmt/139\n    wikidata: Q672985\n  license: CC0-1.0\n  ks-version: 0.9\n  endian: be\ndoc: |\n  The NeXT/Sun audio file format.\n\n  Sample files:\n\n  * <https://github.com/python/cpython/tree/b8a7daf077da/Lib/test/sndhdrdata>\n  * <ftp://ftp-ccrma.stanford.edu/pub/Lisp/sf.tar.gz>\n  * <https://www.mmsp.ece.mcgill.ca/Documents/AudioFormats/AU/Samples.html>\n\ndoc-ref:\n  # - https://en.wikipedia.org/wiki/Au_file_format # incorrect encoding enum, don't use\n  - https://www.mmsp.ece.mcgill.ca/Documents/AudioFormats/AU/AU.html\n  - http://soundfile.sapp.org/doc/NextFormat/\n\n  # Resources used to assemble the `encodings` enum:\n  - http://soundfile.sapp.org/doc/NextFormat/soundstruct.h\n  - https://github.com/andreiw/polaris/blob/deb47cb/usr/src/head/audio/au.h#L87-L112\n  - https://github.com/libsndfile/libsndfile/blob/86c9f9eb/src/au.c#L39-L74\n  - https://github.com/chirlu/sox/blob/dd8b63bd/src/au.c#L34-L49\n  - https://github.com/mpruett/audiofile/blob/b62c902/libaudiofile/NeXT.cpp#L65-L96\n\nseq:\n  - id: magic\n    contents: \".snd\"\n  - id: ofs_data\n    type: u4\n  - id: header\n    type: header\n    size: ofs_data - magic._sizeof - ofs_data._sizeof\ninstances:\n  len_data:\n    value: 'header.data_size == 0xffff_ffff ? _io.size - ofs_data : header.data_size'\ntypes:\n  header:\n    seq:\n      - id: data_size\n        type: u4\n        doc: |\n          don't read this field, access `_root.len_data` instead\n\n          value `0xffff_ffff` means unspecified size\n      - id: encoding\n        type: u4\n        enum: encodings\n      - id: sample_rate\n        type: u4\n      - id: num_channels\n        type: u4\n        valid:\n          min: 1\n        doc: number of interleaved channels\n      - id: comment\n        size-eos: true\n        type: strz\n        encoding: ASCII\n        doc: |\n          Most resources claim that this field must be at least 4 bytes long.\n          However, most programs don't enforce it, and [Audacity](\n          https://www.audacityteam.org/) even generates .au files with this field\n          being 0-byte long. According to <https://nixdoc.net/man-pages/IRIX/man4/dmedia/next.4.html>,\n          \"NeXT files require that this chunk be at least 4 bytes (chars) long,\n          whereas this chunk may be zerolength in a Sun .au file.\"\n\n          By convention, size should be a multiple of 4 -\n          see <https://github.com/chirlu/sox/blob/dd8b63bd/src/au.c#L132-L133>.\n          Page <http://soundfile.sapp.org/doc/NextFormat/> also mentions that for some\n          sound playing programs, this field must have an even byte size. So a multiple\n          of 4 is probably best for compatibility.\n\n          Must be null-terminated. It is usually an ASCII text string, but this space\n          might be also used to store application-specific binary (i.e. non-ASCII) data.\nenums:\n  encodings:\n    1:\n      id: mulaw_8\n      doc: 8-bit G.711 mu-law\n    2:\n      id: linear_8\n      doc: 8-bit signed linear PCM\n    3:\n      id: linear_16\n      doc: 16-bit signed linear PCM\n    4:\n      id: linear_24\n      doc: 24-bit signed linear PCM\n    5:\n      id: linear_32\n      doc: 32-bit signed linear PCM\n    6:\n      id: float\n      doc: 32-bit IEEE floating point\n    7:\n      id: double\n      doc: 64-bit IEEE double-precision floating point\n    8:\n      id: fragmented\n      doc: sampled data which has become fragmented due to editing\n    9:\n      id: nested\n      doc: multiple sound structures\n    10:\n      id: dsp_core\n      doc: a loadable DSP core program\n    11: fixed_point_8\n    12: fixed_point_16\n    13: fixed_point_24\n    14: fixed_point_32\n    16:\n      id: display\n      doc: non-audio display data used by the Sound Kit's `SoundView` class, can't be played\n    17:\n      id: mulaw_squelch\n      doc: 8-bit mu-law with run-length encoding of silence\n    18:\n      id: emphasized\n      doc: 16-bit linear with emphasis\n    19:\n      id: compressed\n      doc: 16-bit linear with NeXT compression\n    20:\n      id: compressed_emphasized\n      doc: 16-bit linear with emphasis and NeXT compression\n    21:\n      id: dsp_commands\n      doc: Music Kit DSP commands\n    22:\n      id: dsp_commands_samples\n      doc: Music Kit DSP samples\n    23:\n      id: adpcm_g721\n      doc: 4-bit G.721 ADPCM (32 kb/s)\n    24:\n      id: adpcm_g722\n      doc: G.722 ADPCM\n    25:\n      id: adpcm_g723_3\n      doc: 3-bit G.723 ADPCM (24 kb/s)\n    26:\n      id: adpcm_g723_5\n      doc: 5-bit G.723 ADPCM (40 kb/s)\n    27:\n      id: alaw_8\n      doc: 8-bit G.711 A-law\n    28: aes\n    29: delta_mulaw_8\n"
  },
  {
    "id": "ksy_avi",
    "name": "Microsoft AVI file",
    "category": "Media",
    "metadata": {
      "isGenerated": true,
      "fileExtensions": [
        "avi"
      ],
      "description": "Microsoft AVI file",
      "originalCategory": "media",
      "filePath": "media/avi.ksy",
      "signature": {
        "offset": 0,
        "bytes": [
          82,
          73,
          70,
          70
        ]
      },
      "endian": "le"
    },
    "content": "meta:\n  id: avi\n  title: Microsoft AVI file\n  file-extension: avi\n  xref:\n    justsolve: AVI\n    loc: fdd000059\n    mime: video/x-msvideo\n    pronom: fmt/5\n    wikidata: Q209054\n  tags:\n    - windows\n  license: CC0-1.0\n  ks-version: 0.7\n  endian: le\ndoc-ref: https://learn.microsoft.com/en-us/previous-versions/ms779636(v=vs.85)\nseq:\n  - id: magic1\n    contents: RIFF\n  - id: file_size\n    type: u4\n  - id: magic2\n    contents: 'AVI '\n  - id: data\n    type: blocks\n    size: file_size - 4\ntypes:\n  # either a chunk or list\n  blocks:\n    seq:\n      - id: entries\n        type: block\n        repeat: eos\n  block:\n    seq:\n      - id: four_cc\n        type: u4\n        enum: chunk_type\n      - id: block_size\n        type: u4\n      - id: data\n        size: block_size\n        type:\n          switch-on: four_cc\n          cases:\n            'chunk_type::list': list_body\n            'chunk_type::avih': avih_body\n            'chunk_type::strh': strh_body\n  list_body:\n    seq:\n      - id: list_type\n        type: u4\n        enum: chunk_type\n      - id: data\n        type: blocks\n  avih_body:\n    doc: Main header of an AVI file, defined as AVIMAINHEADER structure\n    doc-ref: https://learn.microsoft.com/en-us/previous-versions/ms779632(v=vs.85)\n    seq:\n      - id: micro_sec_per_frame\n        type: u4\n      - id: max_bytes_per_sec\n        type: u4\n      - id: padding_granularity\n        type: u4\n      - id: flags\n        type: u4\n      - id: total_frames\n        type: u4\n      - id: initial_frames\n        type: u4\n      - id: streams\n        type: u4\n      - id: suggested_buffer_size\n        type: u4\n      - id: width\n        type: u4\n      - id: height\n        type: u4\n      - id: reserved\n        size: 16\n  strh_body:\n    doc: Stream header (one header per stream), defined as AVISTREAMHEADER structure\n    doc-ref: https://learn.microsoft.com/en-us/previous-versions/ms779638(v=vs.85)\n    seq:\n      - id: fcc_type\n        type: u4\n        enum: stream_type\n        doc: Type of the data contained in the stream\n      - id: fcc_handler\n        type: u4\n        enum: handler_type\n        doc: Type of preferred data handler for the stream (specifies codec for audio / video streams)\n      - id: flags\n        type: u4\n      - id: priority\n        type: u2\n      - id: language\n        type: u2\n      - id: initial_frames\n        type: u4\n      - id: scale\n        type: u4\n      - id: rate\n        type: u4\n      - id: start\n        type: u4\n      - id: length\n        type: u4\n      - id: suggested_buffer_size\n        type: u4\n      - id: quality\n        type: u4\n      - id: sample_size\n        type: u4\n      - id: frame\n        type: rect\n  strf_body:\n    doc: Stream format description\n  rect:\n    seq:\n      - id: left\n        type: s2\n      - id: top\n        type: s2\n      - id: right\n        type: s2\n      - id: bottom\n        type: s2\nenums:\n  chunk_type:\n    0x31786469: idx1\n    0x4b4e554a: junk\n    0x4f464e49: info\n    0x54465349: isft\n    0x5453494c: list\n    0x66727473: strf\n    0x68697661: avih\n    0x68727473: strh\n    0x69766f6d: movi\n    0x6c726468: hdrl\n    0x6c727473: strl\n  stream_type:\n    0x7364696d: mids # MIDI stream\n    0x73646976: vids # Video stream\n    0x73647561: auds # Audio stream\n    0x73747874: txts # Text stream\n  handler_type:\n    0x00000055: mp3\n    0x00002000: ac3\n    0x00002001: dts\n    0x64697663: cvid\n    0x64697678: xvid\n"
  },
  {
    "id": "ksy_blender_blend",
    "name": "Blender Blend",
    "category": "Media",
    "metadata": {
      "isGenerated": true,
      "fileExtensions": [
        "blend"
      ],
      "description": "",
      "originalCategory": "media",
      "filePath": "media/blender_blend.ksy",
      "endian": "le"
    },
    "content": "meta:\n  id: blender_blend\n  application: Blender\n  file-extension: blend\n  xref:\n    justsolve: BLEND\n    mime: application/x-blender\n    pronom:\n      - fmt/902\n      - fmt/903\n    wikidata: Q15671948\n  license: CC0-1.0\n  endian: le\ndoc: |\n  Blender is an open source suite for 3D modelling, sculpting,\n  animation, compositing, rendering, preparation of assets for its own\n  game engine and exporting to others, etc. `.blend` is its own binary\n  format that saves whole state of suite: current scene, animations,\n  all software settings, extensions, etc.\n\n  Internally, .blend format is a hybrid semi-self-descriptive\n  format. On top level, it contains a simple header and a sequence of\n  file blocks, which more or less follow typical [TLV\n  pattern](https://en.wikipedia.org/wiki/Type-length-value). Pre-last\n  block would be a structure with code `DNA1`, which is a essentially\n  a machine-readable schema of all other structures used in this file.\nseq:\n  - id: hdr\n    type: header\n  - id: blocks\n    type: file_block\n    repeat: eos\ninstances:\n  sdna_structs:\n    value: 'blocks[blocks.size - 2].body.as<dna1_body>.structs'\ntypes:\n  header:\n    seq:\n      - id: magic\n        contents: BLENDER\n      - id: ptr_size_id\n        type: u1\n        enum: ptr_size\n        doc: Size of a pointer; all pointers in the file are stored in this format\n      - id: endian\n        type: u1\n        doc: Type of byte ordering used\n        enum: endian\n      - id: version\n        type: str\n        size: 3\n        encoding: ASCII\n        doc: Blender version used to save this file\n    instances:\n      psize:\n        value: 'ptr_size_id == ptr_size::bits_64 ? 8 : 4'\n        doc: Number of bytes that a pointer occupies\n  file_block:\n    seq:\n      - id: code\n        type: str\n        size: 4\n        encoding: ASCII\n        doc: Identifier of the file block\n      - id: len_body\n        type: u4\n        doc: Total length of the data after the header of file block\n      - id: mem_addr\n        size: _root.hdr.psize\n        doc: Memory address the structure was located when written to disk\n      - id: sdna_index\n        type: u4\n        doc: Index of the SDNA structure\n      - id: count\n        type: u4\n        doc: Number of structure located in this file-block\n      - id: body\n        size: len_body\n        type:\n          switch-on: code\n          cases:\n            '\"DNA1\"': dna1_body\n    instances:\n      sdna_struct:\n        value: _root.sdna_structs[sdna_index]\n        if: sdna_index != 0\n  dna1_body:\n    doc: |\n      DNA1, also known as \"Structure DNA\", is a special block in\n      .blend file, which contains machine-readable specifications of\n      all other structures used in this .blend file.\n\n      Effectively, this block contains:\n\n      * a sequence of \"names\" (strings which represent field names)\n      * a sequence of \"types\" (strings which represent type name)\n      * a sequence of \"type lengths\"\n      * a sequence of \"structs\" (which describe contents of every\n        structure, referring to types and names by index)\n    doc-ref: 'https://archive.blender.org/wiki/index.php/Dev:Source/Architecture/File_Format/#Structure_DNA'\n    seq:\n      - id: id\n        contents: SDNA\n\n      - id: name_magic\n        contents: NAME\n      - id: num_names\n        type: u4\n      - id: names\n        type: strz\n        encoding: UTF-8\n        repeat: expr\n        repeat-expr: num_names\n\n      - id: padding_1\n        size: (4 - _io.pos) % 4\n\n      - id: type_magic\n        contents: TYPE\n        #align: 4 - https://github.com/kaitai-io/kaitai_struct/issues/12\n      - id: num_types\n        type: u4\n      - id: types\n        type: strz\n        encoding: UTF-8\n        repeat: expr\n        repeat-expr: num_types\n\n      - id: padding_2\n        size: (4 - _io.pos) % 4\n\n      - id: tlen_magic\n        contents: TLEN\n        #align: 4 - https://github.com/kaitai-io/kaitai_struct/issues/12\n      - id: lengths\n        type: u2\n        repeat: expr\n        repeat-expr: num_types\n\n      - id: padding_3\n        size: (4 - _io.pos) % 4\n\n      - id: strc_magic\n        contents: STRC\n      - id: num_structs\n        type: u4\n      - id: structs\n        type: dna_struct\n        repeat: expr\n        repeat-expr: num_structs\n  dna_struct:\n    doc: |\n      DNA struct contains a `type` (type name), which is specified as\n      an index in types table, and sequence of fields.\n    seq:\n      - id: idx_type\n        type: u2\n      - id: num_fields\n        type: u2\n      - id: fields\n        type: dna_field\n        repeat: expr\n        repeat-expr: num_fields\n    instances:\n      type:\n        value: _parent.types[idx_type]\n  dna_field:\n    seq:\n      - id: idx_type\n        type: u2\n      - id: idx_name\n        type: u2\n    instances:\n      type:\n        value: _parent._parent.types[idx_type]\n      name:\n        value: _parent._parent.names[idx_name]\nenums:\n  ptr_size:\n    0x5f: bits_32\n    0x2d: bits_64\n  endian:\n    0x56: be\n    0x76: le\n"
  },
  {
    "id": "ksy_creative_voice_file",
    "name": "Creative Voice File",
    "category": "Media",
    "metadata": {
      "isGenerated": true,
      "fileExtensions": [
        "voc"
      ],
      "description": "Creative Voice File",
      "originalCategory": "media",
      "filePath": "media/creative_voice_file.ksy",
      "signature": {
        "offset": 0,
        "bytes": [
          12,
          26
        ]
      },
      "endian": "le"
    },
    "content": "meta:\n  id: creative_voice_file\n  title: Creative Voice File\n  file-extension: voc\n  xref:\n    justsolve: Creative_Voice_File\n    mime: audio/x-voc\n    wikidata: Q27967410\n  license: CC0-1.0\n  endian: le\ndoc: |\n  Creative Voice File is a container file format for digital audio\n  wave data. Initial revisions were able to support only unsigned\n  8-bit PCM and ADPCM data, later versions were revised to add support\n  for 16-bit PCM and a-law / u-law formats.\n\n  This format was actively used in 1990s, around the advent of\n  Creative's sound cards (Sound Blaster family). It was a popular\n  choice for a digital sound container in lots of games and multimedia\n  software due to simplicity and availability of Creative's recording\n  / editing tools.\ndoc-ref: 'https://wiki.multimedia.cx/index.php?title=Creative_Voice'\n# https://fabiensanglard.net/reverse_engineering_strike_commander/docs/Creative%20Voice%20(VOC)%20file%20format.txt\nseq:\n  - id: magic\n    contents:\n      - 'Creative Voice File'\n      - 0x1a\n  - id: header_size\n    type: u2\n    doc: Total size of this main header (usually 0x001A)\n  - id: version\n    type: u2\n  - id: checksum\n    type: u2\n    doc: 'Checksum: this must be equal to ~version + 0x1234'\n  - id: blocks\n    type: block\n    repeat: eos\n    doc: Series of blocks that contain the actual audio data\ntypes:\n  block:\n    seq:\n      - id: block_type\n        type: u1\n        enum: block_types\n        doc: Byte that determines type of block content\n      - id: body_size1\n        type: u2\n        if: block_type != block_types::terminator\n      - id: body_size2\n        type: u1\n        if: block_type != block_types::terminator\n      - id: body\n        size: body_size\n        type:\n          switch-on: block_type\n          cases:\n            'block_types::sound_data': block_sound_data\n            'block_types::silence': block_silence\n            'block_types::marker': block_marker\n            #'block_types::text': block_text\n            'block_types::repeat_start': block_repeat_start\n            #'block_types::repeat_end': always_empty_block\n            'block_types::extra_info': block_extra_info\n            'block_types::sound_data_new': block_sound_data_new\n        if: block_type != block_types::terminator\n        doc: Block body, type depends on block type byte\n    instances:\n      body_size:\n        value: body_size1 + (body_size2 << 16)\n        if: block_type != block_types::terminator\n        doc: |\n          body_size is a 24-bit little-endian integer, so we're\n          emulating that by adding two standard-sized integers\n          (body_size1 and body_size2).\n  block_sound_data:\n    doc-ref: 'https://wiki.multimedia.cx/index.php?title=Creative_Voice#Block_type_0x01:_Sound_data'\n    seq:\n      - id: freq_div\n        type: u1\n        doc: Frequency divisor, used to determine sample rate\n      - id: codec\n        type: u1\n        enum: codecs\n      - id: wave\n        size-eos: true\n    instances:\n      sample_rate:\n        value: 1000000.0 / (256 - freq_div)\n  block_silence:\n    doc-ref: 'https://wiki.multimedia.cx/index.php?title=Creative_Voice#Block_type_0x03:_Silence'\n    seq:\n      - id: duration_samples\n        type: u2\n        doc: Duration of silence, in samples\n      - id: freq_div\n        type: u1\n        doc: Frequency divisor, used to determine sample rate\n    instances:\n      sample_rate:\n        value: 1000000.0 / (256 - freq_div)\n      duration_sec:\n        value: duration_samples / sample_rate\n        doc: Duration of silence, in seconds\n  block_marker:\n    doc-ref: 'https://wiki.multimedia.cx/index.php?title=Creative_Voice#Block_type_0x04:_Marker'\n    seq:\n      - id: marker_id\n        type: u2\n        doc: Marker ID\n  block_repeat_start:\n    doc-ref: 'https://wiki.multimedia.cx/index.php?title=Creative_Voice#Block_type_0x06:_Repeat_start'\n    seq:\n      - id: repeat_count_1\n        type: u2\n        doc: Number of repetitions minus 1; 0xffff means infinite repetitions\n  block_extra_info:\n    doc-ref: 'https://wiki.multimedia.cx/index.php?title=Creative_Voice#Block_type_0x08:_Extra_info'\n    seq:\n      - id: freq_div\n        type: u2\n        doc: Frequency divisor\n      - id: codec\n        type: u1\n        enum: codecs\n      - id: num_channels_1\n        type: u1\n        doc: Number of channels minus 1 (0 = mono, 1 = stereo)\n    instances:\n      num_channels:\n        value: num_channels_1 + 1\n        doc: Number of channels (1 = mono, 2 = stereo)\n      sample_rate:\n        value: 256000000.0 / (num_channels * (65536 - freq_div))\n  block_sound_data_new:\n    doc-ref: 'https://wiki.multimedia.cx/index.php?title=Creative_Voice#Block_type_0x09:_Sound_data_.28New_format.29'\n    seq:\n      - id: sample_rate\n        type: u4\n      - id: bits_per_sample\n        type: u1\n      - id: num_channels\n        type: u1\n      - id: codec\n        type: u2\n        enum: codecs\n      - id: reserved\n        size: 4\n      - id: wave\n        size-eos: true\nenums:\n  block_types:\n    0: terminator\n    1: sound_data\n    2: sound_data_cont\n    3: silence\n    4: marker\n    5: text\n    6: repeat_start\n    7: repeat_end\n    8: extra_info\n    9: sound_data_new\n  # https://wiki.multimedia.cx/index.php?title=Creative_Voice#Supported_codec_ids\n  codecs:\n    0x00: pcm_8bit_unsigned\n    0x01: adpcm_4bit # 4 bits to 8 bits Creative ADPCM\n    0x02: adpcm_2_6bit # 3 bits to 8 bits Creative ADPCM (AKA 2.6 bits)\n    0x03: adpcm_2_bit # 2 bits to 8 bits Creative ADPCM\n    0x04: pcm_16bit_signed # 16 bits signed PCM\n    0x06: alaw\n    0x07: ulaw\n    0x0200: adpcm_4_to_16bit # 4 bits to 16 bits Creative ADPCM\n"
  },
  {
    "id": "ksy_genmidi_op2",
    "name": "GENMIDI.OP2 OPL2 sound bank",
    "category": "Media",
    "metadata": {
      "isGenerated": true,
      "fileExtensions": [
        "op2"
      ],
      "description": "GENMIDI.OP2 OPL2 sound bank",
      "originalCategory": "media",
      "filePath": "media/genmidi_op2.ksy",
      "signature": {
        "offset": 0,
        "bytes": [
          35,
          79,
          80,
          76,
          95,
          73,
          73,
          35
        ]
      },
      "endian": "le"
    },
    "content": "meta:\n  id: genmidi_op2\n  title: GENMIDI.OP2 OPL2 sound bank\n  file-extension: op2\n  xref:\n    wikidata: Q32098356\n  license: CC0-1.0\n  ks-version: 0.9\n  encoding: ASCII\n  endian: le\ndoc: |\n  GENMIDI.OP2 is a sound bank file used by players based on DMX sound\n  library to play MIDI files with General MIDI instruments using OPL2\n  sound chip (which was commonly installed on popular AdLib and Sound\n  Blaster sound cards).\n\n  Major users of DMX sound library include:\n\n  * Original Doom game engine (and games based on it: Heretic, Hexen, Strife, Chex Quest)\n  * Raptor: Call of the Shadows\ndoc-ref:\n  - http://www.fit.vutbr.cz/~arnost/muslib/op2_form.zip\n  - https://doom.fandom.com/wiki/GENMIDI\n  - https://moddingwiki.shikadi.net/wiki/OP2_Bank_Format\nseq:\n  - id: magic\n    contents: \"#OPL_II#\"\n  - id: instruments\n    type: instrument_entry\n    repeat: expr\n    repeat-expr: 175\n  - id: instrument_names\n    type: str\n    size: 32\n    pad-right: 0\n    terminator: 0\n    repeat: expr\n    repeat-expr: 175\ntypes:\n  instrument_entry:\n    seq:\n      - id: flags\n        type: u2\n      - id: finetune\n        type: u1\n      - id: note\n        type: u1\n        doc: MIDI note for fixed instruments, 0 otherwise\n      - id: instruments\n        repeat: expr\n        repeat-expr: 2\n        type: instrument\n  instrument:\n    seq:\n      - id: op1\n        type: op_settings\n      - id: feedback\n        type: u1\n        doc: Feedback/AM-FM (both operators)\n      - id: op2\n        type: op_settings\n      - id: unused\n        type: u1\n      - id: base_note\n        type: s2\n        doc: Base note offset\n  op_settings:\n    doc: |\n      OPL2 settings for one operator (carrier or modulator)\n    seq:\n      - id: trem_vibr\n        type: u1\n        doc: Tremolo/vibrato/sustain/KSR/multi\n      - id: att_dec\n        type: u1\n        doc: Attack rate/decay rate\n      - id: sust_rel\n        type: u1\n        doc: Sustain level/release rate\n      - id: wave\n        type: u1\n        doc: Waveform select\n      - id: scale\n        type: u1\n        doc: Key scale level\n      - id: level\n        type: u1\n        doc: Output level\n"
  },
  {
    "id": "ksy_id3v1_1",
    "name": "ID3v1.1 tag for .mp3 files",
    "category": "Media",
    "metadata": {
      "isGenerated": true,
      "fileExtensions": [
        "mp3"
      ],
      "description": "ID3v1.1 tag for .mp3 files",
      "originalCategory": "media",
      "filePath": "media/id3v1_1.ksy"
    },
    "content": "meta:\n  id: id3v1_1\n  title: ID3v1.1 tag for .mp3 files\n  file-extension: mp3\n  xref:\n    forensicswiki: id3\n    justsolve: ID3\n    loc: fdd000107 # ID3v1\n    wikidata: Q1054220\n  license: CC0-1.0\ndoc: |\n  ID3v1.1 tag is a method to store simple metadata in .mp3 files. The\n  tag is appended to the end of file and spans exactly 128 bytes.\n\n  This type is supposed to be used on full .mp3 files, seeking to\n  proper position automatically. If you're interesting in parsing only\n  the tag itself, please use `id3v1_1::id3_v1_1_tag` subtype.\ndoc-ref: https://id3.org/ID3v1\ninstances:\n  id3v1_tag:\n    pos: _io.size - 128\n    type: id3_v1_1_tag\ntypes:\n  id3_v1_1_tag:\n    doc: |\n      ID3v1.1 tag itself, a fixed size 128 byte structure. Contains\n      several metadata fields as fixed-size strings.\n\n      Note that string encoding is not specified by standard, so real\n      encoding used would vary a lot from one implementation to\n      another. Most Windows-based applications tend to use \"ANSI\"\n      (i.e. locale-dependent encoding, usually one byte per\n      character). Some embedded applications allow selection of\n      charset.\n    seq:\n      - id: magic\n        contents: 'TAG'\n      - id: title\n        size: 30\n        doc: Song title\n      - id: artist\n        size: 30\n        doc: Artist name\n      - id: album\n        size: 30\n        doc: Album title\n      - id: year\n        type: str\n        encoding: ASCII\n        size: 4\n        doc: Year of release\n      - id: comment\n        size: 30\n        doc: Arbitary comment\n      - id: genre\n        type: u1\n        enum: genre_enum\n    enums:\n      genre_enum:\n        0: blues\n        1: classic_rock\n        2: country\n        3: dance\n        4: disco\n        5: funk\n        6: grunge\n        7: hip_hop\n        8: jazz\n        9: metal\n        10: new_age\n        11: oldies\n        12: other\n        13: pop\n        14: rnb\n        15: rap\n        16: reggae\n        17: rock\n        18: techno\n        19: industrial\n        20: alternative\n        21: ska\n        22: death_metal\n        23: pranks\n        24: soundtrack\n        25: euro_techno\n        26: ambient\n        27: trip_hop\n        28: vocal\n        29: jazz_funk\n        30: fusion\n        31: trance\n        32: classical\n        33: instrumental\n        34: acid\n        35: house\n        36: game\n        37: sound_clip\n        38: gospel\n        39: noise\n        40: alternrock\n        41: bass\n        42: soul\n        43: punk\n        44: space\n        45: meditative\n        46: instrumental_pop\n        47: instrumental_rock\n        48: ethnic\n        49: gothic\n        50: darkwave\n        51: techno_industrial\n        52: electronic\n        53: pop_folk\n        54: eurodance\n        55: dream\n        56: southern_rock\n        57: comedy\n        58: cult\n        59: gangsta\n        60: top_40\n        61: christian_rap\n        62: pop_funk\n        63: jungle\n        64: native_american\n        65: cabaret\n        66: new_wave\n        67: psychadelic\n        68: rave\n        69: showtunes\n        70: trailer\n        71: lo_fi\n        72: tribal\n        73: acid_punk\n        74: acid_jazz\n        75: polka\n        76: retro\n        77: musical\n        78: rock_n_roll\n        79: hard_rock\n        80: folk\n        81: folk_rock\n        82: national_folk\n        83: swing\n        84: fast_fusion\n        85: bebob\n        86: latin\n        87: revival\n        88: celtic\n        89: bluegrass\n        90: avantgarde\n        91: gothic_rock\n        92: progressive_rock\n        93: psychedelic_rock\n        94: symphonic_rock\n        95: slow_rock\n        96: big_band\n        97: chorus\n        98: easy_listening\n        99: acoustic\n        100: humour\n        101: speech\n        102: chanson\n        103: opera\n        104: chamber_music\n        105: sonata\n        106: symphony\n        107: booty_bass\n        108: primus\n        109: porn_groove\n        110: satire\n        111: slow_jam\n        112: club\n        113: tango\n        114: samba\n        115: folklore\n        116: ballad\n        117: power_ballad\n        118: rhythmic_soul\n        119: freestyle\n        120: duet\n        121: punk_rock\n        122: drum_solo\n        123: a_capella\n        124: euro_house\n        125: dance_hall\n"
  },
  {
    "id": "ksy_id3v2_3",
    "name": "ID3v2.3 tag for .mp3 files",
    "category": "Media",
    "metadata": {
      "isGenerated": true,
      "fileExtensions": [
        "mp3"
      ],
      "description": "ID3v2.3 tag for .mp3 files",
      "originalCategory": "media",
      "filePath": "media/id3v2_3.ksy",
      "endian": "be"
    },
    "content": "meta:\n  id: id3v2_3\n  title: ID3v2.3 tag for .mp3 files\n  file-extension: mp3\n  xref:\n    forensicswiki: id3\n    justsolve: ID3\n    loc: fdd000108 # ID3v2\n    wikidata: Q1054220\n  license: CC0-1.0\n  endian: be\n\ndoc-ref: https://id3.org/id3v2.3.0\n\nseq:\n  - id: tag\n    type: tag\n\ntypes:\n  tag:\n    doc-ref: Section 3. ID3v2 overview\n    seq:\n      - id: header\n        type: header\n      - id: header_ex\n        type: header_ex\n        if: header.flags.flag_headerex\n      - id: frames\n        type: frame\n        repeat: until\n        repeat-until: _io.pos + _.size > header.size.value or _.is_invalid\n      - id: padding\n        if: header.flags.flag_headerex\n        size: header_ex.padding_size - _io.pos\n\n  header:\n    doc: ID3v2 fixed header\n    doc-ref: Section 3.1. ID3v2 header\n    seq:\n      - id: magic\n        contents: 'ID3'\n      - id: version_major\n        type: u1\n      - id: version_revision\n        type: u1\n      - id: flags\n        type: flags\n      - id: size\n        type: u4be_synchsafe\n    types:\n      flags:\n        seq:\n          - id: flag_unsynchronization\n            type: b1\n          - id: flag_headerex\n            type: b1\n          - id: flag_experimental\n            type: b1\n          - id: reserved\n            type: b5\n\n  header_ex:\n    doc: ID3v2 extended header\n    doc-ref: Section 3.2. ID3v2 extended header\n    seq:\n      - id: size\n        type: u4\n      - id: flags_ex\n        type: flags_ex\n      - id: padding_size\n        type: u4\n      - id: crc\n        type: u4\n        if: flags_ex.flag_crc\n    types:\n      flags_ex:\n        seq:\n          - id: flag_crc\n            type: b1\n          - id: reserved\n            type: b15\n\n  frame:\n    doc-ref: Section 3.3. ID3v2 frame overview\n    seq:\n      - id: id\n        type: str\n        size: 4\n        encoding: ASCII\n      - id: size\n        type: u4\n      - id: flags\n        type: flags\n      - id: data\n        size: size\n    instances:\n      is_invalid:\n        value: \"id == '\\x00\\x00\\x00\\x00'\"\n    types:\n      flags:\n        seq:\n          - id: flag_discard_alter_tag\n            type: b1\n          - id: flag_discard_alter_file\n            type: b1\n          - id: flag_read_only\n            type: b1\n          - id: reserved1\n            type: b5\n          - id: flag_compressed\n            type: b1\n          - id: flag_encrypted\n            type: b1\n          - id: flag_grouping\n            type: b1\n          - id: reserved2\n            type: b5\n\n  # Section 6.2. Synchsafe integers\n  u1be_synchsafe:\n    seq:\n      - id: padding\n        type: b1\n      - id: value\n        type: b7\n  u2be_synchsafe:\n    seq:\n      - id: byte0\n        type: u1be_synchsafe\n      - id: byte1\n        type: u1be_synchsafe\n    instances:\n      value:\n        value: (byte0.value << 7) | byte1.value\n  u4be_synchsafe:\n    seq:\n      - id: short0\n        type: u2be_synchsafe\n      - id: short1\n        type: u2be_synchsafe\n    instances:\n      value:\n        value: (short0.value << 14) | short1.value\n"
  },
  {
    "id": "ksy_id3v2_4",
    "name": "ID3v2.4 tag for .mp3 files",
    "category": "Media",
    "metadata": {
      "isGenerated": true,
      "fileExtensions": [
        "mp3"
      ],
      "description": "ID3v2.4 tag for .mp3 files",
      "originalCategory": "media",
      "filePath": "media/id3v2_4.ksy",
      "endian": "be"
    },
    "content": "meta:\n  id: id3v2_4\n  title: ID3v2.4 tag for .mp3 files\n  file-extension: mp3\n  xref:\n    forensicswiki: id3\n    justsolve: ID3\n    loc: fdd000108 # ID3v2\n    wikidata: Q1054220\n  license: CC0-1.0\n  endian: be\n\ndoc-ref:\n  - http://id3.org/id3v2.4.0-structure\n  - http://id3.org/id3v2.4.0-frames\n\nseq:\n  - id: tag\n    type: tag\n\ntypes:\n  # Section 3. ID3v2 overview\n  tag:\n    seq:\n      - id: header\n        type: header\n      - id: header_ex\n        type: header_ex\n        if: header.flags.flag_headerex\n      - id: frames\n        type: frame\n        repeat: until\n        repeat-until: _io.pos + _.size.value > header.size.value or _.is_invalid\n      - id: padding\n        type: padding\n        if: not header.flags.flag_footer\n      - id: footer\n        type: footer\n        if: header.flags.flag_footer\n\n  # Section 3.1. ID3v2 header\n  header:\n    seq:\n      - id: magic\n        contents: 'ID3'\n      - id: version_major\n        type: u1\n      - id: version_revision\n        type: u1\n      - id: flags\n        type: flags\n      - id: size\n        type: u4be_synchsafe\n    types:\n      flags:\n        seq:\n          - id: flag_unsynchronization\n            type: b1\n          - id: flag_headerex\n            type: b1\n          - id: flag_experimental\n            type: b1\n          - id: flag_footer\n            type: b1\n          - id: reserved\n            type: b4\n\n  # Section 3.2. ID3v2 extended header\n  header_ex:\n    seq:\n      - id: size\n        type: u4be_synchsafe\n      - id: flags_ex\n        type: flags_ex\n      - id: data\n        size: size.value - 5\n    types:\n      flags_ex:\n        seq:\n          - id: reserved1\n            type: b1\n          - id: flag_update\n            type: b1\n          - id: flag_crc\n            type: b1\n          - id: flag_restrictions\n            type: b1\n          - id: reserved2\n            type: b4\n\n  # Section 3.3. Padding\n  padding:\n    seq:\n      - id: padding\n        size: _root.tag.header.size.value - _io.pos\n\n  # Section 3.4. ID3v2 footer\n  footer:\n    seq:\n      - id: magic\n        contents: '3DI'\n      - id: version_major\n        type: u1\n      - id: version_revision\n        type: u1\n      - id: flags\n        type: flags\n      - id: size\n        type: u4be_synchsafe\n    types:\n      flags:\n        seq:\n          - id: flag_unsynchronization\n            type: b1\n          - id: flag_headerex\n            type: b1\n          - id: flag_experimental\n            type: b1\n          - id: flag_footer\n            type: b1\n          - id: reserved\n            type: b4\n\n  # Section 4. ID3v2 frames overview\n  frame:\n    seq:\n      - id: id\n        type: str\n        size: 4\n        encoding: ASCII\n      - id: size\n        type: u4be_synchsafe\n      - id: flags_status\n        type: flags_status\n      - id: flags_format\n        type: flags_format\n      - id: data\n        size: size.value\n    types:\n      flags_status:\n        seq:\n          - id: reserved1\n            type: b1\n          - id: flag_discard_alter_tag\n            type: b1\n          - id: flag_discard_alter_file\n            type: b1\n          - id: flag_read_only\n            type: b1\n          - id: reserved2\n            type: b4\n      flags_format:\n        seq:\n          - id: reserved1\n            type: b1\n          - id: flag_grouping\n            type: b1\n          - id: reserved2\n            type: b2\n          - id: flag_compressed\n            type: b1\n          - id: flag_encrypted\n            type: b1\n          - id: flag_unsynchronisated\n            type: b1\n          - id: flag_indicator\n            type: b1\n    instances:\n      is_invalid:\n        value: \"id == '\\x00\\x00\\x00\\x00'\"\n\n  # Section 6.2. Synchsafe integers\n  u1be_synchsafe:\n    seq:\n      - id: padding\n        type: b1\n      - id: value\n        type: b7\n  u2be_synchsafe:\n    seq:\n      - id: byte0\n        type: u1be_synchsafe\n      - id: byte1\n        type: u1be_synchsafe\n    instances:\n      value:\n        value: (byte0.value << 7) | byte1.value\n  u4be_synchsafe:\n    seq:\n      - id: short0\n        type: u2be_synchsafe\n      - id: short1\n        type: u2be_synchsafe\n    instances:\n      value:\n        value: (short0.value << 14) | short1.value\n"
  },
  {
    "id": "ksy_magicavoxel_vox",
    "name": "MagicaVoxel File",
    "category": "Media",
    "metadata": {
      "isGenerated": true,
      "fileExtensions": [
        "vox"
      ],
      "description": "MagicaVoxel File",
      "originalCategory": "media",
      "filePath": "media/magicavoxel_vox.ksy",
      "signature": {
        "offset": 0,
        "bytes": [
          86,
          79,
          88,
          32
        ]
      },
      "endian": "le"
    },
    "content": "meta:\n  id: magicavoxel_vox\n  title: MagicaVoxel File\n  application: MagicaVoxel\n  file-extension: vox\n  xref:\n    pronom: fmt/976\n    wikidata: Q50374901\n  license: MIT\n  ks-version: 0.9 # for doc-ref array\n  endian: le\ndoc-ref:\n  - https://ephtracy.github.io/ MagicaVoxel Homepage\n  - https://github.com/ephtracy/voxel-model/blob/master/MagicaVoxel-file-format-vox.txt Format Description\nseq:\n  - id: magic\n    contents: 'VOX '\n  - id: version\n    type: u4\n    doc: 150 expected\n  - id: main\n    type: chunk\ntypes:\n  chunk:\n    seq:\n      - id: chunk_id\n        type: u4be\n        enum: chunk_type\n      - id: num_bytes_of_chunk_content\n        type: u4\n      - id: num_bytes_of_children_chunks\n        type: u4\n      - id: chunk_content\n        if: num_bytes_of_chunk_content != 0\n        size: num_bytes_of_chunk_content\n        type:\n          switch-on: chunk_id\n          cases:\n            'chunk_type::pack': pack\n            'chunk_type::size': size\n            'chunk_type::xyzi': xyzi\n            'chunk_type::rgba': rgba\n            'chunk_type::matt': matt\n      - id: children_chunks\n        if: num_bytes_of_children_chunks != 0\n        type: chunk\n        repeat: eos\n  pack:\n    seq:\n      - id: num_models\n        type: u4\n  size:\n    seq:\n      - id: size_x\n        type: u4\n      - id: size_y\n        type: u4\n      - id: size_z\n        type: u4\n  xyzi:\n    seq:\n      - id: num_voxels\n        type: u4\n      - id: voxels\n        type: voxel\n        repeat: expr\n        repeat-expr: num_voxels\n  rgba:\n    seq:\n      - id: colors\n        type: color\n        repeat: expr\n        repeat-expr: 256\n  voxel:\n    seq:\n      - id: x\n        type: u1\n      - id: y\n        type: u1\n      - id: z\n        type: u1\n      - id: color_index\n        type: u1\n  color:\n    seq:\n      - id: r\n        type: u1\n      - id: g\n        type: u1\n      - id: b\n        type: u1\n      - id: a\n        type: u1\n  matt:\n    seq:\n      - id: id\n        type: u4\n      - id: material_type\n        type: u4\n        enum: material_type\n      - id: material_weight\n        type: f4\n      - id: property_bits\n        type: u4\n        # .to_i not implemented for C# runtime yet\n        #enum: property_bits_type\n      - id: plastic\n        if: has_plastic\n        type: f4\n      - id: roughness\n        if: has_roughness\n        type: f4\n      - id: specular\n        if: has_specular\n        type: f4\n      - id: ior\n        if: has_ior\n        type: f4\n      - id: attenuation\n        if: has_attenuation\n        type: f4\n      - id: power\n        if: has_power\n        type: f4\n      - id: glow\n        if: has_glow\n        type: f4\n      - id: is_total_power\n        if: has_is_total_power\n        type: f4\n    instances:\n      has_plastic:\n        value: '(property_bits & 1) != 0'\n      has_roughness:\n        value: '(property_bits & 2) != 0'\n      has_specular:\n        value: '(property_bits & 4) != 0'\n      has_ior:\n        value: '(property_bits & 8) != 0'\n      has_attenuation:\n        value: '(property_bits & 16) != 0'\n      has_power:\n        value: '(property_bits & 32) != 0'\n      has_glow:\n        value: '(property_bits & 64) != 0'\n      has_is_total_power:\n        value: '(property_bits & 128) != 0'\nenums:\n  chunk_type:\n    0x4d41494e: main\n    0x5041434b: pack\n    0x53495a45: size\n    0x58595a49: xyzi\n    0x52474241: rgba\n    0x4d415454: matt\n  material_type:\n    0: diffuse\n    1: metal\n    2: glass\n    3: emissive\n  property_bits_type:\n    1: plastic\n    2: roughness\n    4: specular\n    8: ior\n    16: attenuation\n    32: power\n    64: glow\n    128: is_total_power\n# Support for constant lists would be useful here for the default color palette when the RGBA chunk is missing\n# instances:\n#   default_palette:\n#     value: [\n# 0x00000000, 0xffffffff, 0xffccffff, 0xff99ffff, 0xff66ffff, 0xff33ffff, 0xff00ffff, 0xffffccff, 0xffccccff, 0xff99ccff, 0xff66ccff, 0xff33ccff, 0xff00ccff, 0xffff99ff, 0xffcc99ff, 0xff9999ff,>\n# 0xff6699ff, 0xff3399ff, 0xff0099ff, 0xffff66ff, 0xffcc66ff, 0xff9966ff, 0xff6666ff, 0xff3366ff, 0xff0066ff, 0xffff33ff, 0xffcc33ff, 0xff9933ff, 0xff6633ff, 0xff3333ff, 0xff0033ff, 0xffff00ff,>\n#\t0xffcc00ff, 0xff9900ff, 0xff6600ff, 0xff3300ff, 0xff0000ff, 0xffffffcc, 0xffccffcc, 0xff99ffcc, 0xff66ffcc, 0xff33ffcc, 0xff00ffcc, 0xffffcccc, 0xffcccccc, 0xff99cccc, 0xff66cccc, 0xff33cccc,>\n#\t0xff00cccc, 0xffff99cc, 0xffcc99cc, 0xff9999cc, 0xff6699cc, 0xff3399cc, 0xff0099cc, 0xffff66cc, 0xffcc66cc, 0xff9966cc, 0xff6666cc, 0xff3366cc, 0xff0066cc, 0xffff33cc, 0xffcc33cc, 0xff9933cc,>\n#\t0xff6633cc, 0xff3333cc, 0xff0033cc, 0xffff00cc, 0xffcc00cc, 0xff9900cc, 0xff6600cc, 0xff3300cc, 0xff0000cc, 0xffffff99, 0xffccff99, 0xff99ff99, 0xff66ff99, 0xff33ff99, 0xff00ff99, 0xffffcc99,>\n#\t0xffcccc99, 0xff99cc99, 0xff66cc99, 0xff33cc99, 0xff00cc99, 0xffff9999, 0xffcc9999, 0xff999999, 0xff669999, 0xff339999, 0xff009999, 0xffff6699, 0xffcc6699, 0xff996699, 0xff666699, 0xff336699,>\n#\t0xff006699, 0xffff3399, 0xffcc3399, 0xff993399, 0xff663399, 0xff333399, 0xff003399, 0xffff0099, 0xffcc0099, 0xff990099, 0xff660099, 0xff330099, 0xff000099, 0xffffff66, 0xffccff66, 0xff99ff66,>\n#\t0xff66ff66, 0xff33ff66, 0xff00ff66, 0xffffcc66, 0xffcccc66, 0xff99cc66, 0xff66cc66, 0xff33cc66, 0xff00cc66, 0xffff9966, 0xffcc9966, 0xff999966, 0xff669966, 0xff339966, 0xff009966, 0xffff6666,>\n#\t0xffcc6666, 0xff996666, 0xff666666, 0xff336666, 0xff006666, 0xffff3366, 0xffcc3366, 0xff993366, 0xff663366, 0xff333366, 0xff003366, 0xffff0066, 0xffcc0066, 0xff990066, 0xff660066, 0xff330066,>\n#\t0xff000066, 0xffffff33, 0xffccff33, 0xff99ff33, 0xff66ff33, 0xff33ff33, 0xff00ff33, 0xffffcc33, 0xffcccc33, 0xff99cc33, 0xff66cc33, 0xff33cc33, 0xff00cc33, 0xffff9933, 0xffcc9933, 0xff999933,>\n#\t0xff669933, 0xff339933, 0xff009933, 0xffff6633, 0xffcc6633, 0xff996633, 0xff666633, 0xff336633, 0xff006633, 0xffff3333, 0xffcc3333, 0xff993333, 0xff663333, 0xff333333, 0xff003333, 0xffff0033,>\n#\t0xffcc0033, 0xff990033, 0xff660033, 0xff330033, 0xff000033, 0xffffff00, 0xffccff00, 0xff99ff00, 0xff66ff00, 0xff33ff00, 0xff00ff00, 0xffffcc00, 0xffcccc00, 0xff99cc00, 0xff66cc00, 0xff33cc00,>\n#\t0xff00cc00, 0xffff9900, 0xffcc9900, 0xff999900, 0xff669900, 0xff339900, 0xff009900, 0xffff6600, 0xffcc6600, 0xff996600, 0xff666600, 0xff336600, 0xff006600, 0xffff3300, 0xffcc3300, 0xff993300,>\n#\t0xff663300, 0xff333300, 0xff003300, 0xffff0000, 0xffcc0000, 0xff990000, 0xff660000, 0xff330000, 0xff0000ee, 0xff0000dd, 0xff0000bb, 0xff0000aa, 0xff000088, 0xff000077, 0xff000055, 0xff000044,>\n#\t0xff000022, 0xff000011, 0xff00ee00, 0xff00dd00, 0xff00bb00, 0xff00aa00, 0xff008800, 0xff007700, 0xff005500, 0xff004400, 0xff002200, 0xff001100, 0xffee0000, 0xffdd0000, 0xffbb0000, 0xffaa0000,>\n#\t0xff880000, 0xff770000, 0xff550000, 0xff440000, 0xff220000, 0xff110000, 0xffeeeeee, 0xffdddddd, 0xffbbbbbb, 0xffaaaaaa, 0xff888888, 0xff777777, 0xff555555, 0xff444444, 0xff222222, 0xff111111>\n#]\n"
  },
  {
    "id": "ksy_ogg",
    "name": "Ogg media container file",
    "category": "Media",
    "metadata": {
      "isGenerated": true,
      "fileExtensions": [
        "ogg",
        "ogv",
        "oga",
        "spx",
        "ogx"
      ],
      "description": "Ogg media container file",
      "originalCategory": "media",
      "filePath": "media/ogg.ksy",
      "endian": "le"
    },
    "content": "meta:\n  id: ogg\n  title: Ogg media container file\n  file-extension:\n    - ogg\n    - ogv\n    - oga\n    - spx\n    - ogx\n  xref:\n    justsolve: Ogg\n    loc: fdd000026\n    pronom: fmt/944\n    wikidata: Q188199\n  license: CC0-1.0\n  endian: le\ndoc: |\n  Ogg is a popular media container format, which provides basic\n  streaming / buffering mechanisms and is content-agnostic. Most\n  popular codecs that are used within Ogg streams are Vorbis (thus\n  making Ogg/Vorbis streams) and Theora (Ogg/Theora).\n\n  Ogg stream is a sequence Ogg pages. They can be read sequentially,\n  or one can jump into arbitrary stream location and scan for \"OggS\"\n  sync code to find the beginning of a new Ogg page and continue\n  decoding the stream contents from that one.\nseq:\n  - id: pages\n    repeat: eos\n    type: page\ntypes:\n  page:\n    doc: |\n      Ogg page is a basic unit of data in an Ogg bitstream, usually\n      it's around 4-8 KB, with a maximum size of 65307 bytes.\n    seq:\n      - id: sync_code\n        contents: \"OggS\"\n      - id: version\n        contents: [0]\n        doc: Version of the Ogg bitstream format. Currently must be 0.\n      - id: reserved1\n        type: b5\n      - id: is_end_of_stream\n        type: b1\n        doc: |\n          EOS (End Of Stream) mark. This page is the last page in the\n          logical bitstream. The EOS flag must be set on the final page of\n          every logical bitstream, and must not be set on any other page.\n      - id: is_beginning_of_stream\n        type: b1\n        doc: |\n          BOS (Beginning Of Stream) mark. This page is the first page in\n          the logical bitstream. The BOS flag must be set on the first\n          page of every logical bitstream, and must not be set on any\n          other page.\n      - id: is_continuation\n        type: b1\n        doc: |\n          The first packet on this page is a continuation of the previous\n          packet in the logical bitstream.\n      - id: granule_pos\n        type: u8\n        doc: |\n          \"Granule position\" is the time marker in Ogg files. It is an\n          abstract value, whose meaning is determined by the codec. It\n          may, for example, be a count of the number of samples, the\n          number of frames or a more complex scheme.\n      - id: bitstream_serial\n        type: u4\n        doc: |\n          Serial number that identifies a page as belonging to a\n          particular logical bitstream. Each logical bitstream in a file\n          has a unique value, and this field allows implementations to\n          deliver the pages to the appropriate decoder. In a typical\n          Vorbis and Theora file, one stream is the audio (Vorbis), and\n          the other is the video (Theora).\n      - id: page_seq_num\n        type: u4\n        doc: |\n          Sequential number of page, guaranteed to be monotonically\n          increasing for each logical bitstream. The first page is 0, the\n          second 1, etc. This allows implementations to detect when data\n          has been lost.\n      - id: crc32\n        type: u4\n        doc: |\n          This field provides a CRC32 checksum of the data in the entire\n          page (including the page header, calculated with the checksum\n          field set to 0). This allows verification that the data has not\n          been corrupted since it was created. Pages that fail the\n          checksum should be discarded. The checksum is generated using a\n          polynomial value of 0x04C11DB7.\n      - id: num_segments\n        type: u1\n        doc: |\n          The number of segments that exist in this page. There can be a\n          maximum of 255 segments in any one page.\n      - id: len_segments\n        type: u1\n        repeat: expr\n        repeat-expr: num_segments\n        doc: |\n          Table of lengths of segments.\n      - id: segments\n        repeat: expr\n        repeat-expr: num_segments\n        size: len_segments[_index]\n        doc: Segment content bytes make up the rest of the Ogg page.\n"
  },
  {
    "id": "ksy_quicktime_mov",
    "name": "Quicktime Mov",
    "category": "Media",
    "metadata": {
      "isGenerated": true,
      "fileExtensions": [
        "mov"
      ],
      "description": "",
      "originalCategory": "media",
      "filePath": "media/quicktime_mov.ksy",
      "endian": "be"
    },
    "content": "meta:\n  id: quicktime_mov\n  application: QuickTime, MP4 ISO 14496-14 media\n  file-extension: mov\n  xref:\n    justsolve: QuickTime\n    loc: fdd000052\n    mime: video/quicktime\n    pronom: x-fmt/384\n    wikidata: Q942350\n  license: CC0-1.0\n  endian: be\ndoc-ref: 'https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap1/qtff1.html#//apple_ref/doc/uid/TP40000939-CH203-BBCGDDDF'\nseq:\n  - id: atoms\n    type: atom_list\ntypes:\n  atom_list:\n    seq:\n      - id: items\n        type: atom\n        repeat: eos\n  atom:\n    seq:\n      - id: len32\n        type: u4\n      - id: atom_type\n        type: u4\n        enum: atom_type\n      - id: len64\n        type: u8\n        if: len32 == 1\n      - id: body\n        size: len\n        type:\n          switch-on: atom_type\n          cases:\n            # Atom types which actually just contain other atoms inside it\n            'atom_type::dinf': atom_list\n            'atom_type::mdia': atom_list\n            'atom_type::minf': atom_list\n            'atom_type::moof': atom_list\n            'atom_type::moov': atom_list\n            'atom_type::stbl': atom_list\n            'atom_type::traf': atom_list\n            'atom_type::trak': atom_list\n\n            # Leaf atoms that have some distinct format inside\n            'atom_type::ftyp': ftyp_body\n            'atom_type::tkhd': tkhd_body\n            'atom_type::mvhd': mvhd_body\n    instances:\n      len:\n        value: 'len32 == 0 ? (_io.size - 8) : (len32 == 1 ? len64 - 16 : len32 - 8)'\n  ftyp_body:\n    doc-ref: 'https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap1/qtff1.html#//apple_ref/doc/uid/TP40000939-CH203-CJBCBIFF'\n    seq:\n      - id: major_brand\n        type: u4\n        enum: brand\n      - id: minor_version\n        size: 4\n      - id: compatible_brands\n        type: u4\n        enum: brand\n        repeat: eos\n  mvhd_body:\n    doc-ref: 'https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-BBCGFGJG'\n    seq:\n      - id: version\n        type: u1\n        doc: Version of this movie header atom\n      - id: flags\n        size: 3\n      - id: creation_time\n        type: u4\n      - id: modification_time\n        type: u4\n      - id: time_scale\n        type: u4\n        doc: |\n          A time value that indicates the time scale for this\n          movie - the number of time units that pass per second\n          in its time coordinate system. A time coordinate system that\n          measures time in sixtieths of a second, for example, has a\n          time scale of 60.\n      - id: duration\n        type: u4\n        doc: |\n          A time value that indicates the duration of the movie in\n          time scale units. Note that this property is derived from\n          the movie's tracks. The value of this field corresponds to\n          the duration of the longest track in the movie.\n      - id: preferred_rate\n        type: fixed32\n        doc: The rate at which to play this movie. A value of 1.0 indicates normal rate.\n      - id: preferred_volume\n        type: fixed16\n        doc: How loud to play this movie's sound. A value of 1.0 indicates full volume.\n      - id: reserved1\n        size: 10\n      - id: matrix\n        size: 36\n        doc: A matrix shows how to map points from one coordinate space into another.\n      - id: preview_time\n        type: u4\n        doc: The time value in the movie at which the preview begins.\n      - id: preview_duration\n        type: u4\n        doc: The duration of the movie preview in movie time scale units.\n      - id: poster_time\n        type: u4\n        doc: The time value of the time of the movie poster.\n      - id: selection_time\n        type: u4\n        doc: The time value for the start time of the current selection.\n      - id: selection_duration\n        type: u4\n        doc: The duration of the current selection in movie time scale units.\n      - id: current_time\n        type: u4\n        doc: The time value for current time position within the movie.\n      - id: next_track_id\n        type: u4\n        doc: |\n          Indicates a value to use for the track ID number of the next\n          track added to this movie. Note that 0 is not a valid track\n          ID value.\n  tkhd_body:\n    doc-ref: 'https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25550'\n    seq:\n      - id: version\n        type: u1\n      - id: flags\n        size: 3\n      - id: creation_time\n        type: u4\n      - id: modification_time\n        type: u4\n      - id: track_id\n        type: u4\n        doc: Integer that uniquely identifies the track. The value 0 cannot be used.\n      - id: reserved1\n        size: 4\n      - id: duration\n        type: u4\n      - id: reserved2\n        size: 8\n      - id: layer\n        type: u2\n      - id: alternative_group\n        type: u2\n      - id: volume\n        type: u2\n      - id: reserved3\n        type: u2\n      - id: matrix\n        size: 36\n      - id: width\n        type: fixed32\n      - id: height\n        type: fixed32\n  fixed32:\n    doc: Fixed-point 32-bit number.\n    seq:\n      - id: int_part\n        type: s2\n      - id: frac_part\n        type: u2\n  fixed16:\n    doc: Fixed-point 16-bit number.\n    seq:\n      - id: int_part\n        type: s1\n      - id: frac_part\n        type: u1\nenums:\n  atom_type:\n    0x58747261: xtra\n    0x64696e66: dinf\n    0x64726566: dref\n    0x65647473: edts\n    0x656c7374: elst\n    0x66726565: free\n    0x66747970: ftyp\n    0x68646c72: hdlr\n    0x696f6473: iods\n    0x6d646174: mdat\n    0x6d646864: mdhd\n    0x6d646961: mdia\n    0x6d657461: meta\n    0x6d696e66: minf\n    0x6d6f6f66: moof\n    0x6d6f6f76: moov\n    0x6d766864: mvhd\n    0x736d6864: smhd\n    0x7374626c: stbl\n    0x7374636f: stco\n    0x73747363: stsc\n    0x73747364: stsd\n    0x7374737a: stsz\n    0x73747473: stts\n    0x746b6864: tkhd\n    0x74726166: traf\n    0x7472616b: trak\n    0x74726566: tref\n    0x75647461: udta\n    0x766d6864: vmhd\n\n  # https://mp4ra.org/#/brands\n  #\n  # JS code to scrape the enum `brand` (paste into the browser JS console on the above page):\n  # ```javascript\n  # copy(Array.from(document.querySelector('tbody').querySelectorAll('tr')).map(r => {\n  #   const code = r.querySelector('td:nth-child(1)').innerText.replace(/\\$20/g, '\\x20');\n  #   if (!code.trim()) return null;\n  #   return [\n  #     '0x' + Array.from((new TextEncoder()).encode(code), b => b.toString(16).padStart(2, '0')).join(''),\n  #     (/^\\d/.test(code) ? 'x_' : '') + code.trim().toLowerCase(),\n  #   ];\n  # }).filter(entry => !!entry).map(entry => `    ${entry[0]}: ${entry[1]}\\n`).join(''));\n  # ```\n  brand:\n    0x33673261: x_3g2a\n    0x33676536: x_3ge6\n    0x33676537: x_3ge7\n    0x33676539: x_3ge9\n    0x33676639: x_3gf9\n    0x33676736: x_3gg6\n    0x33676739: x_3gg9\n    0x33676839: x_3gh9\n    0x33676d39: x_3gm9\n    0x33676d41: x_3gma\n    0x33677034: x_3gp4\n    0x33677035: x_3gp5\n    0x33677036: x_3gp6\n    0x33677037: x_3gp7\n    0x33677038: x_3gp8\n    0x33677039: x_3gp9\n    0x33677236: x_3gr6\n    0x33677239: x_3gr9\n    0x33677336: x_3gs6\n    0x33677339: x_3gs9\n    0x33677438: x_3gt8\n    0x33677439: x_3gt9\n    0x33677476: x_3gtv\n    0x33677672: x_3gvr\n    0x33767261: x_3vra\n    0x33767262: x_3vrb\n    0x3376726d: x_3vrm\n    0x61647469: adti\n    0x61696433: aid3\n    0x41525249: arri\n    0x61763031: av01\n    0x61766331: avc1\n    0x61766369: avci\n    0x61766373: avcs\n    0x61766465: avde\n    0x61766966: avif\n    0x6176696f: avio\n    0x61766973: avis\n    0x6262786d: bbxm\n    0x43414550: caep\n    0x43446573: cdes\n    0x6361346d: ca4m\n    0x63613473: ca4s\n    0x63616161: caaa\n    0x63616163: caac\n    0x6361626c: cabl\n    0x63616d61: cama\n    0x63616d63: camc\n    0x63617176: caqv\n    0x63617375: casu\n    0x63636561: ccea\n    0x63636666: ccff\n    0x63646d31: cdm1\n    0x63646d34: cdm4\n    0x63656163: ceac\n    0x63666864: cfhd\n    0x63667364: cfsd\n    0x63686431: chd1\n    0x63686466: chdf\n    0x63686576: chev\n    0x63686864: chhd\n    0x63686831: chh1\n    0x636c6731: clg1\n    0x636d6632: cmf2\n    0x636d6663: cmfc\n    0x636d6666: cmff\n    0x636d666c: cmfl\n    0x636d6673: cmfs\n    0x636d686d: cmhm\n    0x636d6873: cmhs\n    0x636f6d70: comp\n    0x63736831: csh1\n    0x63756431: cud1\n    0x63756438: cud8\n    0x63757664: cuvd\n    0x63766964: cvid\n    0x63767663: cvvc\n    0x63777674: cwvt\n    0x64613061: da0a\n    0x64613062: da0b\n    0x64613161: da1a\n    0x64613162: da1b\n    0x64613261: da2a\n    0x64613262: da2b\n    0x64613361: da3a\n    0x64613362: da3b\n    0x64617368: dash\n    0x64627931: dby1\n    0x646d6231: dmb1\n    0x64736d73: dsms\n    0x64747331: dts1\n    0x64747332: dts2\n    0x64747333: dts3\n    0x64763161: dv1a\n    0x64763162: dv1b\n    0x64763261: dv2a\n    0x64763262: dv2b\n    0x64763361: dv3a\n    0x64763362: dv3b\n    0x64767231: dvr1\n    0x64767431: dvt1\n    0x64786f20: dxo\n    0x656d7367: emsg\n    0x68656963: heic\n    0x6865696d: heim\n    0x68656973: heis\n    0x68656978: heix\n    0x68656f69: heoi\n    0x68657663: hevc\n    0x68657664: hevd\n    0x68657669: hevi\n    0x6865766d: hevm\n    0x68657673: hevs\n    0x68657678: hevx\n    0x68766365: hvce\n    0x68766369: hvci\n    0x68766378: hvcx\n    0x68767469: hvti\n    0x69667364: ifsd\n    0x69666873: ifhs\n    0x69666864: ifhd\n    0x69666878: ifhx\n    0x69666868: ifhh\n    0x69666875: ifhu\n    0x69666872: ifhr\n    0x69666161: ifaa\n    0x69666173: ifas\n    0x69666168: ifah\n    0x69666169: ifai\n    0x69666175: ifau\n    0x69666176: ifav\n    0x6966726d: ifrm\n    0x696d3169: im1i\n    0x696d3174: im1t\n    0x696d3269: im2i\n    0x696d3274: im2t\n    0x69736332: isc2\n    0x69736f32: iso2\n    0x69736f33: iso3\n    0x69736f34: iso4\n    0x69736f35: iso5\n    0x69736f36: iso6\n    0x69736f37: iso7\n    0x69736f38: iso8\n    0x69736f39: iso9\n    0x69736f61: isoa\n    0x69736f62: isob\n    0x69736f63: isoc\n    0x69736f6d: isom\n    0x6a326b69: j2ki\n    0x6a326b73: j2ks\n    0x6a326973: j2is\n    0x4a325030: j2p0\n    0x4a325031: j2p1\n    0x6a703220: jp2\n    0x6a706567: jpeg\n    0x6a706773: jpgs\n    0x6a706d20: jpm\n    0x6a706f69: jpoi\n    0x6a707369: jpsi\n    0x6a707820: jpx\n    0x6a707862: jpxb\n    0x6a786c20: jxl\n    0x6a787320: jxs\n    0x6a787363: jxsc\n    0x6a787369: jxsi\n    0x6a787373: jxss\n    0x4c434147: lcag\n    0x6c687465: lhte\n    0x6c687469: lhti\n    0x6c6d7367: lmsg\n    0x4d344120: m4a\n    0x4d344220: m4b\n    0x4d345020: m4p\n    0x4d345620: m4v\n    0x4d413142: ma1b\n    0x4d413141: ma1a\n    0x4d46534d: mfsm\n    0x4d475356: mgsv\n    0x4d694142: miab\n    0x4d694143: miac\n    0x6d696166: miaf\n    0x4d69416e: mian\n    0x4d694275: mibu\n    0x4d69436d: micm\n    0x6d696631: mif1\n    0x4d694841: miha\n    0x4d694842: mihb\n    0x4d694845: mihe\n    0x4d695072: mipr\n    0x6d6a3273: mj2s\n    0x6d6a7032: mjp2\n    0x6d703231: mp21\n    0x6d703431: mp41\n    0x6d703432: mp42\n    0x6d703731: mp71\n    0x4d505049: mppi\n    0x6d707566: mpuf\n    0x6d736631: msf1\n    0x6d736468: msdh\n    0x6d736978: msix\n    0x4d534e56: msnv\n    0x6e696b6f: niko\n    0x6e6c736c: nlsl\n    0x6e726173: nras\n    0x6f613264: oa2d\n    0x6f61626c: oabl\n    0x6f646366: odcf\n    0x6f6d7070: ompp\n    0x6f706632: opf2\n    0x6f707832: opx2\n    0x6f766470: ovdp\n    0x6f766c79: ovly\n    0x70616666: paff\n    0x70616e61: pana\n    0x70696666: piff\n    0x706d6666: pmff\n    0x706e7669: pnvi\n    0x71742020: qt\n    0x72656c6f: relo\n    0x72697378: risx\n    0x524f5353: ross\n    0x73647620: sdv\n    0x53454155: seau\n    0x5345424b: sebk\n    0x73656e76: senv\n    0x73696d73: sims\n    0x73697378: sisx\n    0x73697469: siti\n    0x73697476: sitv\n    0x736c6831: slh1\n    0x736c6832: slh2\n    0x736c6833: slh3\n    0x73737373: ssss\n    0x74746d6c: ttml\n    0x74747776: ttwv\n    0x75687669: uhvi\n    0x756e6966: unif\n    0x75767675: uvvu\n    0x76336d70: v3mp\n    0x76336d74: v3mt\n    0x76336e74: v3nt\n    0x76337374: v3st\n    0x76766369: vvci\n    0x76766f69: vvoi\n    0x76777074: vwpt\n    0x58415643: xavc\n    0x79743420: yt4\n    0x63686432: chd2\n    0x63696e74: cint\n    0x636c6732: clg2\n    0x63756432: cud2\n    0x63756439: cud9\n    0x6d696632: mif2\n    0x70726564: pred\n"
  },
  {
    "id": "ksy_standard_midi_file",
    "name": "Standard MIDI file",
    "category": "Media",
    "metadata": {
      "isGenerated": true,
      "fileExtensions": [
        "mid",
        "midi",
        "smf"
      ],
      "description": "Standard MIDI file",
      "originalCategory": "media",
      "filePath": "media/standard_midi_file.ksy",
      "endian": "be"
    },
    "content": "meta:\n  id: standard_midi_file\n  title: Standard MIDI file\n  file-extension:\n    - mid\n    - midi\n    - smf\n  xref:\n    justsolve: MIDI\n    loc:\n      - fdd000102 # MIDI Sequence Data\n      - fdd000119 # Standard MIDI File\n    mime: audio/midi\n    pronom: x-fmt/230\n    wikidata: Q10610388\n  license: CC0-1.0\n  imports:\n    - /common/vlq_base128_be\n  endian: be\ndoc: |\n  Standard MIDI file, typically known just as \"MID\", is a standard way\n  to serialize series of MIDI events, which is a protocol used in many\n  music synthesizers to transfer music data: notes being played,\n  effects being applied, etc.\n\n  Internally, file consists of a header and series of tracks, every\n  track listing MIDI events with certain header designating time these\n  events are happening.\n\n  NOTE: Rarely, MIDI files employ certain stateful compression scheme\n  to avoid storing certain elements of further elements, instead\n  reusing them from events which happened earlier in the\n  stream. Kaitai Struct (as of v0.9) is currently unable to parse\n  these, but files employing this mechanism are relatively rare.\nseq:\n  - id: hdr\n    type: header\n  - id: tracks\n    type: track\n    repeat: expr\n    repeat-expr: hdr.num_tracks\ntypes:\n  header:\n    seq:\n      - id: magic\n        contents: \"MThd\"\n      - id: len_header\n        type: u4\n      - id: format\n        type: u2\n      - id: num_tracks\n        type: u2\n      - id: division\n        type: s2\n  track:\n    seq:\n      - id: magic\n        contents: \"MTrk\"\n      - id: len_events\n        type: u4\n      - id: events\n        type: track_events\n        size: len_events\n  track_events:\n    seq:\n      - id: event\n        type: track_event\n        repeat: eos\n  track_event:\n    seq:\n      - id: v_time\n        type: vlq_base128_be\n      - id: event_header\n        type: u1\n      - id: meta_event_body\n        type: meta_event_body\n        if: event_header == 0xff\n      - id: sysex_body\n        type: sysex_event_body\n        if: event_header == 0xf0\n      - id: event_body\n        type:\n          switch-on: event_type\n          cases:\n            0x80: note_off_event\n            0x90: note_on_event\n            0xa0: polyphonic_pressure_event\n            0xb0: controller_event\n            0xc0: program_change_event\n            0xd0: channel_pressure_event\n            0xe0: pitch_bend_event\n    instances:\n      event_type:\n        value: event_header & 0xf0\n      channel:\n        value: event_header & 0xf\n        if: event_type != 0xf0\n  meta_event_body:\n    seq:\n      - id: meta_type\n        type: u1\n        enum: meta_type_enum\n      - id: len\n        type: vlq_base128_be\n      - id: body\n        size: len.value\n    enums:\n      meta_type_enum:\n        0x00: sequence_number\n        0x01: text_event\n        0x02: copyright\n        0x03: sequence_track_name\n        0x04: instrument_name\n        0x05: lyric_text\n        0x06: marker_text\n        0x07: cue_point\n        0x20: midi_channel_prefix_assignment\n        0x2f: end_of_track\n        0x51: tempo\n        0x54: smpte_offset\n        0x58: time_signature\n        0x59: key_signature\n        0x7f: sequencer_specific_event\n  note_off_event:\n    seq:\n      - id: note\n        type: u1\n      - id: velocity\n        type: u1\n  note_on_event:\n    seq:\n      - id: note\n        type: u1\n      - id: velocity\n        type: u1\n  polyphonic_pressure_event:\n    seq:\n      - id: note\n        type: u1\n      - id: pressure\n        type: u1\n  controller_event:\n    seq:\n      - id: controller\n        type: u1\n      - id: value\n        type: u1\n  program_change_event:\n    seq:\n      - id: program\n        type: u1\n  channel_pressure_event:\n    seq:\n      - id: pressure\n        type: u1\n  pitch_bend_event:\n    seq:\n      - id: b1\n        type: u1\n      - id: b2\n        type: u1\n    instances:\n      bend_value:\n        value: (b2 << 7) + b1 - 0x4000\n      adj_bend_value:\n        value: bend_value - 0x4000\n  sysex_event_body:\n    seq:\n      - id: len\n        type: vlq_base128_be\n      - id: data\n        size: len.value\n"
  },
  {
    "id": "ksy_stl",
    "name": "Stl",
    "category": "Media",
    "metadata": {
      "isGenerated": true,
      "fileExtensions": [
        "stl"
      ],
      "description": "",
      "originalCategory": "media",
      "filePath": "media/stl.ksy",
      "endian": "le"
    },
    "content": "meta:\n  id: stl\n  application: 3D Systems Stereolithography\n  file-extension: stl\n  xref:\n    justsolve: STL\n    loc: fdd000505\n    pronom: fmt/865\n    wikidata: Q1238229\n  license: CC0-1.0\n  endian: le\ndoc: |\n  STL files are used to represent simple 3D models, defined using\n  triangular 3D faces.\n\n  Initially it was introduced as native format for 3D Systems\n  Stereolithography CAD system, but due to its extreme simplicity, it\n  was adopted by a wide range of 3D modelling, CAD, rapid prototyping\n  and 3D printing applications as the simplest 3D model exchange\n  format.\n\n  STL is extremely bare-bones format: there are no complex headers, no\n  texture / color support, no units specifications, no distinct vertex\n  arrays. Whole model is specified as a collection of triangular\n  faces.\n\n  There are two versions of the format (text and binary), this spec\n  describes binary version.\nseq:\n  - id: header\n    size: 80\n  - id: num_triangles\n    type: u4\n  - id: triangles\n    type: triangle\n    repeat: expr\n    repeat-expr: num_triangles\ntypes:\n  triangle:\n    doc: |\n      Each STL triangle is defined by its 3 points in 3D space and a\n      normal vector, which is generally used to determine where is\n      \"inside\" and \"outside\" of the model.\n    seq:\n      - id: normal\n        type: vec3d\n      - id: vertices\n        type: vec3d\n        repeat: expr\n        repeat-expr: 3\n      - id: abr\n        type: u2\n        doc: |\n          In theory (per standard), it's \"attribute byte count\" with\n          no other details given on what \"attribute\" is and what\n          should be stored in this field.\n\n          In practice, software dealing with STL either expected to\n          see 0 here, or uses this 16-bit field per se to store\n          additional attributes (such as RGB color of a vertex or\n          color index).\n  vec3d:\n    seq:\n      - id: x\n        type: f4\n      - id: y\n        type: f4\n      - id: z\n        type: f4\n"
  },
  {
    "id": "ksy_fasttracker_xm_module",
    "name": "Extended Module",
    "category": "Media",
    "metadata": {
      "isGenerated": true,
      "fileExtensions": [
        "xm"
      ],
      "description": "Extended Module",
      "originalCategory": "media",
      "filePath": "media/tracker_modules/fasttracker_xm_module.ksy",
      "endian": "le"
    },
    "content": "meta:\n  id: fasttracker_xm_module\n  title: Extended Module\n  application:\n    - FastTracker 2\n    - Protracker\n    - MilkyTracker\n    - libmodplug\n    - Mikmod\n  file-extension: xm\n  xref:\n    justsolve: Extended_Module\n    pronom: fmt/323\n    wikidata: Q376852\n  license: Unlicense\n  endian: le\n  encoding: utf-8\ndoc: |\n  XM (standing for eXtended Module) is a popular module music file\n  format, that was introduced in 1994 in FastTracker2 by Triton demo\n  group. Akin to MOD files, it bundles both digital samples\n  (instruments) and instructions on which note to play at what time\n  (patterns), which provides good audio quality with relatively small\n  file size. Audio is reproducible without relying on the sound of\n  particular hardware samplers or synths.\ndoc-ref: |\n  http://sid.ethz.ch/debian/milkytracker/milkytracker-0.90.85%2Bdfsg/resources/reference/xm-form.txt\n  ftp://ftp.modland.com/pub/documents/format_documentation/FastTracker%202%20v2.04%20(.xm).html\nseq:\n  - id: preheader\n    type: preheader\n  - id: header\n    size: preheader.header_size - 4\n    type: header\n  - id: patterns\n    type: pattern\n    repeat: expr\n    repeat-expr: header.num_patterns\n  - id: instruments\n    type: instrument\n    repeat: expr\n    repeat-expr: header.num_instruments\ntypes:\n  preheader:\n    seq:\n      - id: signature0\n        contents: 'Extended Module: '\n      - id: module_name\n        size: 20\n        type: strz\n        doc: Module name, padded with zeroes\n      - id: signature1\n        contents: [0x1a]\n      - id: tracker_name\n        size: 20\n        type: strz\n        doc: Tracker name\n      - id: version_number\n        type: version\n        doc: \"Format versions below [0x01, 0x04] have a LOT of differences. Check this field!\"\n      - id: header_size\n        type: u4\n        doc: Header size << Calculated FROM THIS OFFSET, not from the beginning of the file! >>\n    types:\n      version:\n        seq:\n          - id: minor\n            type: u1\n            doc: currently 0x04\n          - id: major\n            type: u1\n            doc: currently 0x01\n        instances:\n          value:\n            value: (major<<8) | minor\n  header:\n    seq:\n      - id: song_length\n        type: u2\n        doc: Song length (in pattern order table)\n      - id: restart_position\n        type: u2\n      - id: num_channels\n        type: u2\n        doc: \"(2,4,6,8,10,...,32)\"\n      - id: num_patterns\n        type: u2\n        doc: \"(max 256)\"\n      - id: num_instruments\n        type: u2\n        doc: \"(max 128)\"\n      - id: flags\n        type: flags\n      - id: default_tempo\n        type: u2\n      - id: default_bpm\n        type: u2\n      - id: pattern_order_table\n        type: u1\n        doc: \"max 256\"\n        repeat: expr\n        #repeat-expr: song_length\n        repeat-expr: 256\n  flags:\n    seq:\n      - id: reserved\n        type: b15\n      - id: freq_table_type\n        type: b1\n        doc: \"0 = Amiga frequency table (see below); 1 = Linear frequency table\"\n  pattern:\n    seq:\n      - id: header\n        type: header\n      - id: packed_data\n        size: header.main.len_packed_pattern\n    types:\n      header:\n        seq:\n          - id: header_length\n            type: u4\n            doc: Pattern header length\n          - id: main\n            type: header_main\n            size: header_length - 4\n        types:\n          header_main:\n            seq:\n                - id: packing_type\n                  type: u1\n                  doc: Packing type (always 0)\n                - id: num_rows_raw\n                  type:\n                    switch-on: _root.preheader.version_number.value\n                    cases:\n                      0x0102: u1\n                      _: u2\n                  doc: Number of rows in pattern (1..256)\n                - id: len_packed_pattern\n                  type: u2\n                  doc: Packed pattern data size\n            instances:\n              num_rows:\n                value: 'num_rows_raw + (_root.preheader.version_number.value == 0x0102 ? 1 : 0)'\n  instrument:\n    doc: |\n      XM's notion of \"instrument\" typically constitutes of a\n      instrument metadata and one or several samples. Metadata\n      includes:\n\n      * instrument's name\n      * instruction of which sample to use for which note\n      * volume and panning envelopes and looping instructions\n      * vibrato settings\n    seq:\n      - id: header_size\n        type: u4\n        doc: |\n          Instrument size << header that is >>\n          << \"Instrument Size\" field tends to be more than the actual size of the structure documented here (it includes also the extended instrument sample header above). So remember to check it and skip the additional bytes before the first sample header >>\n      - id: header\n        size: header_size - 4\n        type: header\n      - id: samples_headers\n        type: sample_header\n        repeat: expr\n        repeat-expr: header.num_samples\n      - id: samples\n        type: samples_data(samples_headers[_index])\n        repeat: expr\n        repeat-expr: header.num_samples\n    types:\n      header:\n        seq:\n          - id: name\n            size: 22\n            type: strz\n          - id: type\n            type: u1\n            doc: Usually zero, but this seems pretty random, don't assume it's zero\n          - id: num_samples\n            type: u2\n          - id: extra_header\n            type: extra_header\n            if: num_samples > 0\n      extra_header:\n        seq:\n          - id: len_sample_header\n            type: u4\n          - id: idx_sample_per_note\n            type: u1\n            repeat: expr\n            repeat-expr: 96\n            doc: |\n              Index of sample that should be used for any particular\n              note. In the simplest case, where it's only one sample\n              is available, it's an array of full of zeroes.\n          - id: volume_points\n            type: envelope_point\n            repeat: expr\n            repeat-expr: 12\n            doc: Points for volume envelope. Only `num_volume_points` will be actually used.\n          - id: panning_points\n            type: envelope_point\n            repeat: expr\n            repeat-expr: 12\n            doc: Points for panning envelope. Only `num_panning_points` will be actually used.\n          - id: num_volume_points\n            type: u1\n          - id: num_panning_points\n            type: u1\n\n          - id: volume_sustain_point\n            type: u1\n          - id: volume_loop_start_point\n            type: u1\n          - id: volume_loop_end_point\n            type: u1\n\n          - id: panning_sustain_point\n            type: u1\n          - id: panning_loop_start_point\n            type: u1\n          - id: panning_loop_end_point\n            type: u1\n\n          - id: volume_type\n            type: u1\n            enum: type\n          - id: panning_type\n            type: u1\n            enum: type\n\n          - id: vibrato_type\n            type: u1\n          - id: vibrato_sweep\n            type: u1\n          - id: vibrato_depth\n            type: u1\n          - id: vibrato_rate\n            type: u1\n          - id: volume_fadeout\n            type: u2\n          - id: reserved\n            type: u2\n        types:\n          envelope_point:\n            doc: |\n              Envelope frame-counters work in range 0..FFFFh (0..65535 dec).\n              BUT! FT2 only itself supports only range 0..FFh (0..255 dec).\n              Some other trackers (like SoundTracker for Unix), however, can use the full range 0..FFFF, so it should be supported.\n              !!TIP: This is also a good way to detect if the module has been made with FT2 or not. (In case the tracker name is brain- deadly left unchanged!)\n              Of course it does not help if all instruments have the values inside FT2 supported range.\n              The value-field of the envelope point is ranged between 00..3Fh (0..64 dec).\n            seq:\n              - id: x\n                type: u2\n                doc: Frame number of the point\n              - id: y\n                type: u2\n                doc: Value of the point\n        enums:\n          type:\n            0: on\n            1: sustain\n            2: loop\n      samples_data:\n        doc: |\n          The saved data uses simple delta-encoding to achieve better compression ratios (when compressed with pkzip, etc.)\n          Pseudocode for converting the delta-coded data to normal data,\n          old = 0;\n          for i in range(data_len):\n            new = sample[i] + old;\n            sample[i] = new;\n            old = new;\n        params:\n          - id: header\n            type: sample_header\n        seq:\n          - id: data\n            size: 'header.sample_length * (header.type.is_sample_data_16_bit ? 2 : 1)'\n      sample_header:\n        seq:\n          - id: sample_length\n            type: u4\n          - id: sample_loop_start\n            type: u4\n          - id: sample_loop_length\n            type: u4\n\n          - id: volume\n            type: u1\n          - id: fine_tune\n            type: s1\n            doc: -16..+15\n          - id: type\n            type: loop_type\n          - id: panning\n            type: u1\n            doc: (0-255)\n          - id: relative_note_number\n            type: s1\n          - id: reserved\n            type: u1\n          - id: name\n            size: 22\n            type: strz\n        types:\n          loop_type:\n            seq:\n              - id: reserved0\n                type: b3\n              - id: is_sample_data_16_bit\n                type: b1\n              - id: reserved1\n                type: b2\n              - id: loop_type\n                type: b2\n                enum: loop_type\n            enums:\n              loop_type:\n                0: none\n                1: forward\n                2: ping_pong\n"
  },
  {
    "id": "ksy_s3m",
    "name": "Scream Tracker 3 module",
    "category": "Media",
    "metadata": {
      "isGenerated": true,
      "fileExtensions": [
        "s3m"
      ],
      "description": "Scream Tracker 3 module",
      "originalCategory": "media",
      "filePath": "media/tracker_modules/s3m.ksy",
      "signature": {
        "offset": 0,
        "bytes": [
          26
        ]
      },
      "endian": "le"
    },
    "content": "meta:\n  id: s3m\n  title: Scream Tracker 3 module\n  file-extension: s3m\n  xref:\n    justsolve: Scream_Tracker_3_module\n    pronom: fmt/718\n    wikidata: Q1461901\n  license: CC0-1.0\n  endian: le\ndoc: |\n  Scream Tracker 3 module is a tracker music file format that, as all\n  tracker music, bundles both sound samples and instructions on which\n  notes to play. It originates from a Scream Tracker 3 music editor\n  (1994) by Future Crew, derived from original Scream Tracker 2 (.stm)\n  module format.\n\n  Instrument descriptions in S3M format allow to use either digital\n  samples or setup and control AdLib (OPL2) synth.\n\n  Music is organized in so called `patterns`. \"Pattern\" is a generally\n  a 64-row long table, which instructs which notes to play on which\n  time measure. \"Patterns\" are played one-by-one in a sequence\n  determined by `orders`, which is essentially an array of pattern IDs\n  - this way it's possible to reuse certain patterns more than once\n  for repetitive musical phrases.\ndoc-ref: http://hackipedia.org/browse.cgi/File%20formats/Music%20tracker/S3M%2c%20ScreamTracker%203/Scream%20Tracker%203.20%20by%20Future%20Crew.txt\nseq:\n  - id: song_name\n    size: 28\n    terminator: 0\n  - id: magic1\n    contents: [0x1a]\n  - id: file_type\n    -orig-id: Typ\n    type: u1\n  - id: reserved1\n    size: 2\n  - id: num_orders\n    -orig-id: OrdNum\n    type: u2\n    doc: Number of orders in a song\n  - id: num_instruments\n    -orig-id: InsNum\n    type: u2\n    doc: Number of instruments in a song\n  - id: num_patterns\n    -orig-id: PatNum\n    type: u2\n    doc: Number of patterns in a song\n  - id: flags\n    -orig-id: Flags\n    type: u2\n  - id: version\n    -orig-id: Cwt/v\n    type: u2\n    doc: Scream Tracker version that was used to save this file\n  - id: samples_format\n    -orig-id: Ffi\n    type: u2\n    doc: '1 = signed samples, 2 = unsigned samples'\n  - id: magic2\n    contents: 'SCRM'\n  - id: global_volume\n    -orig-id: g.v\n    type: u1\n  - id: initial_speed\n    -orig-id: i.s\n    type: u1\n  - id: initial_tempo\n    -orig-id: i.t\n    type: u1\n  - id: is_stereo\n    type: b1\n  - id: master_volume\n    -orig-id: m.v\n    type: b7\n  - id: ultra_click_removal\n    -orig-id: u.c\n    type: u1\n  - id: has_custom_pan\n    -orig-id: d.p\n    type: u1\n  - id: reserved2\n    size: 8\n  - id: ofs_special\n    -orig-id: Special\n    type: u2\n    doc: Offset of special data, not used by Scream Tracker directly.\n  - id: channels\n    type: channel\n    repeat: expr\n    repeat-expr: 32\n  - id: orders\n    size: num_orders\n  - id: instruments\n    type: instrument_ptr\n    repeat: expr\n    repeat-expr: num_instruments\n  - id: patterns\n    type: pattern_ptr\n    repeat: expr\n    repeat-expr: num_patterns\n  - id: channel_pans\n    type: channel_pan\n    repeat: expr\n    repeat-expr: 32\n    if: has_custom_pan == 252\ntypes:\n  channel:\n    seq:\n      - id: is_disabled\n        type: b1\n      - id: ch_type\n        type: b7\n        doc: Channel type (0..7 = left sample channels, 8..15 = right sample channels, 16..31 = AdLib synth channels)\n  instrument_ptr:\n    seq:\n      - id: paraptr\n        type: u2\n    instances:\n      body:\n        pos: paraptr * 0x10\n        type: instrument\n  instrument:\n    seq:\n      - id: type\n        type: u1\n        enum: inst_types\n      - id: filename\n        terminator: 0\n        size: 12\n      - id: body\n        type:\n          switch-on: type\n          cases:\n            'inst_types::sample': sampled\n            _: adlib\n      - id: tuning_hz\n        type: u4\n      - id: reserved2\n        size: 12\n      - id: sample_name\n        size: 28\n        terminator: 0\n      - id: magic\n        contents: 'SCRS'\n    enums:\n      inst_types:\n        1: sample\n        2: melodic\n        3: bass_drum\n        4: snare_drum\n        5: tom\n        6: cymbal\n        7: hihat\n    types:\n      sampled:\n        seq:\n          - id: paraptr_sample\n            -orig-id: MemSeg\n            type: swapped_u3\n          - id: len_sample\n            -orig-id: Length\n            type: u4\n          - id: loop_begin\n            -orig-id: LoopBeg\n            type: u4\n          - id: loop_end\n            -orig-id: LoopEnd\n            type: u4\n          - id: default_volume\n            -orig-id: Vol\n            type: u1\n            doc: Default volume\n          - id: reserved1\n            type: u1\n          - id: is_packed\n            -orig-id: '[P]'\n            type: u1\n            doc: 0 = unpacked, 1 = DP30ADPCM packing\n          - id: flags\n            -orig-id: '[F]'\n            type: u1\n        instances:\n          sample:\n            pos: paraptr_sample.value * 0x10\n            size: len_sample\n      adlib:\n        # TODO\n        seq:\n          - id: reserved1\n            contents: [0, 0, 0]\n          - size: 16\n  pattern_ptr:\n    seq:\n      - id: paraptr\n        type: u2\n    instances:\n      body:\n        pos: paraptr * 0x10\n        type: pattern\n  pattern:\n    seq:\n      - id: size\n        type: u2\n      - id: body\n        size: size - 2\n        type: pattern_cells\n  pattern_cells:\n    seq:\n      - id: cells\n        type: pattern_cell\n        repeat: eos\n  pattern_cell:\n    seq:\n      - id: has_fx\n        type: b1\n      - id: has_volume\n        type: b1\n      - id: has_note_and_instrument\n        type: b1\n      - id: channel_num\n        type: b5\n      - id: note\n        type: u1\n        if: has_note_and_instrument\n      - id: instrument\n        type: u1\n        if: has_note_and_instrument\n      - id: volume\n        type: u1\n        if: has_volume\n      - id: fx_type\n        type: u1\n        if: has_fx\n      - id: fx_value\n        type: u1\n        if: has_fx\n  swapped_u3:\n    doc: Custom 3-byte integer, stored in mixed endian manner.\n    seq:\n      - id: hi\n        type: u1\n      - id: lo\n        type: u2\n    instances:\n      value:\n        value: lo | (hi << 16)\n  channel_pan:\n    seq:\n      - id: reserved1\n        type: b2\n      - id: has_custom_pan\n        type: b1\n        doc: |\n          If true, then use a custom pan setting provided in the `pan`\n          field. If false, the channel would use the default setting\n          (0x7 for mono, 0x3 or 0xc for stereo).\n      - id: reserved2\n        type: b1\n      - id: pan\n        type: b4\n"
  },
  {
    "id": "ksy_vp8_duck_ivf",
    "name": "Duck IVF (container format for VP8)",
    "category": "Media",
    "metadata": {
      "isGenerated": true,
      "fileExtensions": [
        "ivf"
      ],
      "description": "Duck IVF (container format for VP8)",
      "originalCategory": "media",
      "filePath": "media/vp8_duck_ivf.ksy",
      "signature": {
        "offset": 0,
        "bytes": [
          68,
          75,
          73,
          70
        ]
      },
      "endian": "le"
    },
    "content": "meta:\n  id: vp8_duck_ivf\n  title: Duck IVF (container format for VP8)\n  file-extension: ivf\n  xref:\n    justsolve: VP8\n    loc: fdd000578\n    wikidata: Q1063970\n  license: CC0-1.0\n  ks-version: 0.7\n  endian: le\ndoc: |\n  Duck IVF is a simple container format for raw VP8 data, which is an open and\n  royalty-free video compression format, currently developed by Google.\n\n  Test .ivf files are available at\n  <https://chromium.googlesource.com/webm/vp8-test-vectors>\ndoc-ref: https://wiki.multimedia.cx/index.php/Duck_IVF\nseq:\n## header start\n  - id: magic1\n    contents: DKIF\n    doc: Magic Number of IVF Files\n  - id: version\n    type: u2\n    doc: This should be 0\n  - id: len_header\n    type: u2\n    doc: Normally the header length is 32 byte\n  - id: codec\n    contents: VP80\n    doc: Name of the codec e.g. 'VP80' for VP8\n  - id: width\n    type: u2\n    doc: The (initial) width of the video, every keyframe may change the resolution\n  - id: height\n    type: u2\n    doc: The (initial) height of the video, every keyframe may change the resolution\n  - id: framerate\n    type: u4\n    doc: the (framerate * timescale) e.g. for 30 fps -> 30000\n  - id: timescale\n    type: u4\n    doc: the timescale is a divider of the seconds (VPX is integer math only) mostly 1000\n  - id: num_frames\n    type: u4\n    doc: the number of frames (if not a camera stream)\n  - id: unused\n    type: u4\n## header end\n\n## payload start\n  - id: image_data\n    type: blocks\n    repeat: expr\n    repeat-expr: num_frames\n## payload end\n\n## type definitions\ntypes:\n  blocks:\n    seq:\n      - id: entries\n        type: block\n  block:\n    seq:\n      - id: len_frame\n        doc: size of the frame data\n        type: u4\n      - id: timestamp\n        type: u8\n      - id: framedata\n        size: len_frame\n"
  },
  {
    "id": "ksy_wav",
    "name": "Microsoft WAVE audio file",
    "category": "Media",
    "metadata": {
      "isGenerated": true,
      "fileExtensions": [
        "wav",
        "bwf"
      ],
      "description": "Microsoft WAVE audio file",
      "originalCategory": "media",
      "filePath": "media/wav.ksy",
      "endian": "le"
    },
    "content": "meta:\n  id: wav\n  title: Microsoft WAVE audio file\n  file-extension:\n    - wav\n    - bwf\n  xref:\n    justsolve:\n      - WAV\n      - BWF\n    loc:\n      - fdd000001 # WAV\n      - fdd000002 # WAV PCM\n      - fdd000356 # BWF v1\n      - fdd000003 # BWF v1 PCM\n      - fdd000357 # BWF v2\n      - fdd000359 # BWF v2 PCM\n    mime:\n      - audio/vnd.wave\n      - audio/wav\n      - audio/wave\n      - audio/x-wav\n    pronom:\n      - fmt/6 # WAV\n      - fmt/141 # WAV PCM\n      - fmt/142 # WAV non-PCM but not extensible\n      - fmt/143 # WAV extensible\n\n      # see <http://fileformats.archiveteam.org/wiki/BWF>\n      - fmt/1 # BWF v0\n      - fmt/703 # BWF v0 PCM\n      - fmt/706 # BWF v0 MPEG\n      - fmt/709 # BWF v0 extensible\n\n      - fmt/2 # BWF v1\n      - fmt/704 # BWF v1 PCM\n      - fmt/707 # BWF v1 MPEG\n      - fmt/710 # BWF v1 extensible\n\n      - fmt/527 # BWF v2\n      - fmt/705 # BWF v2 PCM\n      - fmt/708 # BWF v2 MPEG\n      - fmt/711 # BWF v2 extensible\n    rfc: 2361\n    wikidata:\n      - Q217570 # WAV\n      - Q922446 # BWF\n  tags:\n    - windows\n  license: BSD-3-Clause-Attribution\n  imports:\n    - /common/riff\n  encoding: ASCII\n  endian: le\ndoc: |\n  The WAVE file format is a subset of Microsoft's RIFF specification for the\n  storage of multimedia files. A RIFF file starts out with a file header\n  followed by a sequence of data chunks. A WAVE file is often just a RIFF\n  file with a single \"WAVE\" chunk which consists of two sub-chunks --\n  a \"fmt \" chunk specifying the data format and a \"data\" chunk containing\n  the actual sample data, although other chunks exist and are used.\n\n  An extension of the file format is the Broadcast Wave Format (BWF) for radio\n  broadcasts. Sample files can be found at:\n\n  <https://www.bbc.co.uk/rd/publications/saqas>\n\n  This Kaitai implementation was written by John Byrd of Gigantic Software\n  (jbyrd@giganticsoftware.com), and it is likely to contain bugs.\ndoc-ref:\n  - http://soundfile.sapp.org/doc/WaveFormat/\n  - https://www.mmsp.ece.mcgill.ca/Documents/AudioFormats/WAVE/WAVE.html\n  - https://web.archive.org/web/20101031101749/http://www.ebu.ch/fr/technical/publications/userguides/bwf_user_guide.php\nseq:\n  - id: chunk\n    type: 'riff::chunk'\ninstances:\n  chunk_id:\n    value: chunk.id\n    enum: fourcc\n  is_riff_chunk:\n    value: 'chunk_id == fourcc::riff'\n  parent_chunk_data:\n    io: chunk.data_slot._io\n    pos: 0\n    type: 'riff::parent_chunk_data'\n    if: is_riff_chunk\n  form_type:\n    value: parent_chunk_data.form_type\n    enum: fourcc\n  is_form_type_wave:\n    value: 'is_riff_chunk and form_type == fourcc::wave'\n  subchunks:\n    io: parent_chunk_data.subchunks_slot._io\n    pos: 0\n    type: chunk_type\n    repeat: eos\n    if: is_form_type_wave\ntypes:\n  chunk_type:\n    seq:\n      - id: chunk\n        type: 'riff::chunk'\n    instances:\n      chunk_id:\n        value: chunk.id\n        enum: fourcc\n      chunk_data:\n        io: chunk.data_slot._io\n        pos: 0\n        type:\n          switch-on: chunk_id\n          cases:\n            'fourcc::fmt': format_chunk_type\n            'fourcc::cue': cue_chunk_type\n            'fourcc::data': data_chunk_type\n            'fourcc::list': list_chunk_type\n            'fourcc::fact': fact_chunk_type\n            'fourcc::pmx': pmx_chunk_type\n            'fourcc::ixml': ixml_chunk_type\n            'fourcc::bext': bext_chunk_type\n            'fourcc::axml': axml_chunk_type\n            'fourcc::afsp': afsp_chunk_type\n\n  list_chunk_type:\n    seq:\n      - id: parent_chunk_data\n        type: 'riff::parent_chunk_data'\n    instances:\n      form_type:\n        value: parent_chunk_data.form_type\n        enum: fourcc\n      subchunks:\n        io: parent_chunk_data.subchunks_slot._io\n        pos: 0\n        type:\n          switch-on: form_type\n          cases:\n            'fourcc::info': info_chunk_type\n        repeat: eos\n\n  info_chunk_type:\n    seq:\n      - id: chunk\n        type: 'riff::chunk'\n    instances:\n      chunk_data:\n        io: chunk.data_slot._io\n        pos: 0\n        type: strz\n\n  bext_chunk_type:\n    doc-ref: https://en.wikipedia.org/wiki/Broadcast_Wave_Format\n    seq:\n      - id: description\n        size: 256\n        type: strz\n      - id: originator\n        size: 32\n        type: strz\n      - id: originator_reference\n        size: 32\n        type: strz\n      - id: origination_date\n        size: 10\n        type: str\n      - id: origination_time\n        size: 8\n        type: str\n      - id: time_reference_low\n        type: u4\n      - id: time_reference_high\n        type: u4\n      - id: version\n        type: u2\n      - id: umid\n        size: 64\n      - id: loudness_value\n        type: u2\n      - id: loudness_range\n        type: u2\n      - id: max_true_peak_level\n        type: u2\n      - id: max_momentary_loudness\n        type: u2\n      - id: max_short_term_loudness\n        type: u2\n\n  axml_chunk_type:\n    doc-ref: https://tech.ebu.ch/docs/tech/tech3285s5.pdf\n    seq:\n      - id: data\n        size-eos: true\n        type: str\n        encoding: UTF-8\n\n  ixml_chunk_type:\n    doc-ref: https://en.wikipedia.org/wiki/IXML\n    seq:\n      - id: data\n        size-eos: true\n        type: str\n        encoding: UTF-8\n\n  cue_chunk_type:\n    seq:\n      - id: dw_cue_points\n        type: u4\n      - id: cue_points\n        type: cue_point_type\n        repeat: expr\n        repeat-expr: dw_cue_points\n\n  cue_point_type:\n    seq:\n      - id: dw_name\n        type: u4\n      - id: dw_position\n        type: u4\n      - id: fcc_chunk\n        type: u4\n      - id: dw_chunk_start\n        type: u4\n      - id: dw_block_start\n        type: u4\n      - id: dw_sample_offset\n        type: u4\n\n  data_chunk_type:\n    seq:\n      - id: data\n        size-eos: true\n\n  fact_chunk_type:\n    doc: |\n      required for all non-PCM formats\n      (`w_format_tag != w_format_tag_type::pcm` or `not is_basic_pcm` in\n      `format_chunk_type` context)\n    seq:\n      - id: num_samples_per_channel\n        -orig-id: dwSampleLength\n        type: u4\n\n  format_chunk_type:\n    seq:\n      - id: w_format_tag\n        type: u2\n        enum: w_format_tag_type\n      - id: n_channels\n        type: u2\n      - id: n_samples_per_sec\n        type: u4\n      - id: n_avg_bytes_per_sec\n        type: u4\n      - id: n_block_align\n        type: u2\n      - id: w_bits_per_sample\n        type: u2\n      - id: cb_size\n        type: u2\n        if: not is_basic_pcm\n      - id: w_valid_bits_per_sample\n        type: u2\n        if: is_cb_size_meaningful\n      - id: channel_mask_and_subformat\n        type: channel_mask_and_subformat_type\n        if: is_extensible\n    instances:\n      is_extensible:\n        value: w_format_tag == w_format_tag_type::extensible\n      is_basic_pcm:\n        value: w_format_tag == w_format_tag_type::pcm\n      is_basic_float:\n        value: w_format_tag == w_format_tag_type::ieee_float\n      is_cb_size_meaningful:\n        value: not is_basic_pcm and cb_size != 0\n\n  channel_mask_and_subformat_type:\n    seq:\n      - id: dw_channel_mask\n        type: channel_mask_type\n      - id: subformat\n        type: guid_type\n\n  channel_mask_type:\n    seq:\n      - id: front_right_of_center\n        type: b1\n      - id: front_left_of_center\n        type: b1\n      - id: back_right\n        type: b1\n      - id: back_left\n        type: b1\n\n      - id: low_frequency\n        type: b1\n      - id: front_center\n        type: b1\n      - id: front_right\n        type: b1\n      - id: front_left\n        type: b1\n\n      - id: top_center\n        type: b1\n      - id: side_right\n        type: b1\n      - id: side_left\n        type: b1\n      - id: back_center\n        type: b1\n\n      - id: top_back_left\n        type: b1\n      - id: top_front_right\n        type: b1\n      - id: top_front_center\n        type: b1\n      - id: top_front_left\n        type: b1\n\n      - id: unused1\n        type: b6\n\n      - id: top_back_right\n        type: b1\n      - id: top_back_center\n        type: b1\n\n      - id: unused2\n        type: b8\n\n  guid_type:\n    seq:\n      - id: data1\n        type: u4\n      - id: data2\n        type: u2\n      - id: data3\n        type: u2\n      - id: data4\n        type: u4be\n      - id: data4a\n        type: u4be\n\n  samples_type:\n    seq:\n      - id: samples\n        type: u4\n\n  sample_type:\n    seq:\n      - id: sample\n        type: u2\n\n  pmx_chunk_type:\n    seq:\n      - id: data\n        size-eos: true\n        type: str\n        encoding: UTF-8\n        doc: XMP data\n        doc-ref: https://github.com/adobe/XMP-Toolkit-SDK/blob/v2022.06/docs/XMPSpecificationPart3.pdf\n\n  afsp_chunk_type:\n    doc-ref: https://www.mmsp.ece.mcgill.ca/Documents/Downloads/AFsp/\n    seq:\n      - id: magic\n        contents: \"AFsp\"\n      - id: info_records\n        type: strz\n        # The AFsp package uses C strings, so the encoding isn't strictly\n        # defined. Therefore, it seems reasonable to assume ASCII.\n        encoding: ASCII\n        repeat: eos\n        doc: |\n          An array of AFsp information records, in the `<field_name>: <value>`\n          format (e.g. \"`program: CopyAudio`\"). The list of existing information\n          record types are available in the `doc-ref` links.\n        doc-ref:\n          - https://www.mmsp.ece.mcgill.ca/Documents/Software/Packages/AFsp/libtsp/AF/AFsetInfo.html\n          - https://www.mmsp.ece.mcgill.ca/Documents/Software/Packages/AFsp/libtsp/AF/AFprintInfoRecs.html\n\nenums:\n  w_format_tag_type:\n    0x0000: unknown\n    0x0001: pcm\n    0x0002: adpcm\n    0x0003: ieee_float\n    0x0004: vselp\n    0x0005: ibm_cvsd\n    0x0006: alaw\n    0x0007: mulaw\n    0x0008: dts\n    0x0009: drm\n    0x000a: wmavoice9\n    0x000b: wmavoice10\n    0x0010: oki_adpcm\n    0x0011: dvi_adpcm\n    0x0012: mediaspace_adpcm\n    0x0013: sierra_adpcm\n    0x0014: g723_adpcm\n    0x0015: digistd\n    0x0016: digifix\n    0x0017: dialogic_oki_adpcm\n    0x0018: mediavision_adpcm\n    0x0019: cu_codec\n    0x001a: hp_dyn_voice\n    0x0020: yamaha_adpcm\n    0x0021: sonarc\n    0x0022: dspgroup_truespeech\n    0x0023: echosc1\n    0x0024: audiofile_af36\n    0x0025: aptx\n    0x0026: audiofile_af10\n    0x0027: prosody_1612\n    0x0028: lrc\n    0x0030: dolby_ac2\n    0x0031: gsm610\n    0x0032: msnaudio\n    0x0033: antex_adpcme\n    0x0034: control_res_vqlpc\n    0x0035: digireal\n    0x0036: digiadpcm\n    0x0037: control_res_cr10\n    0x0038: nms_vbxadpcm\n    0x0039: cs_imaadpcm\n    0x003a: echosc3\n    0x003b: rockwell_adpcm\n    0x003c: rockwell_digitalk\n    0x003d: xebec\n    0x0040: g721_adpcm\n    0x0041: g728_celp\n    0x0042: msg723\n    0x0043: intel_g723_1\n    0x0044: intel_g729\n    0x0045: sharp_g726\n    0x0050: mpeg\n    0x0052: rt24\n    0x0053: pac\n    0x0055: mpeglayer3\n    0x0059: lucent_g723\n    0x0060: cirrus\n    0x0061: espcm\n    0x0062: voxware\n    0x0063: canopus_atrac\n    0x0064: g726_adpcm\n    0x0065: g722_adpcm\n    0x0066: dsat\n    0x0067: dsat_display\n    0x0069: voxware_byte_aligned\n    0x0070: voxware_ac8\n    0x0071: voxware_ac10\n    0x0072: voxware_ac16\n    0x0073: voxware_ac20\n    0x0074: voxware_rt24\n    0x0075: voxware_rt29\n    0x0076: voxware_rt29hw\n    0x0077: voxware_vr12\n    0x0078: voxware_vr18\n    0x0079: voxware_tq40\n    0x007a: voxware_sc3\n    0x007b: voxware_sc3_1\n    0x0080: softsound\n    0x0081: voxware_tq60\n    0x0082: msrt24\n    0x0083: g729a\n    0x0084: mvi_mvi2\n    0x0085: df_g726\n    0x0086: df_gsm610\n    0x0088: isiaudio\n    0x0089: onlive\n    0x008a: multitude_ft_sx20\n    0x008b: infocom_its_g721_adpcm\n    0x008c: convedia_g729\n    0x008d: congruency\n    0x0091: sbc24\n    0x0092: dolby_ac3_spdif\n    0x0093: mediasonic_g723\n    0x0094: prosody_8kbps\n    0x0097: zyxel_adpcm\n    0x0098: philips_lpcbb\n    0x0099: packed\n    0x00a0: malden_phonytalk\n    0x00a1: racal_recorder_gsm\n    0x00a2: racal_recorder_g720_a\n    0x00a3: racal_recorder_g723_1\n    0x00a4: racal_recorder_tetra_acelp\n    0x00b0: nec_aac\n    0x00ff: raw_aac1\n    0x0100: rhetorex_adpcm\n    0x0101: irat\n    0x0111: vivo_g723\n    0x0112: vivo_siren\n    0x0120: philips_celp\n    0x0121: philips_grundig\n    0x0123: digital_g723\n    0x0125: sanyo_ld_adpcm\n    0x0130: siprolab_aceplnet\n    0x0131: siprolab_acelp4800\n    0x0132: siprolab_acelp8v3\n    0x0133: siprolab_g729\n    0x0134: siprolab_g729a\n    0x0135: siprolab_kelvin\n    0x0136: voiceage_amr\n    0x0140: g726adpcm\n    0x0141: dictaphone_celp68\n    0x0142: dictaphone_celp54\n    0x0150: qualcomm_purevoice\n    0x0151: qualcomm_halfrate\n    0x0155: tubgsm\n    0x0160: msaudio1\n    0x0161: wmaudio2\n    0x0162: wmaudio3\n    0x0163: wmaudio_lossless\n    0x0164: wmaspdif\n    0x0170: unisys_nap_adpcm\n    0x0171: unisys_nap_ulaw\n    0x0172: unisys_nap_alaw\n    0x0173: unisys_nap_16k\n    0x0174: sycom_acm_syc008\n    0x0175: sycom_acm_syc701_g726l\n    0x0176: sycom_acm_syc701_celp54\n    0x0177: sycom_acm_syc701_celp68\n    0x0178: knowledge_adventure_adpcm\n    0x0180: fraunhofer_iis_mpeg2_aac\n    0x0190: dts_ds\n    0x0200: creative_adpcm\n    0x0202: creative_fastspeech8\n    0x0203: creative_fastspeech10\n    0x0210: uher_adpcm\n    0x0215: ulead_dv_audio\n    0x0216: ulead_dv_audio_1\n    0x0220: quarterdeck\n    0x0230: ilink_vc\n    0x0240: raw_sport\n    0x0241: esst_ac3\n    0x0249: generic_passthru\n    0x0250: ipi_hsx\n    0x0251: ipi_rpelp\n    0x0260: cs2\n    0x0270: sony_scx\n    0x0271: sony_scy\n    0x0272: sony_atrac3\n    0x0273: sony_spc\n    0x0280: telum_audio\n    0x0281: telum_ia_audio\n    0x0285: norcom_voice_systems_adpcm\n    0x0300: fm_towns_snd\n    0x0350: micronas\n    0x0351: micronas_celp833\n    0x0400: btv_digital\n    0x0401: intel_music_coder\n    0x0402: indeo_audio\n    0x0450: qdesign_music\n    0x0500: on2_vp7_audio\n    0x0501: on2_vp6_audio\n    0x0680: vme_vmpcm\n    0x0681: tpc\n    0x08ae: lightwave_lossless\n    0x1000: oligsm\n    0x1001: oliadpcm\n    0x1002: olicelp\n    0x1003: olisbc\n    0x1004: oliopr\n    0x1100: lh_codec\n    0x1101: lh_codec_celp\n    0x1102: lh_codec_sbc8\n    0x1103: lh_codec_sbc12\n    0x1104: lh_codec_sbc16\n    0x1400: norris\n    0x1401: isiaudio_2\n    0x1500: soundspace_musicompress\n    0x1600: mpeg_adts_aac\n    0x1601: mpeg_raw_aac\n    0x1602: mpeg_loas\n    0x1608: nokia_mpeg_adts_aac\n    0x1609: nokia_mpeg_raw_aac\n    0x160a: vodafone_mpeg_adts_aac\n    0x160b: vodafone_mpeg_raw_aac\n    0x1610: mpeg_heaac\n    0x181c: voxware_rt24_speech\n    0x1971: sonicfoundry_lossless\n    0x1979: innings_telecom_adpcm\n    0x1c07: lucent_sx8300p\n    0x1c0c: lucent_sx5363s\n    0x1f03: cuseeme\n    0x1fc4: ntcsoft_alf2cm_acm\n    0x2000: dvm\n    0x2001: dts2\n    0x3313: makeavis\n    0x4143: divio_mpeg4_aac\n    0x4201: nokia_adaptive_multirate\n    0x4243: divio_g726\n    0x434c: lead_speech\n    0x564c: lead_vorbis\n    0x5756: wavpack_audio\n    0x674f: ogg_vorbis_mode_1\n    0x6750: ogg_vorbis_mode_2\n    0x6751: ogg_vorbis_mode_3\n    0x676f: ogg_vorbis_mode_1_plus\n    0x6770: ogg_vorbis_mode_2_plus\n    0x6771: ogg_vorbis_mode_3_plus\n    0x7000: threecom_nbx\n    0x706d: faad_aac\n    0x7361: amr_nb\n    0x7362: amr_wb\n    0x7363: amr_wp\n    0x7a21: gsm_amr_cbr\n    0x7a22: gsm_amr_vbr_sid\n    0xa100: comverse_infosys_g723_1\n    0xa101: comverse_infosys_avqsbc\n    0xa102: comverse_infosys_sbc\n    0xa103: symbol_g729_a\n    0xa104: voiceage_amr_wb\n    0xa105: ingenient_g726\n    0xa106: mpeg4_aac\n    0xa107: encore_g726\n    0xa108: zoll_asao\n    0xa109: speex_voice\n    0xa10a: vianix_masc\n    0xa10b: wm9_spectrum_analyzer\n    0xa10c: wmf_spectrum_anayzer\n    0xa10d: gsm_610\n    0xa10e: gsm_620\n    0xa10f: gsm_660\n    0xa110: gsm_690\n    0xa111: gsm_adaptive_multirate_wb\n    0xa112: polycom_g722\n    0xa113: polycom_g728\n    0xa114: polycom_g729_a\n    0xa115: polycom_siren\n    0xa116: global_ip_ilbc\n    0xa117: radiotime_time_shift_radio\n    0xa118: nice_aca\n    0xa119: nice_adpcm\n    0xa11a: vocord_g721\n    0xa11b: vocord_g726\n    0xa11c: vocord_g722_1\n    0xa11d: vocord_g728\n    0xa11e: vocord_g729\n    0xa11f: vocord_g729_a\n    0xa120: vocord_g723_1\n    0xa121: vocord_lbc\n    0xa122: nice_g728\n    0xa123: france_telecom_g729\n    0xa124: codian\n    0xf1ac: flac\n    0xfffe: extensible\n    0xffff: development\n\n  fourcc:\n    # little-endian\n    0x46464952: riff\n    0x45564157: wave\n    0x5453494c: list\n    0x4f464e49: info\n    0x74636166: fact\n    0x20746d66: fmt\n    0x20657563: cue\n    0x61746164: data\n    0x64696d75: umid\n    0x666e696d: minf\n    0x6e676572: regn\n    0x20336469: id3\n    0x4b414550: peak\n    0x584d505f: pmx\n    # BWF chunks\n    0x74786562: bext\n    0x6c6d7861: axml\n    0x4c4d5869: ixml\n    0x616e6863:\n      id: chna\n      doc: Audio definition model\n      doc-ref: https://www.itu.int/rec/R-REC-BS.2076-2-201910-I/en\n    0x70736661:\n      id: afsp\n      doc: AFsp metadata\n"
  }
];

export default {
  category: "Media",
  formats: mediaFormats
};
