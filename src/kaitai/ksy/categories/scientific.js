/**
 * Kaitai Formats - Scientific
 * 4 formats
 * Auto-generated: 2025-09-21T19:51:05.642Z
 */

export const scientificFormats = [
  {
    "id": "ksy_nt_mdt",
    "name": "NT-MDT data",
    "category": "Scientific",
    "metadata": {
      "isGenerated": true,
      "fileExtensions": [
        "mdt"
      ],
      "description": "NT-MDT data",
      "originalCategory": "scientific",
      "filePath": "scientific/nt_mdt/nt_mdt.ksy",
      "signature": {
        "offset": 0,
        "bytes": [
          1,
          176,
          147,
          255
        ]
      },
      "endian": "le"
    },
    "content": "meta:\n  id: nt_mdt\n  title: NT-MDT data\n  application:\n    - Nova\n    - Image Analysis\n    - NanoEducator\n    - Gwyddion\n    - Callisto\n  file-extension: mdt\n  license: GPL-3.0-or-later\n  endian: le\ndoc: |\n  A native file format of NT-MDT scientific software. Usually contains\n  any of:\n\n  * [Scanning probe](https://en.wikipedia.org/wiki/Scanning_probe_microscopy) microscopy scans and spectra\n  * [Raman spectra](https://en.wikipedia.org/wiki/Raman_spectroscopy)\n  * results of their analysis\n\n  Some examples of mdt files can be downloaded at:\n\n  * <https://www.ntmdt-si.ru/resources/scan-gallery>\n  * <http://callistosoft.narod.ru/Resources/Mdt.zip>\ndoc-ref: https://svn.code.sf.net/p/gwyddion/code/trunk/gwyddion/modules/file/nt-mdt.c\nseq:\n  - id: signature\n    contents: [0x01, 0xb0, 0x93, 0xff]\n  - id: size\n    type: u4\n    doc: File size (w/o header)\n  - id: reserved0\n    size: 4\n  - id: last_frame\n    type: u2\n  - id: reserved1\n    size: 18\n  - id: wrond_doc\n    size: 1\n    doc: \"documentation specifies 32 bytes long header, but zeroth frame starts at 33th byte in reality\"\n  - id: frames\n    size: size\n    type: framez\ntypes:\n  uuid:\n    seq:\n      - id: data\n        type: u1\n        repeat: expr\n        repeat-expr: 16\n  framez:\n    seq:\n      - id: frames\n        type: frame\n        repeat: expr\n        repeat-expr: '_root.last_frame+1'\n  title:\n    seq:\n      - id: title_len\n        type: u4\n      - id: title\n        type: str\n        encoding: cp1251\n        size: title_len\n  xml:\n    seq:\n      - id: xml_len\n        type: u4\n      - id: xml\n        type: str\n        encoding: UTF-16LE\n        size: xml_len\n  version:\n    seq:\n      - id: minor\n        type: u1\n      - id: major\n        type: u1\n  frame:\n    seq:\n      - id: size\n        type: u4\n        doc: \"h_sz\"\n      - id: main\n        type: frame_main\n        size: size - 4\n    enums:\n      frame_type:\n        0: scanned\n        1: spectroscopy\n        3: text\n        105: old_mda\n        106: mda\n        107: palette\n        190: curves_new\n        201: curves\n    types:\n      date_time:\n        seq:\n          - id: date\n            type: date\n          - id: time\n            type: time\n        types:\n          date:\n            seq:\n              - id: year\n                type: u2\n                doc: \"h_yea\"\n              - id: month\n                type: u2\n                doc: \"h_mon\"\n              - id: day\n                type: u2\n                doc: \"h_day\"\n          time:\n            seq:\n              - id: hour\n                type: u2\n                doc: \"h_h\"\n              - id: min\n                type: u2\n                doc: \"h_m\"\n              - id: sec\n                type: u2\n                doc: \"h_s\"\n      frame_main:\n        seq:\n          - id: type\n            type: u2\n            enum: frame_type\n            doc: \"h_what\"\n          - id: version\n            type: version\n          - id: date_time\n            type: date_time\n          - id: var_size\n            type: u2\n            doc: \"h_am, v6 and older only\"\n          - id: frame_data\n            -orig-id: dataframe\n            size-eos: true\n            type:\n              switch-on: type\n              cases:\n                'frame_type::scanned': fd_scanned\n                'frame_type::mda': fd_meta_data\n                'frame_type::spectroscopy': fd_spectroscopy\n                'frame_type::curves': fd_spectroscopy\n                'frame_type::curves_new': fd_curves_new\n            doc: \"\"\n      dots:\n        seq:\n          - id: fm_ndots\n            type: u2\n          - id: coord_header\n            -orig-id: coordheader\n            type: dots_header\n            if: fm_ndots > 0\n          - id: coordinates\n            type: dots_data\n            repeat: expr\n            repeat-expr: fm_ndots\n          - id: data\n            type: data_linez(_index)\n            repeat: expr\n            repeat-expr: fm_ndots\n        types:\n          dots_header:\n            seq:\n              - id: header_size\n                -orig-id: headersize\n                type: s4\n              - id: header\n                size: header_size\n                type: header_\n            types:\n              header_:\n                seq:\n                  - id: coord_size\n                    -orig-id: coordsize\n                    type: s4\n                  - id: version\n                    type: s4\n                  - id: xyunits\n                    type: s2\n                    enum: unit\n          dots_data:\n            seq:\n              - id: coord_x\n                type: f4\n              - id: coord_y\n                type: f4\n              - id: forward_size\n                type: s4\n              - id: backward_size\n                type: s4\n          data_linez:\n            params:\n              - id: index\n                type: u2\n            seq:\n              - id: forward\n                type: s2\n                repeat: expr\n                repeat-expr: _parent.coordinates[index].forward_size\n              - id: backward\n                type: s2\n                repeat: expr\n                repeat-expr: _parent.coordinates[index].backward_size\n      axis_scale:\n        seq:\n          - id: offset\n            type: f4\n            doc: \"x_scale->offset = gwy_get_gfloat_le(&p);# r0 (physical units)\"\n          - id: step\n            type: f4\n            doc: >\n              x_scale->step = gwy_get_gfloat_le(&p);\n              r (physical units)\n              x_scale->step = fabs(x_scale->step);\n              if (!x_scale->step) {\n                g_warning(\"x_scale.step == 0, changing to 1\");\n                x_scale->step = 1.0;\n              }\n          - id: unit\n            type: s2 # x_scale->unit = (gint16)gwy_get_guint16_le(&p);\n            enum: unit\n            doc: \"U\"\n\n      fd_curves_new:\n        seq:\n          - id: block_count\n            type: u4\n          - id: blocks_headers\n            type: block_descr\n            repeat: expr\n            repeat-expr: block_count\n          - id: blocks_names\n            type: str\n            encoding: UTF-8\n            size: blocks_headers[_index].name_len\n            repeat: expr\n            repeat-expr: block_count\n          - id: blocks_data\n            size: blocks_headers[_index].len\n            repeat: expr\n            repeat-expr: block_count\n        types:\n          block_descr:\n            seq:\n              - id: name_len\n                type: u4\n              - id: len\n                type: u4\n      fd_spectroscopy:\n        seq:\n          - id: vars\n            type: vars\n            size: _parent.var_size\n          - id: fm_mode\n            type: u2\n          - id: fm_xres\n            type: u2\n          - id: fm_yres\n            type: u2\n\n          - id: dots\n            type: dots\n\n          - id: data\n            type: s2\n            repeat: expr\n            repeat-expr: fm_xres*fm_yres\n\n          - id: title\n            type: title\n          - id: xml\n            type: xml\n        types:\n          vars:\n            seq:\n              - id: x_scale\n                type: axis_scale\n              - id: y_scale\n                type: axis_scale\n              - id: z_scale\n                type: axis_scale\n              - id: sp_mode\n                type: u2\n              - id: sp_filter\n                type: u2\n              - id: u_begin\n                type: f4\n              - id: u_end\n                type: f4\n              - id: z_up\n                type: s2\n              - id: z_down\n                type: s2\n              - id: sp_averaging\n                type: u2\n              - id: sp_repeat\n                type: u1 # bool\n              - id: sp_back\n                type: u1 # bool\n              - id: sp_4nx\n                type: s2\n              - id: sp_osc\n                type: u1 # bool\n              - id: sp_n4\n                type: u1\n              - id: sp_4x0\n                type: f4\n              - id: sp_4xr\n                type: f4\n              - id: sp_4u\n                type: s2\n              - id: sp_4i\n                type: s2\n              - id: sp_nx\n                type: s2\n      fd_meta_data:\n        seq:\n          - id: head_size\n            type: u4\n          - id: tot_len\n            type: u4\n          - id: guids\n            type: uuid\n            repeat: expr\n            repeat-expr: 2\n          - id: frame_status\n            size: 4\n          - id: name_size\n            type: u4\n          - id: comm_size\n            type: u4\n          - id: view_info_size\n            type: u4\n          - id: spec_size\n            type: u4\n          - id: source_info_size\n            type: u4\n          - id: var_size\n            type: u4\n          - id: data_offset\n            type: u4\n          - id: data_size\n            type: u4\n          - id: title\n            type: str\n            size: name_size\n            encoding: UTF-8\n          - id: xml\n            type: str\n            size: comm_size\n            encoding: UTF-8\n          - id: struct_len\n            type: u4\n          - id: array_size\n            type: u8\n          - id: cell_size\n            type: u4\n          - id: n_dimensions\n            type: u4\n          - id: n_mesurands\n            type: u4\n          - id: dimensions\n            type: calibration\n            repeat: expr\n            repeat-expr: n_dimensions\n          - id: mesurands\n            type: calibration\n            repeat: expr\n            repeat-expr: n_mesurands\n        instances:\n          image:\n            pos: data_offset\n            type: image\n            size: data_size\n        types:\n          image:\n            seq:\n              - id: image\n                type: vec\n                repeat: eos\n            types:\n              vec:\n                seq:\n                  - id: items\n                    type:\n                      switch-on: _parent._parent.mesurands[_index].data_type\n                      cases:\n                        \"data_type::uint8\": u1\n                        \"data_type::uint16\": u2\n                        \"data_type::uint32\": u4\n                        \"data_type::uint64\": u8\n                        \"data_type::int8\": s1\n                        \"data_type::int16\": s2\n                        \"data_type::int32\": s4\n                        \"data_type::int64\": s8\n                        \"data_type::float32\": f4\n                        \"data_type::float64\": f8\n                        #\"data_type::float48\": s8\n                        #\"data_type::float80\": s8\n                        #\"data_type::floatfix\": s8\n                    repeat: expr\n                    repeat-expr: _parent._parent.n_mesurands\n          calibration:\n            seq:\n              - id: len_tot\n                type: u4\n              - id: len_struct\n                type: u4\n              - id: len_name\n                type: u4\n              - id: len_comment\n                type: u4\n              - id: len_unit\n                type: u4\n              - id: si_unit\n                type: u8\n              - id: accuracy\n                type: f8\n              - id: function_id_and_dimensions\n                type: u8\n              - id: bias\n                type: f8\n              - id: scale\n                type: f8\n              - id: min_index\n                type: u8\n              - id: max_index\n                type: u8\n              - id: data_type\n                type: s4\n                enum: data_type\n              - id: len_author\n                type: u4\n              - id: name\n                type: str\n                encoding: utf-8\n                size: len_name\n              - id: comment\n                type: str\n                encoding: utf-8\n                size: len_comment\n              - id: unit\n                type: str\n                encoding: utf-8\n                size: len_unit\n              - id: author\n                type: str\n                encoding: utf-8\n                size: len_author\n            instances:\n              count:\n                -orig-id: nx, ny and nz\n                value: max_index - min_index + 1\n      fd_scanned:\n        seq:\n          - id: vars\n            type: vars\n            size: _parent.var_size\n          - id: orig_format\n            type: u4\n            doc: \"s_oem\"\n            if: false\n\n          - id: tune\n            type: u4\n            enum: lift_mode\n            doc: \"z_tune\"\n            if: false\n\n          - id: feedback_gain\n            type: f8\n            doc: \"s_fbg\"\n            if: false\n\n          - id: dac_scale\n            type: s4\n            doc: \"s_s\"\n            if: false\n\n          - id: overscan\n            type: s4\n            doc: \"s_xov (in %)\"\n            if: false\n\n            #Frame mode stuff\n          - id: fm_mode\n            type: u2\n            doc: \"m_mode\"\n          - id: fm_xres\n            type: u2\n            doc: \"m_nx\"\n          - id: fm_yres\n            type: u2\n            doc: \"m_ny\"\n          - id: dots\n            type: dots\n\n\n          - id: image\n            type: s2\n            repeat: expr\n            repeat-expr: fm_xres * fm_yres\n\n            #Stuff after data\n          - id: title\n            type: title\n          - id: xml\n            type: xml\n        types:\n          vars:\n            seq:\n              - id: x_scale\n                type: axis_scale\n              - id: y_scale\n                type: axis_scale\n              - id: z_scale\n                type: axis_scale\n\n              - id: channel_index\n                type: u1\n                enum: adc_mode\n                doc: \"s_mode\"\n\n              - id: mode\n                type: u1\n                enum: mode\n                doc: \"s_dev\"\n\n              - id: xres\n                type: u2\n                doc: \"s_nx\"\n              - id: yres\n                type: u2\n                doc: \"s_ny\"\n              - id: ndacq\n                type: u2\n                doc: \"Step (DAC)\"\n              - id: step_length\n                type: f4\n                doc: \"s_rs in Angstrom's (Angstrom*gwy_get_gfloat_le(&p))\"\n\n              - id: adt\n                type: u2\n                doc: \"s_adt\"\n\n              - id: adc_gain_amp_log10\n                type: u1\n                doc: \"s_adc_a\"\n\n              - id: adc_index\n                type: u1\n                doc: \"ADC index\"\n\n                #XXX: Some fields have different meaning in different versions\n              - id: input_signal_or_version\n                type: u1\n                doc: \"MDTInputSignal smp_in; s_smp_in (for signal) s_8xx (for version)\"\n\n              - id: substr_plane_order_or_pass_num\n                type: u1\n                doc: \"s_spl or z_03\"\n\n              - id: scan_dir\n                type: scan_dir\n                doc: \"s_xy TODO: interpretation\"\n              - id: power_of_2\n                type: u1\n                doc: \"s_2n (bool)\"\n\n              - id: velocity\n                type: f4 # frame->velocity = Angstrom*gwy_get_gfloat_le(&p);\n                doc: \"s_vel (Angstrom/second)\"\n\n              - id: setpoint\n                type: f4 # frame->setpoint = Nano*gwy_get_gfloat_le(&p);\n                doc: \"s_i0\"\n\n              - id: bias_voltage\n                type: f4 # frame->bias_voltage = gwy_get_gfloat_le(&p);\n                doc: \"s_ut\"\n\n              - id: draw\n                type: u1\n                doc: \"s_draw (bool)\"\n\n              - id: reserved\n                type: u1\n\n              - id: xoff\n                type: s4\n                doc: \"s_x00 (in DAC quants)\"\n\n              - id: yoff\n                type: s4\n                doc: \"s_y00 (in DAC quants)\"\n\n              - id: nl_corr\n                type: u1\n                doc: \"s_cor (bool)\"\n          dot:\n            seq:\n              - id: x\n                type: s2\n              - id: y\n                type: s2\n          scan_dir:\n            seq:\n              - id: unkn\n                type: b4\n              - id: double_pass\n                type: b1\n              - id: bottom\n                type: b1\n                doc: \"Bottom - 1 Top - 0\"\n              - id: left\n                type: b1\n                doc: \"Left - 1 Right - 0\"\n              - id: horizontal\n                type: b1\n                doc: \"Horizontal - 1 Vertical - 0\"\n        enums:\n          mode:\n            0: stm\n            1: afm\n            2: unknown2\n            3: unknown3\n            4: unknown4\n          input_signal:\n            0: extension_slot\n            1: bias_v\n            2: ground\n          lift_mode:\n            0: step\n            1: fine\n            2: slope\nenums:\n  spm_technique:\n    0: contact_mode\n    1: semicontact_mode\n    2: tunnel_current\n    3: snom\n\n  data_type:\n    0: unknown0\n    -1: int8\n    1: uint8\n    -2: int16\n    2: uint16\n    -4: int32\n    4: uint32\n    -8: int64\n    8: uint64\n    -5892: float32\n    -9990: float48\n    -13320: float64\n    -16138: float80\n    -65544: floatfix\n\n\n  xml_scan_location:\n    0: hlt\n    1: hlb\n    2: hrt\n    3: hrb\n    4: vlt\n    5: vlb\n    6: vrt\n    7: vrb\n\n  xml_param_type:\n    0: none\n    1: laser_wavelength\n    2: units\n    0xff: data_array\n\n  spm_mode:\n    0: constant_force\n    1: contact_constant_height\n    2: contact_error\n    3: lateral_force\n    4: force_modulation\n    5: spreading_resistance_imaging\n    6: semicontact_topography\n    7: semicontact_error\n    8: phase_contrast\n    9: ac_magnetic_force\n    10: dc_magnetic_force\n    11: electrostatic_force\n    12: capacitance_contrast\n    13: kelvin_probe\n    14: constant_current\n    15: barrier_height\n    16: constant_height\n    17: afam\n    18: contact_efm\n    19: shear_force_topography\n    20: sfom\n    21: contact_capacitance\n    22: snom_transmission\n    23: snom_reflection\n    24: snom_all\n    25: snom\n\n  adc_mode:\n    0xFF: off\n    0: height\n    1: dfl\n    2: lateral_f\n    3: bias_v\n    4: current\n    5: fb_out\n    6: mag\n    7: mag_sin #MAG*Sin\n    8: mag_cos #MAG*Cos\n    9: rms\n    10: calc_mag\n    11: phase1\n    12: phase2\n    13: calc_phase\n    14: ex1\n    15: ex2\n    16: hv_x\n    17: hv_y\n    18: snap_back\n  consts:\n    32: file_header_size\n    22: frame_header_size\n    8: frame_mode_size\n    30: axis_scales_size\n    77: scan_vars_min_size\n    38: spectro_vars_min_size\n  unit:\n    -10: raman_shift\n    -9: reserved0\n    -8: reserved1\n    -7: reserved2\n    -6: reserved3\n    -5: meter\n    -4: centi_meter\n    -3: milli_meter\n    -2: micro_meter\n    -1: nano_meter\n    0: angstrom\n    1: nano_ampere\n    2: volt\n    3: none\n    4: kilo_hertz\n    5: degrees\n    6: percent\n    7: celsius_degree # -orig-id: celsium_degree\n    8: volt_high\n    9: second\n    10: milli_second\n    11: micro_second\n    12: nano_second\n    13: counts\n    14: pixels\n    15: reserved_sfom0\n    16: reserved_sfom1\n    17: reserved_sfom2\n    18: reserved_sfom3\n    19: reserved_sfom4\n    20: ampere2\n    21: milli_ampere\n    22: micro_ampere\n    23: nano_ampere2\n    24: pico_ampere\n    25: volt2\n    26: milli_volt\n    27: micro_volt\n    28: nano_volt\n    29: pico_volt\n    30: newton\n    31: milli_newton\n    32: micro_newton\n    33: nano_newton\n    34: pico_newton\n    35: reserved_dos0\n    36: reserved_dos1\n    37: reserved_dos2\n    38: reserved_dos3\n    39: reserved_dos4\n"
  },
  {
    "id": "ksy_nt_mdt_pal",
    "name": "NT-MDT palette format",
    "category": "Scientific",
    "metadata": {
      "isGenerated": true,
      "fileExtensions": [
        "pal"
      ],
      "description": "NT-MDT palette format",
      "originalCategory": "scientific",
      "filePath": "scientific/nt_mdt/nt_mdt_pal.ksy",
      "signature": {
        "offset": 0,
        "bytes": [
          78,
          84,
          45,
          77,
          68,
          84,
          32,
          80,
          97,
          108,
          101,
          116,
          116,
          101,
          32,
          70,
          105,
          108,
          101,
          32,
          32,
          49,
          46,
          48,
          48,
          33
        ]
      },
      "endian": "be"
    },
    "content": "meta:\n  id: nt_mdt_pal\n  file-extension: pal\n  endian: be\n  encoding: UTF-16LE\n  title: NT-MDT palette format\n  application:\n    - Nova\n    - Image Analysis\n    - NanoEducator\n  license: Unlicense\ndoc: It is a color scheme for visualising SPM scans.\nseq:\n  - id: signature\n    contents: \"NT-MDT Palette File  1.00!\"\n  - id: count #?\n    type: u4\n  - id: meta\n    type: meta\n    repeat: expr\n    repeat-expr: count\n  - id: something2\n    size: 1\n  - id: tables\n    type: col_table(_index)\n    repeat: expr\n    repeat-expr: count\ntypes:\n  meta:\n    seq:\n      - id: unkn00\n        size: 3\n        doc: usually 0s\n      - id: unkn01\n        size: 2\n      - id: unkn02\n        size: 1\n      - id: unkn03\n        size: 1\n        doc: usually 0s\n      - id: colors_count\n        type: u2le\n      - id: unkn10\n        size: 2\n        doc: usually 0s\n      - id: unkn11\n        size: 1\n        doc: usually 4\n      - id: unkn12\n        size: 2\n        doc: usually 0s\n      - id: name_size\n        type: u2\n  color:\n    seq:\n      - id: red\n        type: u1\n      - id: unkn\n        type: u1\n      - id: blue\n        type: u1\n      - id: green\n        type: u1\n\n  col_table:\n    params:\n      - id: index\n        type: u2\n    seq:\n      - id: size1\n        type: u1\n      - id: unkn\n        type: u1\n      - id: title\n        type: str\n        size: _root.meta[index].name_size\n      - id: unkn1\n        type: u2\n      - id: colors\n        type: color\n        repeat: expr\n        repeat-expr: _root.meta[index].colors_count-1\n"
  },
  {
    "id": "ksy_avantes_roh60",
    "name": "Avantes USB spectrometer ROH file 6.0",
    "category": "Scientific",
    "metadata": {
      "isGenerated": true,
      "fileExtensions": [
        "roh"
      ],
      "description": "Avantes USB spectrometer ROH file 6.0",
      "originalCategory": "scientific",
      "filePath": "scientific/spectroscopy/avantes_roh60.ksy",
      "endian": "le"
    },
    "content": "meta:\n  id: avantes_roh60\n  title: Avantes USB spectrometer ROH file 6.0\n  file-extension: roh\n  xref:\n    wikidata: Q29960673\n  license: CC0-1.0\n  endian: le\ndoc: |\n  Avantes USB spectrometers are supplied with a Windows binary which\n  generates one ROH and one RCM file when the user clicks \"Save\n  experiment\". In the version of 6.0, the ROH file contains a header\n  of 22 four-byte floats, then the spectrum as a float array and a\n  footer of 3 floats. The first and last pixel numbers are specified in the\n  header and determine the (length+1) of the spectral data. In the tested\n  files, the length is (2032-211-1)=1820 pixels, but Kaitai determines this\n  automatically anyway.\n\n  The wavelength calibration is stored as a polynomial with coefficients\n  of 'wlintercept', 'wlx1', ... 'wlx4', the argument of which is the\n  (pixel number + 1), as found out by comparing with the original\n  Avantes converted data files. There is no intensity calibration saved,\n  but it is recommended to do it in your program - the CCD in the spectrometer\n  is so uneven that one should prepare exact pixel-to-pixel calibration curves\n  to get reasonable spectral results.\n\n  The rest of the header floats is not known to the author. Note that the\n  newer version of Avantes software has a different format, see also\n  <https://www.mathworks.com/matlabcentral/fileexchange/37103-avantes-to-matlab>\n\n  The RCM file contains the user-specified comment, so it may be useful\n  for automatic conversion of data. You may wish to divide the spectra by\n  the integration time before comparing them.\n\n  Written and tested by Filip Dominec, 2017-2018\nseq:\n  - id: unknown1\n    type: f4\n  - id: wlintercept\n    type: f4\n  - id: wlx1\n    type: f4\n  - id: wlx2\n    type: f4\n  - id: wlx3\n    type: f4\n  - id: wlx4\n    type: f4\n  - id: unknown2\n    type: f4\n    repeat: expr\n    repeat-expr: 9\n  - id: ipixfirst\n    type: f4\n  - id: ipixlast\n    type: f4\n  - id: unknown3\n    type: f4\n    repeat: expr\n    repeat-expr: 4\n  - id: spectrum\n    type: f4\n    repeat: expr\n    repeat-expr: ipixlast.to_i - ipixfirst.to_i - 1\n  - id: integration_ms\n    type: f4\n  - id: averaging\n    type: f4\n  - id: pixel_smoothing\n    type: f4\n"
  },
  {
    "id": "ksy_specpr",
    "name": "SPECtrum Processing Routines Data Format 3/4/88",
    "category": "Scientific",
    "metadata": {
      "isGenerated": true,
      "fileExtensions": [
        "spec"
      ],
      "description": "SPECtrum Processing Routines Data Format 3/4/88",
      "originalCategory": "scientific",
      "filePath": "scientific/spectroscopy/specpr.ksy",
      "endian": "be"
    },
    "content": "meta:\n  id: specpr\n  title: \"SPECtrum Processing Routines Data Format 3/4/88\"\n  file-extension: spec\n  license: Unlicense\n  #encoding: \"utf-8\"\n  encoding: \"ascii\"\n  endian: be\ndoc: |\n  Specpr records are fixed format, 1536 bytes/record. Record number\n  counting starts at 0. Binary data are in IEEE format real numbers\n  and non-byte swapped integers (compatiible with all Sun\n  Microsystems, and Hewlett Packard workstations (Intel and some DEC\n  machines are byte swapped relative to Suns and HPs). Each record may\n  contain different information according to the following scheme.\n\n  You can get some library of spectra from\n  ftp://ftpext.cr.usgs.gov/pub/cr/co/denver/speclab/pub/spectral.library/splib06.library/\nseq:\n  - id: records\n    type: record\n    repeat: eos\ntypes:\n  icflag:\n    doc: \"it is big endian\"\n    seq:\n      - id: reserved\n        type: b26\n      - id: isctb_type\n        type: b1\n        doc: |\n          =0 ctb is civil time\n          =1 ctb is universal time\n      - id: iscta_type\n        type: b1\n        doc: |\n          =0 cta is civil time\n          =1 cta is universal time\n      - id: coordinate_mode\n        type: b1\n        doc: |\n          RA, Dec / Long., Lat flag\n          =0 the array \"ira\" and \"idec\" corresponds to the right ascension and declination of an astronomical object.\n          =1 the array \"ira\" and \"idec\" correspond to the longitude and latitude of a spot on a planetary surface.\n      - id: errors\n        type: b1\n        doc: >\n          flag to indicate whether or not the data for the error bar (1 sigma standard deviation of the mean) is in the next record set.\n          =0: no errors, =1: errors in next record set.\n      # - id: type\n        # type: b2\n        # enum: record_type\n      - id: text\n        type: b1\n        doc: |\n          =0 the data in the array \"data\" is data\n          =1 the data in the array \"data\" is ascii text as is most of the header info.\n      - id: continuation\n        type: b1\n        doc: |\n          =0 first record of a spectrum consists of: header then 256 data channels\n          =1 continuation data record consisting of:\n            # bit flags followed by 1532 bytes of\n            # real data (bit 1=0) (383 channels)\n            # or 1532 bytes of text (bit 1=1).\n            # A maximum of 12 continuation records\n            # are allowed for a total of 4852\n            # channels (limited by arrays of 4864)\n            # or 19860 characters of text (bit 1=1).\n    instances:\n      type:\n        value: text.to_i * 1 + continuation.to_i * 2\n        enum: record_type\n  identifiers:\n    seq:\n      - id: ititle\n        type: str\n        size: 40\n        pad-right: 0x20\n        doc: \"Title which describes the data\"\n      - id: usernm\n        type: str\n        size: 8\n        doc: \"The name of the user who created the data record\"\n  coarse_timestamp:\n    seq:\n     - id: scaled_seconds\n       type: s4\n    instances:\n      seconds:\n        value: scaled_seconds * 24000.\n  illum_angle:\n    seq:\n     - id: angl\n       type: s4\n       doc: >\n          (Integer*4 number, in arc-seconds*6000).\n          (90 degrees=1944000000; -90 deg <= angle <= 90 deg)\n    instances:\n      seconds_total:\n        value: angl / 6000\n      minutes_total:\n        value: seconds_total / 60\n      degrees_total:\n        value: minutes_total / 60\n  data_initial:\n    seq:\n      - id: ids\n        type: identifiers\n      - id: iscta\n        type: coarse_timestamp\n        doc: \"Civil or Universal time when data was last processed\"\n      - id: isctb\n        type: coarse_timestamp\n        doc: \"Civil or Universal time at the start of the spectral run\"\n      - id: jdatea\n        type: s4\n        doc: \"Date when data was last processed. Stored as integer*4 Julian Day number *10\"\n      - id: jdateb\n        type: s4\n        doc: \"Date when the spectral run began. Stored as integer*4 Julian Day number *10\"\n      - id: istb\n        type: coarse_timestamp\n        doc: \"Siderial time when the spectral run started. See flag #05.\"\n      - id: isra\n        type: s4\n        doc: \"Right ascension coordinates of an astronomical  object, or longitude on a planetary surface (integer*4 numbers in seconds *1000) (RA in RA seconds, Longitude in arc-seconds) See flag #06.\"\n      - id: isdec\n        type: s4\n        doc: \"Declination coordinates of an astronomical object, or latitude on a planetary surface (integer*4 number in arc-seconds *1000). See flag #06.\"\n      - id: itchan\n        type: s4\n        doc: \"Total number of channels in the spectrum (integer*4 value from 1 to 4852)\"\n      - id: irmas\n        type: s4\n        doc: \"The equivalent atmospheric thickness through which the observation was obtained (=1.0 overhead scaled: airmass*1000; integer*4).\"\n      - id: revs\n        type: s4\n        doc: \"The number of independent spectral scans which were added to make the spectrum (integer*4 number).\"\n      - id: iband\n        type: s4\n        doc: \"The channel numbers which define the band normalization (scaling to unity). (integers*4).\"\n        repeat: expr\n        repeat-expr: 2\n      - id: irwav\n        type: s4\n        doc: \"The record number within the file where the wavelengths are found (integer*4).\"\n      - id: irespt\n        type: s4\n        doc: \"The record pointer to where the resolution can be found (or horizontal error bar) (integer*4).\"\n      - id: irecno\n        type: s4\n        doc: \"The record number within the file where the data is located (integer*4 number).\"\n      - id: itpntr\n        type: s4\n        doc: \"Text data record pointer. This pointer points to a data record where additional text describing the data may be found.  (32 bit integer)\"\n      - id: ihist\n        type: str\n        size: 60\n        pad-right: 0x20\n        doc: \"The program automatic 60 character history.\"\n      - id: mhist\n        type: str\n        size: 74\n        doc: \"Manual history. Program automatic for large history requirements.\"\n        repeat: expr\n        repeat-expr: 4\n      - id: nruns\n        type: s4\n        doc: \"The number of independent spectral runs which were summed or averaged to make this spectrum (integer*4).\"\n      - id: siangl\n        type: illum_angle\n        doc: >\n          The angle of incidence of illuminating radiation\n                integrating sphere = 2000000000\n                Geometric albedo   = 2000000001\n      - id: seangl\n        type: illum_angle\n        doc: >\n          The angle of emission of illuminating radiation\n                integrating sphere = 2000000000\n                Geometric albedo   = 2000000001\n      - id: sphase\n        type: s4\n        doc: >\n          The phase angle between iangl and eangl\n          (Integer*4 number, in arc-seconds*1500).\n          (180 degrees=972000000; -180 deg <= phase <= 180 deg)\n                integrating sphere = 2000000000\n      - id: iwtrns\n        type: s4\n        doc: \"Weighted number of runs (the number of runs of the spectrum with the minimum runs which was used in processing this spectrum, integer*4).\"\n      - id: itimch\n        type: s4\n        doc: \"The time observed in the sample beam for each half chop in milliseconds (for chopping spectrometers only). (integer*4)\"\n      - id: xnrm\n        type: f4\n        doc: \"The band normalization factor. For data scaled to 1.0, multiply by this number to recover photometric level (32 bit real number).\"\n      - id: scatim\n        type: f4\n        doc: \"The time it takes to make one scan of the entire spectrum in seconds (32 bit real number).\"\n      - id: timint\n        type: f4\n        doc: \"Total integration time (usually=scatime * nruns) (32 bit real number).\"\n      - id: tempd\n        type: f4\n        doc: \"Temperature in degrees Kelvin (32 bit real number).\"\n      - id: data\n        type: f4\n        doc: \"The spectral data (256 channels of 32 bit real data numbers).\"\n        repeat: expr\n        repeat-expr: 256\n    instances:\n      phase_angle_arcsec:\n        value: sphase / 1500.\n        doc: \"The phase angle between iangl and eangl in seconds\"\n  data_continuation:\n    seq:\n      - id: cdata\n        type: f4\n        repeat: expr\n        repeat-expr: 383\n        doc: \"The continuation of the data values (383 channels of 32 bit real numbers).\"\n  text_initial:\n    seq:\n      - id: ids\n        type: identifiers\n      - id: itxtpt\n        type: u4\n        doc: \"Text data record pointer. This pointer points  to a data record where additional text may be may be found.\"\n      - id: itxtch\n        type: s4\n        doc: \"The number of text characters (maximum= 19860).\"\n      - id: itext\n        type: str\n        size: 1476\n        doc: \"1476 characters of text.  Text has embedded newlines so the number of lines available is limited only by the number of characters available.\"\n  text_continuation:\n    seq:\n      - id: tdata\n        type: str\n        size: 1532\n        doc: \"1532 characters of text.\"\n  record:\n    seq:\n    - id: icflag\n      type: icflag\n      doc: \"Total number of bytes comprising the document.\"\n    - id: content\n      size: 1536 - 4\n      type:\n        switch-on: icflag.type\n        cases:\n          'record_type::data_initial': data_initial\n          'record_type::data_continuation': data_continuation\n          'record_type::text_initial': text_initial\n          'record_type::text_continuation': text_continuation\nenums:\n  record_type: # if I use 0b notation it doesn't work\n    0: data_initial\n    2: data_continuation\n    1: text_initial\n    3: text_continuation\n"
  }
];

export default {
  category: "Scientific",
  formats: scientificFormats
};
