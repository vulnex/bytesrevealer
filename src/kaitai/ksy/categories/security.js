/**
 * Kaitai Formats - Security
 * 3 formats
 * Auto-generated: 2025-09-21T19:51:05.642Z
 */

export const securityFormats = [
  {
    "id": "ksy_efivar_signature_list",
    "name": "UEFI Variable with Signature List",
    "category": "Security",
    "metadata": {
      "isGenerated": true,
      "fileExtensions": [],
      "description": "UEFI Variable with Signature List",
      "originalCategory": "security",
      "filePath": "security/efivar_signature_list.ksy",
      "endian": "le"
    },
    "content": "meta:\n  id: efivar_signature_list\n  title: UEFI Variable with Signature List\n  xref:\n    wikidata: Q859398 # UEFI standard\n  license: CC0-1.0\n  endian: le\ndoc: |\n  Parse UEFI variables db and dbx that contain signatures, certificates and\n  hashes. On a Linux system using UEFI, these variables are readable from:\n\n  ```\n  /sys/firmware/efi/efivars/db-d719b2cb-3d3a-4596-a3bc-dad00e67656f\n  /sys/firmware/efi/efivars/dbDefault-8be4df61-93ca-11d2-aa0d-00e098032b8c\n  /sys/firmware/efi/efivars/dbx-d719b2cb-3d3a-4596-a3bc-dad00e67656f\n  /sys/firmware/efi/efivars/dbxDefault-8be4df61-93ca-11d2-aa0d-00e098032b8c\n  ```\n\n  Note:\n\n  * `d719b2cb-3d3a-4596-a3bc-dad00e67656f` is defined as `EFI_IMAGE_SECURITY_DATABASE_GUID`\n  * `8be4df61-93ca-11d2-aa0d-00e098032b8c` is defined as `EFI_GLOBAL_VARIABLE`\n\n  Each file contains an EFI attribute (32-bit integer) followed by a list of\n  `EFI_SIGNATURE_LIST` structures.\ndoc-ref: https://uefi.org/sites/default/files/resources/UEFI_Spec_2_8_final.pdf\nseq:\n  - id: var_attributes\n    doc: Attributes of the UEFI variable\n    type: efi_var_attr\n  - id: signatures\n    type: signature_list\n    repeat: eos\ntypes:\n  signature_list:\n    doc-ref: EFI_SIGNATURE_LIST\n    seq:\n      - id: signature_type\n        doc: Type of the signature as a GUID\n        -orig-id: SignatureType\n        size: 0x10\n      - id: len_signature_list\n        doc: Total size of the signature list, including this header\n        type: u4\n        -orig-id: SignatureListSize\n      - id: len_signature_header\n        doc: Size of the signature header which precedes the array of signatures\n        type: u4\n        -orig-id: SignatureHeaderSize\n      - id: len_signature\n        doc: Size of each signature\n        type: u4\n        -orig-id: signatureSize\n      - id: header\n        doc: Header before the array of signatures\n        -orig-id: SignatureHeader\n        size: len_signature_header\n      - id: signatures\n        doc: An array of signatures\n        -orig-id: Signatures\n        size: len_signature\n        repeat: expr\n        repeat-expr: (len_signature_list - len_signature_header - 0x1c) / len_signature\n        if: len_signature > 0\n        type: signature_data\n    instances:\n      is_cert_sha256:\n        value: signature_type == [0x26, 0x16, 0xc4, 0xc1, 0x4c, 0x50, 0x92, 0x40, 0xac, 0xa9, 0x41, 0xf9, 0x36, 0x93, 0x43, 0x28]\n        doc: SHA-256 hash\n        doc-ref: EFI_CERT_SHA256_GUID\n      is_cert_rsa2048_key:\n        value: signature_type == [0xe8, 0x66, 0x57, 0x3c, 0x9c, 0x26, 0x34, 0x4e, 0xaa, 0x14, 0xed, 0x77, 0x6e, 0x85, 0xb3, 0xb6]\n        doc: RSA-2048 key (only the modulus since the public key exponent is known to be 0x10001)\n        doc-ref: EFI_CERT_RSA2048_GUID\n      is_cert_rsa2048_sha256:\n        value: signature_type == [0x90, 0x61, 0xb3, 0xe2, 0x9b, 0x87, 0x3d, 0x4a, 0xad, 0x8d, 0xf2, 0xe7, 0xbb, 0xa3, 0x27, 0x84]\n        doc: RSA-2048 signature of a SHA-256 hash\n        doc-ref: EFI_CERT_RSA2048_SHA256_GUID\n      is_cert_sha1:\n        value: signature_type == [0x12, 0xa5, 0x6c, 0x82, 0x10, 0xcf, 0xc9, 0x4a, 0xb1, 0x87, 0xbe, 0x01, 0x49, 0x66, 0x31, 0xbd]\n        doc: SHA-1 hash\n        doc-ref: EFI_CERT_SHA1_GUID\n      is_cert_rsa2048_sha1:\n        value: signature_type == [0x4f, 0x44, 0xf8, 0x67, 0x43, 0x87, 0xf1, 0x48, 0xa3, 0x28, 0x1e, 0xaa, 0xb8, 0x73, 0x60, 0x80]\n        doc: RSA-2048 signature of a SHA-1 hash\n        doc-ref: EFI_CERT_RSA2048_SHA1_GUID\n      is_cert_x509:\n        value: signature_type == [0xa1, 0x59, 0xc0, 0xa5, 0xe4, 0x94, 0xa7, 0x4a, 0x87, 0xb5, 0xab, 0x15, 0x5c, 0x2b, 0xf0, 0x72]\n        doc: X.509 certificate\n        doc-ref: EFI_CERT_X509_GUID\n      is_cert_sha224:\n        value: signature_type == [0x33, 0x52, 0x6e, 0x0b, 0x5c, 0xa6, 0xc9, 0x44, 0x94, 0x07, 0xd9, 0xab, 0x83, 0xbf, 0xc8, 0xbd]\n        doc: SHA-224 hash\n        doc-ref: EFI_CERT_SHA224_GUID\n      is_cert_sha384:\n        value: signature_type == [0x07, 0x53, 0x3e, 0xff, 0xd0, 0x9f, 0xc9, 0x48, 0x85, 0xf1, 0x8a, 0xd5, 0x6c, 0x70, 0x1e, 0x01]\n        doc: SHA-384 hash\n        doc-ref: EFI_CERT_SHA384_GUID\n      is_cert_sha512:\n        value: signature_type == [0xae, 0x0f, 0x3e, 0x09, 0xc4, 0xa6, 0x50, 0x4f, 0x9f, 0x1b, 0xd4, 0x1e, 0x2b, 0x89, 0xc1, 0x9a]\n        doc: SHA-512 hash\n        doc-ref: EFI_CERT_SHA512_GUID\n      is_cert_sha256_x509:\n        value: signature_type == [0x92, 0xa4, 0xd2, 0x3b, 0xc0, 0x96, 0x79, 0x40, 0xb4, 0x20, 0xfc, 0xf9, 0x8e, 0xf1, 0x03, 0xed]\n        doc: SHA256 hash of an X.509 certificate's To-Be-Signed contents, and a time of revocation\n        doc-ref: EFI_CERT_X509_SHA256_GUID\n      is_cert_sha384_x509:\n        value: signature_type == [0x6e, 0x87, 0x76, 0x70, 0xc2, 0x80, 0xe6, 0x4e, 0xaa, 0xd2, 0x28, 0xb3, 0x49, 0xa6, 0x86, 0x5b]\n        doc: SHA384 hash of an X.509 certificate's To-Be-Signed contents, and a time of revocation\n        doc-ref: EFI_CERT_X509_SHA384_GUID\n      is_cert_sha512_x509:\n        value: signature_type == [0x63, 0xbf, 0x6d, 0x44, 0x02, 0x25, 0xda, 0x4c, 0xbc, 0xfa, 0x24, 0x65, 0xd2, 0xb0, 0xfe, 0x9d]\n        doc: SHA512 hash of an X.509 certificate's To-Be-Signed contents, and a time of revocation\n        doc-ref: EFI_CERT_X509_SHA512_GUID\n      is_cert_der_pkcs7:\n        value: signature_type == [0x9d, 0xd2, 0xaf, 0x4a, 0xdf, 0x68, 0xee, 0x49, 0x8a, 0xa9, 0x34, 0x7d, 0x37, 0x56, 0x65, 0xa7]\n        doc: \"DER-encoded PKCS #7 version 1.5 [RFC2315]\"\n        doc-ref: EFI_CERT_TYPE_PKCS7_GUID\n  signature_data:\n    doc-ref: EFI_SIGNATURE_DATA\n    seq:\n      - id: owner\n        doc: An identifier which identifies the agent which added the signature to the list\n        -orig-id: SignatureOwner\n        size: 0x10\n      - id: data\n        doc: The format of the signature is defined by the SignatureType.\n        -orig-id: SignatureData\n        size-eos: true\n  efi_var_attr:\n    doc: Attributes of a UEFI variable\n    seq:\n      - id: enhanced_authenticated_access\n        type: b1\n        -orig-id: EFI_VARIABLE_ENHANCED_AUTHENTICATED_ACCESS\n      - id: append_write\n        type: b1\n        -orig-id: EFI_VARIABLE_APPEND_WRITE\n      - id: time_based_authenticated_write_access\n        type: b1\n        -orig-id: EFI_VARIABLE_TIME_BASED_AUTHENTICATED_WRITE_ACCESS\n      - id: authenticated_write_access\n        type: b1\n        -orig-id: EFI_VARIABLE_AUTHENTICATED_WRITE_ACCESS\n      - id: hardware_error_record\n        type: b1\n        -orig-id: EFI_VARIABLE_HARDWARE_ERROR_RECORD\n      - id: runtime_access\n        type: b1\n        -orig-id: EFI_VARIABLE_RUNTIME_ACCESS\n      - id: bootservice_access\n        type: b1\n        -orig-id: EFI_VARIABLE_BOOTSERVICE_ACCESS\n      - id: non_volatile\n        type: b1\n        -orig-id: EFI_VARIABLE_NON_VOLATILE\n      - id: reserved1\n        doc: Reserved (unused) bits\n        type: b24\n"
  },
  {
    "id": "ksy_openpgp_message",
    "name": "OpenPGP message",
    "category": "Security",
    "metadata": {
      "isGenerated": true,
      "fileExtensions": [
        "gpg",
        "pub",
        "pgp"
      ],
      "description": "OpenPGP message",
      "originalCategory": "security",
      "filePath": "security/openpgp_message.ksy",
      "endian": "be"
    },
    "content": "meta:\n  id: openpgp_message\n  title: OpenPGP message\n  file-extension:\n    - gpg\n    - pub\n    - pgp\n  xref:\n    justsolve: PGP\n    rfc: 4880\n    wikidata: Q2141493\n  license: MIT\n  encoding: UTF-8\n  endian: be\ndoc: The OpenPGP Message Format is a format to store encryption and signature keys for emails.\ndoc-ref: https://www.rfc-editor.org/rfc/rfc4880\nseq:\n  - id: packets\n    type: packet\n    repeat: eos\ntypes:\n  packet:\n    -webide-representation: '{packet_type_old}'\n    seq:\n      - id: one\n        type: b1\n      - id: new_packet_format\n        type: b1\n      - id: packet_type_new\n        type: b6\n        if: new_packet_format\n        enum: packet_tags\n      - id: packet_type_old\n        type: b4\n        if: not new_packet_format\n        enum: packet_tags\n      - id: len_type\n        type: b2\n        if: not new_packet_format\n      - id: body\n        type:\n          switch-on: new_packet_format\n          cases:\n            #true: new_packet\n            false: old_packet\n\n  old_packet:\n    seq:\n      - id: len\n        type:\n          switch-on: _parent.len_type\n          cases:\n            0: u1\n            1: u2\n            2: u4\n      - id: body\n        size: len\n        type:\n          switch-on: _parent.packet_type_old\n          cases:\n            packet_tags::user_id_packet: user_id_packet\n            packet_tags::signature_packet: signature_packet\n            packet_tags::public_key_packet: public_key_packet\n            packet_tags::public_subkey_packet: public_key_packet\n            packet_tags::secret_key_packet: secret_key_packet\n            packet_tags::secret_subkey_packet: public_key_packet\n\n  public_key_packet:\n    seq:\n      - id: version\n        type: u1\n      - id: timestamp\n        type: u4\n      - id: public_key_algorithm\n        type: u1\n        enum: public_key_algorithms\n      - id: len_alg\n        type: u2\n      - id: rsa_n\n        size: len_alg / 8\n      - id: padding\n        type: u2\n      - id: rsa_e\n        size: 3\n\n  user_id_packet:\n    seq:\n      - id: user_id\n        size-eos: true\n        type: str\n\n  signature_packet:\n    seq:\n      - id: version\n        type: u1\n        # enum: TODO switch?\n      - id: signature_type\n        type: u1\n        # enum: TODO 5.2.1\n      - id: public_key_algorithm\n        type: u1\n        enum: public_key_algorithms\n      - id: hash_algorithm\n        type: u1\n        enum: hash_algorithms\n      - id: len_hashed_subpacket\n        type: u2\n      - id: hashed_subpackets\n        type: subpackets\n        size: len_hashed_subpacket\n      - id: len_unhashed_subpacket\n        type: u2\n      - id: unhashed_subpackets\n        type: subpackets\n        size: len_unhashed_subpacket\n      - id: left_signed_hash\n        type: u2\n      - id: rsa_n\n        type: u2\n      - id: signature\n        size-eos: true\n\n  secret_key_packet:\n    seq:\n      - id: public_key\n        type: public_key_packet\n      - id: string_to_key\n        type: u1\n      - id: symmetric_encryption_algorithm\n        type: u1\n        enum: symmetric_key_algorithm\n        if: string_to_key >= 254\n      - id: secret_key\n        size-eos: true\n\n  subpackets:\n    seq:\n      - id: subpacketss\n        type: subpacket\n        repeat: eos\n\n  subpacket:\n    seq:\n      - id: len\n        type: len_subpacket\n      - id: subpacket_type\n        type: u1\n        enum: subpacket_types\n      - id: content\n        size: len.len - 1\n        type:\n          switch-on: subpacket_type\n          cases:\n            subpacket_types::signature_creation_time: signature_creation_time\n            subpacket_types::issuer: issuer\n            subpacket_types::key_expiration_time: key_expiration_time\n            subpacket_types::preferred_hash_algorithms: preferred_hash_algorithms\n            subpacket_types::preferred_compression_algorithms: preferred_compression_algorithms\n            subpacket_types::signature_expiration_time: signature_expiration_time\n            subpacket_types::exportable_certification: exportable_certification\n            subpacket_types::revocable: revocable\n            subpacket_types::trust_signature: trust_signature\n            subpacket_types::regular_expression: regular_expression\n            subpacket_types::revocation_key: revocation_key\n            subpacket_types::notation_data: notation_data\n            subpacket_types::key_server_preferences: key_server_preferences\n            subpacket_types::preferred_key_server: preferred_key_server\n            subpacket_types::primary_user_id: primary_user_id\n            subpacket_types::policy_uri: policy_uri\n            subpacket_types::key_flags: key_flags\n            subpacket_types::signers_user_id: signers_user_id\n            subpacket_types::reason_for_revocation: reason_for_revocation\n            subpacket_types::features: features\n            subpacket_types::signature_target: signature_target\n            subpacket_types::embedded_signature: embedded_signature\n\n  len_subpacket:\n    -webide-representation: '{len}'\n    seq:\n      - id: first_octet\n        type: u1\n      - id: second_octet\n        type: u1\n        if: first_octet >= 192 and first_octet < 255\n      - id: scalar\n        type: u4\n        if: first_octet == 255\n    instances:\n      len:\n        value: 'first_octet < 192 ? first_octet : ((first_octet >= 192 and first_octet < 255) ? (((first_octet - 192) << 8) + second_octet + 192) : scalar)'\n\n  signature_creation_time:\n    seq:\n      - id: time\n        type: u4\n\n  issuer:\n    seq:\n      - id: keyid\n        type: u8\n\n  key_expiration_time:\n    seq:\n      - id: time\n        type: u4\n\n  preferred_hash_algorithms:\n    seq:\n      - id: algorithm\n        type: u1\n        enum: hash_algorithms\n        repeat: eos\n\n  preferred_compression_algorithms:\n    seq:\n      - id: algorithm\n        type: u1\n        enum: compression_algorithms\n        repeat: eos\n\n  signature_expiration_time:\n    seq:\n      - id: time\n        type: u4\n\n  exportable_certification:\n    seq:\n      - id: exportable\n        type: u1\n\n  revocable:\n    seq:\n      - id: revocable\n        type: u1\n\n  trust_signature:\n    seq:\n      - id: level\n        type: u1\n      - id: amount\n        type: u1\n\n  regular_expression:\n    seq:\n      - id: regex\n        type: strz\n\n  revocation_key:\n    seq:\n      - id: class\n        type: u1\n      - id: public_key_algorithm\n        enum: public_key_algorithms\n        type: u1\n      - id: fingerprint\n        size: 20\n\n  notation_data:\n    seq:\n      - id: flags\n        size: 4\n      - id: len_name\n        type: u2\n      - id: len_value\n        type: u2\n      - id: name\n        size: len_name\n      - id: value\n        size: len_value\n\n  key_server_preferences:\n    seq:\n      - id: flag\n        type: u1\n        enum: server_flags\n        repeat: eos\n\n  preferred_key_server:\n    seq:\n      - id: uri\n        type: str\n        size-eos: true\n\n  primary_user_id:\n    seq:\n      - id: user_id\n        type: u1\n\n  policy_uri:\n    seq:\n      - id: uri\n        type: str\n        size-eos: true\n\n  key_flags:\n    seq:\n      - id: flag\n        type: u1\n        enum: key_flags\n        repeat: eos\n\n  signers_user_id:\n    seq:\n      - id: user_id\n        type: str\n        size-eos: true\n\n  reason_for_revocation:\n    seq:\n      - id: revocation_code\n        type: u1\n        enum: revocation_codes\n      - id: reason\n        type: str\n        size-eos: true\n\n  features:\n    seq:\n      - id: flags\n        size-eos: true\n\n  signature_target:\n    seq:\n      - id: public_key_algorithm\n        type: u1\n        enum: public_key_algorithms\n      - id: hash_algorithm\n        type: u1\n        enum: hash_algorithms\n      - id: hash\n        size-eos: true\n\n  embedded_signature:\n    seq:\n      - id: signature_packet\n        type: signature_packet\n\nenums:\n  packet_tags:\n    0: reserved_a_packet_tag_must_not_have_this_value\n    1: public_key_encrypted_session_key_packet\n    2: signature_packet\n    3: symmetric_key_encrypted_session_key_packet\n    4: one_pass_signature_packet\n    5: secret_key_packet\n    6: public_key_packet\n    7: secret_subkey_packet\n    8: compressed_data_packet\n    9: symmetrically_encrypted_data_packet\n    10: marker_packet\n    11: literal_data_packet\n    12: trust_packet\n    13: user_id_packet\n    14: public_subkey_packet\n    17: user_attribute_packet\n    18: sym_encrypted_and_integrity_protected_data_packet\n    19: modification_detection_code_packet\n    60: private_or_experimental_values_0\n    61: private_or_experimental_values_1\n    62: private_or_experimental_values_2\n    63: private_or_experimental_values_3\n\n  public_key_algorithms:\n    1: rsa_encrypt_or_sign_hac\n    2: rsa_encrypt_only_hac\n    3: rsa_sign_only_hac\n    16: elgamal_encrypt_only_elgamal_hac\n    17: dsa_digital_signature_algorithm_fips_hac\n    18: reserved_for_elliptic_curve\n    19: reserved_for_ecdsa\n    20: reserved_formerly_elgamal_encrypt_or_sign_\n    21: reserved_for_diffie_hellman_x_as_defined_for_ietf_s_mime\n    100: private_experimental_algorithm_00\n    101: private_experimental_algorithm_01\n    102: private_experimental_algorithm_02\n    103: private_experimental_algorithm_03\n    104: private_experimental_algorithm_04\n    105: private_experimental_algorithm_05\n    106: private_experimental_algorithm_06\n    107: private_experimental_algorithm_07\n    108: private_experimental_algorithm_08\n    109: private_experimental_algorithm_09\n    110: private_experimental_algorithm_10\n\n  symmetric_key_algorithm:\n    0: plain\n    1: idea\n    2: triple_des\n    3: cast5\n    4: blowfisch\n    5: reserved5\n    6: reserved6\n    7: aes_128\n    8: aes_192\n    9: aes_256\n    10: twofish_256\n    100: private_experimental_algorithm_00\n    101: private_experimental_algorithm_01\n    102: private_experimental_algorithm_02\n    103: private_experimental_algorithm_03\n    104: private_experimental_algorithm_04\n    105: private_experimental_algorithm_05\n    106: private_experimental_algorithm_06\n    107: private_experimental_algorithm_07\n    108: private_experimental_algorithm_08\n    109: private_experimental_algorithm_09\n    110: private_experimental_algorithm_10\n\n  hash_algorithms:\n    1: md5\n    2: sha1\n    3: ripemd160\n    4: reserved4\n    5: reserved5\n    6: reserved6\n    7: reserved7\n    8: sha256\n    9: sha384\n    10: sha512\n    11: sha224\n    100: private_experimental_algorithm_00\n    101: private_experimental_algorithm_01\n    102: private_experimental_algorithm_02\n    103: private_experimental_algorithm_03\n    104: private_experimental_algorithm_04\n    105: private_experimental_algorithm_05\n    106: private_experimental_algorithm_06\n    107: private_experimental_algorithm_07\n    108: private_experimental_algorithm_08\n    109: private_experimental_algorithm_09\n    110: private_experimental_algorithm_10\n\n  compression_algorithms:\n    0: uncompressed\n    1: zib\n    2: zlib\n    3: bzip\n    100: private_experimental_algorithm_00\n    101: private_experimental_algorithm_01\n    102: private_experimental_algorithm_02\n    103: private_experimental_algorithm_03\n    104: private_experimental_algorithm_04\n    105: private_experimental_algorithm_05\n    106: private_experimental_algorithm_06\n    107: private_experimental_algorithm_07\n    108: private_experimental_algorithm_08\n    109: private_experimental_algorithm_09\n    110: private_experimental_algorithm_10\n\n  subpacket_types:\n    0: reserved0\n    1: reserved1\n    2: signature_creation_time\n    3: signature_expiration_time\n    4: exportable_certification\n    5: trust_signature\n    6: regular_expression\n    7: revocable\n    8: reserved8\n    9: key_expiration_time\n    10: placeholder_for_backward_compatibility\n    11: preferred_symmetric_algorithms\n    12: revocation_key\n    13: reserved13\n    14: reserved14\n    15: reserved15\n    16: issuer\n    17: reserved17\n    18: reserved18\n    19: reserved19\n    20: notation_data\n    21: preferred_hash_algorithms\n    22: preferred_compression_algorithms\n    23: key_server_preferences\n    24: preferred_key_server\n    25: primary_user_id\n    26: policy_uri\n    27: key_flags\n    28: signers_user_id\n    29: reason_for_revocation\n    30: features\n    31: signature_target\n    32: embedded_signature\n\n  server_flags:\n    0x80: no_modify\n\n  key_flags:\n    0x01: this_key_may_be_used_to_certify_other_keys\n    0x02: this_key_may_be_used_to_sign_data\n    0x04: this_key_may_be_used_to_encrypt_communications\n    0x08: this_key_may_be_used_to_encrypt_storage\n    0x10: the_private_component_of_this_key_may_have_been_split_by_a_secret_sharing_mechanism\n    0x20: this_key_may_be_used_for_authentication\n    0x80: the_private_component_of_this_key_may_be_in_the_possession_of_more_than_one_person\n\n  revocation_codes:\n    0: no_reason_specified_key_revocations_or_cert_revocations\n    1: key_is_superseded_key_revocations\n    2: key_material_has_been_compromised_key_revocations\n    3: key_is_retired_and_no_longer_used_key_revocations\n    32: user_id_information_is_no_longer_valid_cert_revocations\n    100: private_use_1\n    101: private_use_2\n    102: private_use_3\n    103: private_use_4\n    110: private_use_11\n"
  },
  {
    "id": "ksy_ssh_public_key",
    "name": "SSH public key",
    "category": "Security",
    "metadata": {
      "isGenerated": true,
      "fileExtensions": [],
      "description": "SSH public key",
      "originalCategory": "security",
      "filePath": "security/ssh_public_key.ksy",
      "endian": "be"
    },
    "content": "meta:\n  id: ssh_public_key\n  title: SSH public key\n  license: CC0-1.0\n  endian: be\ndoc: |\n  SSH public keys are encoded in a special binary format, typically represented\n  to end users as either one-liner OpenSSH format or multi-line PEM format\n  (commerical SSH). Text wrapper carries extra information about user who\n  created the key, comment, etc, but the inner binary is always base64-encoded\n  and follows the same internal format.\n\n  This format spec deals with this internal binary format (called \"blob\" in\n  openssh sources) only. Buffer is expected to be raw binary and not base64-d.\n  Implementation closely follows code in OpenSSH.\ndoc-ref: 'https://github.com/openssh/openssh-portable/blob/b4d4eda6/sshkey.c#L1970'\nseq:\n  - id: key_name\n    type: cstring\n  - id: body\n    type:\n      switch-on: key_name.value\n      cases:\n        '\"ssh-rsa\"': key_rsa\n        '\"ecdsa-sha2-nistp256\"': key_ecdsa\n        '\"ssh-ed25519\"': key_ed25519\n        '\"ssh-dss\"': key_dsa\ntypes:\n  key_rsa:\n    doc-ref: 'https://github.com/openssh/openssh-portable/blob/b4d4eda6/sshkey.c#L2011-L2028'\n    seq:\n      - id: rsa_e\n        type: bignum2\n        doc: Public key exponent, designated `e` in RSA documentation.\n      - id: rsa_n\n        type: bignum2\n        doc: |\n          Modulus of both public and private keys, designated `n` in RSA\n          documentation. Its length in bits is designated as \"key length\".\n    instances:\n      key_length:\n        -webide-parse-mode: eager\n        value: rsa_n.length_in_bits\n        doc: Key length in bits\n  key_ecdsa:\n    doc-ref: 'https://github.com/openssh/openssh-portable/blob/b4d4eda6/sshkey.c#L2060-L2103'\n    seq:\n      - id: curve_name\n        type: cstring\n      - id: ec\n        type: elliptic_curve\n  key_ed25519:\n    doc-ref: 'https://github.com/openssh/openssh-portable/blob/b4d4eda6/sshkey.c#L2111-L2124'\n    seq:\n      - id: len_pk\n        type: u4\n        # must be 0x20\n      - id: pk\n        size: len_pk\n  key_dsa:\n    doc-ref: 'https://github.com/openssh/openssh-portable/blob/b4d4eda6/sshkey.c#L2036-L2051'\n    seq:\n      - id: dsa_p\n        type: bignum2\n      - id: dsa_q\n        type: bignum2\n      - id: dsa_g\n        type: bignum2\n      - id: dsa_pub_key\n        type: bignum2\n  cstring:\n    doc: |\n      A integer-prefixed string designed to be read using `sshbuf_get_cstring`\n      and written by `sshbuf_put_cstring` routines in ssh sources. Name is an\n      obscure misnomer, as typically \"C string\" means a null-terminated string.\n    doc-ref: 'https://github.com/openssh/openssh-portable/blob/b4d4eda6/sshbuf-getput-basic.c#L181'\n    -webide-representation: '{value}'\n    seq:\n      - id: len\n        type: u4\n      - id: value\n        type: str\n        size: len\n        encoding: ASCII\n  bignum2:\n    doc: |\n      Big integers serialization format used by ssh, v2. In the code, the following\n      routines are used to read/write it:\n\n      * sshbuf_get_bignum2\n      * sshbuf_get_bignum2_bytes_direct\n      * sshbuf_put_bignum2\n      * sshbuf_get_bignum2_bytes_direct\n    doc-ref: |\n      https://github.com/openssh/openssh-portable/blob/b4d4eda6/sshbuf-getput-crypto.c#L35\n      https://github.com/openssh/openssh-portable/blob/b4d4eda6/sshbuf-getput-basic.c#L431\n    seq:\n      - id: len\n        type: u4\n      - id: body\n        size: len\n    instances:\n      length_in_bits:\n        value: (len - 1) * 8\n        doc: |\n          Length of big integer in bits. In OpenSSH sources, this corresponds to\n          `BN_num_bits` function.\n  elliptic_curve:\n    doc: |\n      Elliptic curve dump format used by ssh. In OpenSSH code, the following\n      routines are used to read/write it:\n\n      * sshbuf_get_ec\n      * get_ec\n    doc-ref: |\n      https://github.com/openssh/openssh-portable/blob/b4d4eda6/sshbuf-getput-crypto.c#L90\n      https://github.com/openssh/openssh-portable/blob/b4d4eda6/sshbuf-getput-crypto.c#L76\n    seq:\n      - id: len\n        type: u4\n      - id: body\n        size: len\n"
  }
];

export default {
  category: "Security",
  formats: securityFormats
};
